    /*
     * Notice: file generated by MIBMAKE from mibsntp.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibsntp.mdf
     */
#line 3 "mibsntp.mdf"
/*
 * $Id: mibsntp.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

    /*
     * Contains the SNTP profile for TNT and the GMT offset enumeration for
     * SNTP client.
     */
#line 29 "mibsntp.mdf"

#if ! defined( MIBSNTP_H )
# define MIBSNTP_H

extern ConstPtr
mibFactorySntpProfile( MibProfileType	mibType,
		       Uint32		info );
    /*
     * User interface info exported by this module.
     */
extern const MibFieldEnumParams		utcOffsetParams;
extern const MibFieldComplexParams	sntpParams;
extern const MibFieldEnumParams		sntpModeParams;


    /*
     * Maximum number of SNTP hosts.
     */
#define MAX_SNTP_HOSTS			3


    /*
     * UtcOffset:
     *
     * Offset from UTC (GMT) of the current time zone. The user can select from
     * one of these values. Daylight savings time adjustment is NOT automatic.
     *
     *  UTC_MINUS_1130
     *
     *  UTC_MINUS_1100
     *
     *  UTC_MINUS_1030
     *
     *  UTC_MINUS_1000
     *
     *  UTC_MINUS_0930
     *
     *  UTC_MINUS_0900
     *
     *  UTC_MINUS_0830
     *
     *  UTC_MINUS_0800
     *
     *  UTC_MINUS_0730
     *
     *  UTC_MINUS_0700
     *
     *  UTC_MINUS_0630
     *
     *  UTC_MINUS_0600
     *
     *  UTC_MINUS_0530
     *
     *  UTC_MINUS_0500
     *
     *  UTC_MINUS_0430
     *
     *  UTC_MINUS_0400
     *
     *  UTC_MINUS_0330
     *
     *  UTC_MINUS_0300
     *
     *  UTC_MINUS_0230
     *
     *  UTC_MINUS_0200
     *
     *  UTC_MINUS_0130
     *
     *  UTC_MINUS_0100
     *
     *  UTC_MINUS_0030
     *
     *  UTC_PLUS_0000
     *
     *  UTC_PLUS_0030
     *
     *  UTC_PLUS_0100
     *
     *  UTC_PLUS_0130
     *
     *  UTC_PLUS_0200
     *
     *  UTC_PLUS_0230
     *
     *  UTC_PLUS_0300
     *
     *  UTC_PLUS_0330
     *
     *  UTC_PLUS_0400
     *
     *  UTC_PLUS_0430
     *
     *  UTC_PLUS_0500
     *
     *  UTC_PLUS_0530
     *
     *  UTC_PLUS_0600
     *
     *  UTC_PLUS_0630
     *
     *  UTC_PLUS_0700
     *
     *  UTC_PLUS_0730
     *
     *  UTC_PLUS_0800
     *
     *  UTC_PLUS_0830
     *
     *  UTC_PLUS_0900
     *
     *  UTC_PLUS_0930
     *
     *  UTC_PLUS_1000
     *
     *  UTC_PLUS_1030
     *
     *  UTC_PLUS_1100
     *
     *  UTC_PLUS_1130
     *
     *  UTC_PLUS_1200
     */
typedef enum UtcOffset {
#line 73 "mibsntp.mdf"
    UTC_MINUS_1130 = -41400,
#line 74 "mibsntp.mdf"
    UTC_MINUS_1100 = -39600,
#line 75 "mibsntp.mdf"
    UTC_MINUS_1030 = -37800,
#line 76 "mibsntp.mdf"
    UTC_MINUS_1000 = -36000,
#line 77 "mibsntp.mdf"
    UTC_MINUS_0930 = -34200,
#line 78 "mibsntp.mdf"
    UTC_MINUS_0900 = -32400,
#line 79 "mibsntp.mdf"
    UTC_MINUS_0830 = -30600,
#line 80 "mibsntp.mdf"
    UTC_MINUS_0800 = -28800,
#line 81 "mibsntp.mdf"
    UTC_MINUS_0730 = -27000,
#line 82 "mibsntp.mdf"
    UTC_MINUS_0700 = -25200,
#line 83 "mibsntp.mdf"
    UTC_MINUS_0630 = -23400,
#line 84 "mibsntp.mdf"
    UTC_MINUS_0600 = -21600,
#line 85 "mibsntp.mdf"
    UTC_MINUS_0530 = -19800,
#line 86 "mibsntp.mdf"
    UTC_MINUS_0500 = -18000,
#line 87 "mibsntp.mdf"
    UTC_MINUS_0430 = -16200,
#line 88 "mibsntp.mdf"
    UTC_MINUS_0400 = -14400,
#line 89 "mibsntp.mdf"
    UTC_MINUS_0330 = -12600,
#line 90 "mibsntp.mdf"
    UTC_MINUS_0300 = -10800,
#line 91 "mibsntp.mdf"
    UTC_MINUS_0230 = -9000,
#line 92 "mibsntp.mdf"
    UTC_MINUS_0200 = -7200,
#line 93 "mibsntp.mdf"
    UTC_MINUS_0130 = -5400,
#line 94 "mibsntp.mdf"
    UTC_MINUS_0100 = -3600,
#line 95 "mibsntp.mdf"
    UTC_MINUS_0030 = -1800,
#line 96 "mibsntp.mdf"
    UTC_PLUS_0000 = 0,
#line 97 "mibsntp.mdf"
    UTC_PLUS_0030 = 1800,
#line 98 "mibsntp.mdf"
    UTC_PLUS_0100 = 3600,
#line 99 "mibsntp.mdf"
    UTC_PLUS_0130 = 5400,
#line 100 "mibsntp.mdf"
    UTC_PLUS_0200 = 7200,
#line 101 "mibsntp.mdf"
    UTC_PLUS_0230 = 9000,
#line 102 "mibsntp.mdf"
    UTC_PLUS_0300 = 10800,
#line 103 "mibsntp.mdf"
    UTC_PLUS_0330 = 12600,
#line 104 "mibsntp.mdf"
    UTC_PLUS_0400 = 14400,
#line 105 "mibsntp.mdf"
    UTC_PLUS_0430 = 16200,
#line 106 "mibsntp.mdf"
    UTC_PLUS_0500 = 18000,
#line 107 "mibsntp.mdf"
    UTC_PLUS_0530 = 19800,
#line 108 "mibsntp.mdf"
    UTC_PLUS_0600 = 21600,
#line 109 "mibsntp.mdf"
    UTC_PLUS_0630 = 23400,
#line 110 "mibsntp.mdf"
    UTC_PLUS_0700 = 25200,
#line 111 "mibsntp.mdf"
    UTC_PLUS_0730 = 27000,
#line 112 "mibsntp.mdf"
    UTC_PLUS_0800 = 28800,
#line 113 "mibsntp.mdf"
    UTC_PLUS_0830 = 30600,
#line 114 "mibsntp.mdf"
    UTC_PLUS_0900 = 32400,
#line 115 "mibsntp.mdf"
    UTC_PLUS_0930 = 34200,
#line 116 "mibsntp.mdf"
    UTC_PLUS_1000 = 36000,
#line 117 "mibsntp.mdf"
    UTC_PLUS_1030 = 37800,
#line 118 "mibsntp.mdf"
    UTC_PLUS_1100 = 39600,
#line 119 "mibsntp.mdf"
    UTC_PLUS_1130 = 41400,
#line 120 "mibsntp.mdf"
    UTC_PLUS_1200 = 43200
} UtcOffset;


static __inline__ Bool
validUtcOffset (int x)
{
    switch (x) {
#line 73 "mibsntp.mdf"
    case UTC_MINUS_1130:
#line 74 "mibsntp.mdf"
    case UTC_MINUS_1100:
#line 75 "mibsntp.mdf"
    case UTC_MINUS_1030:
#line 76 "mibsntp.mdf"
    case UTC_MINUS_1000:
#line 77 "mibsntp.mdf"
    case UTC_MINUS_0930:
#line 78 "mibsntp.mdf"
    case UTC_MINUS_0900:
#line 79 "mibsntp.mdf"
    case UTC_MINUS_0830:
#line 80 "mibsntp.mdf"
    case UTC_MINUS_0800:
#line 81 "mibsntp.mdf"
    case UTC_MINUS_0730:
#line 82 "mibsntp.mdf"
    case UTC_MINUS_0700:
#line 83 "mibsntp.mdf"
    case UTC_MINUS_0630:
#line 84 "mibsntp.mdf"
    case UTC_MINUS_0600:
#line 85 "mibsntp.mdf"
    case UTC_MINUS_0530:
#line 86 "mibsntp.mdf"
    case UTC_MINUS_0500:
#line 87 "mibsntp.mdf"
    case UTC_MINUS_0430:
#line 88 "mibsntp.mdf"
    case UTC_MINUS_0400:
#line 89 "mibsntp.mdf"
    case UTC_MINUS_0330:
#line 90 "mibsntp.mdf"
    case UTC_MINUS_0300:
#line 91 "mibsntp.mdf"
    case UTC_MINUS_0230:
#line 92 "mibsntp.mdf"
    case UTC_MINUS_0200:
#line 93 "mibsntp.mdf"
    case UTC_MINUS_0130:
#line 94 "mibsntp.mdf"
    case UTC_MINUS_0100:
#line 95 "mibsntp.mdf"
    case UTC_MINUS_0030:
#line 96 "mibsntp.mdf"
    case UTC_PLUS_0000:
#line 97 "mibsntp.mdf"
    case UTC_PLUS_0030:
#line 98 "mibsntp.mdf"
    case UTC_PLUS_0100:
#line 99 "mibsntp.mdf"
    case UTC_PLUS_0130:
#line 100 "mibsntp.mdf"
    case UTC_PLUS_0200:
#line 101 "mibsntp.mdf"
    case UTC_PLUS_0230:
#line 102 "mibsntp.mdf"
    case UTC_PLUS_0300:
#line 103 "mibsntp.mdf"
    case UTC_PLUS_0330:
#line 104 "mibsntp.mdf"
    case UTC_PLUS_0400:
#line 105 "mibsntp.mdf"
    case UTC_PLUS_0430:
#line 106 "mibsntp.mdf"
    case UTC_PLUS_0500:
#line 107 "mibsntp.mdf"
    case UTC_PLUS_0530:
#line 108 "mibsntp.mdf"
    case UTC_PLUS_0600:
#line 109 "mibsntp.mdf"
    case UTC_PLUS_0630:
#line 110 "mibsntp.mdf"
    case UTC_PLUS_0700:
#line 111 "mibsntp.mdf"
    case UTC_PLUS_0730:
#line 112 "mibsntp.mdf"
    case UTC_PLUS_0800:
#line 113 "mibsntp.mdf"
    case UTC_PLUS_0830:
#line 114 "mibsntp.mdf"
    case UTC_PLUS_0900:
#line 115 "mibsntp.mdf"
    case UTC_PLUS_0930:
#line 116 "mibsntp.mdf"
    case UTC_PLUS_1000:
#line 117 "mibsntp.mdf"
    case UTC_PLUS_1030:
#line 118 "mibsntp.mdf"
    case UTC_PLUS_1100:
#line 119 "mibsntp.mdf"
    case UTC_PLUS_1130:
#line 120 "mibsntp.mdf"
    case UTC_PLUS_1200:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * SntpMode:
     *
     *
     *  SNTP_DISABLED SNTP is disabled
     *
     *  SNTP_ENABLED SNTP is enabled and SNTP is enforced unconditionally
     *
     *  SNTP_PASSIVE SNTP is enforced conditionally, according to threshold
     *                                  field in the profile
     */

#if ( MDF_SNTP == FYES )

typedef enum SntpMode {
#line 144 "mibsntp.mdf"
    SNTP_DISABLED = 0,
#line 147 "mibsntp.mdf"
    SNTP_ENABLED = 1,
#line 150 "mibsntp.mdf"
    SNTP_PASSIVE = 2
} SntpMode;

#endif /* ( MDF_SNTP == FYES ) */

#if ( MDF_SNTP == FYES )



static __inline__ Bool
validSntpMode (int x)
{
    switch (x) {
#line 144 "mibsntp.mdf"
    case SNTP_DISABLED:
#line 147 "mibsntp.mdf"
    case SNTP_ENABLED:
#line 150 "mibsntp.mdf"
    case SNTP_PASSIVE:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( MDF_SNTP == FYES ) */

    /*
     * SntpProfile:
     *
     * A profile to store SNTP parameters. A single instance of this profile is
     * stored in the global IP profile for TNT platforms only.
     *
     *  sntpEnabled Use SNTP to get time.
     *
     *  tzMode Offset from UTC for the timezone of this unit. Set to UTC-0000
     *                                  if you desire time to be kept in UTC.
     *
     *  sntpHost The IP Address of the SNTP host.
     *
     *  threshold SNTP update threshold, in seconds. This field is applied only
     *                                  if the 'enabled' field is set to
     *                                  'passive'.
     */

//#if ( PLATFORM & TNT ) && ( MDF_SNTP == FYES )
#if ( MDF_SNTP == FYES )

typedef struct sntpProfile {
#line 171 "mibsntp.mdf"
    SntpMode                            sntpEnabled;
#line 175 "mibsntp.mdf"
    UtcOffset                           tzMode;
#line 180 "mibsntp.mdf"
    IpAddress                           sntpHost[ MAX_SNTP_HOSTS ];
#line 184 "mibsntp.mdf"
    LongWord                            sntpThreshold;
    LongWord                            sntpInterval;
}
#if ( USERIF & CLI )
__PACK__
#endif
SntpProfile;

//#endif /* ( PLATFORM & TNT ) && ( MDF_SNTP == FYES ) */
#endif /* ( MDF_SNTP == FYES ) */
#line 243 "mibsntp.mdf"

#endif /* MIBSNTP_H */

