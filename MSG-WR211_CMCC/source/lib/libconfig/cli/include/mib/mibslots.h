    /*
     * Notice: file generated by MIBMAKE from mibslots.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibslots.mdf
     */
#line 3 "mibslots.mdf"
/*
 *	$Id: mibslots.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *	Copyright (c) 1995 UTT Technologies, Inc.
 *	All rights reserved.
 *	Use of copyright notice does not imply publication.
 *
 *
 *			CONFIDENTIAL INFORMATION
 *			------------------------
 *	This Document contains Confidential Information or Trade Secrets,
 *	or both, which are the property of UTT Technologies, Inc.
 *	This document may not be copied, reproduced, reduced to any
 *	electronic medium or machine readable form or otherwise duplicated
 *	and the information herein may not be used, disseminated or
 *	otherwise disclosed, except with the prior written consent of
 *	 UTT Technologies, Inc.
 */

    /*
     * Profile contains TNT slot state info.  This is a non-persistant
     * profile managed by the tnt slot manager.
     */
#line 29 "mibslots.mdf"

#if ! defined( MIBSLOTS_H )
#define MIBSLOTS_H

    /*
     * The name of the SNMP State profile is stored in this global
     * data variable.
     */
extern const char* const		mibProfSlotState;

    /*
     * The field number used to index this profile
     */
#define MIB_PROF_SLOT_STATE_INDEX	1


    /*
     * OperState:
     *
     * Values to indicate the current state of a slot. The desired state may
     * differ from the current state, e.g. when a device is powering up or when
     * the desired state is changed from up to down on a running slot. The
     * OperState can not be changed by the user.
     *
     *  OPER_STATE_DOWN The addressed device is down, a non-operational state.
     *
     *  OPER_STATE_UP The addressed device is in a normal operations mode.
     *
     *  OPER_STATE_DIAG The addressed device is in a diagnostics mode.
     *
     *  OPER_STATE_COREDUMP The addressed device is dumping core.
     *
     *  OPER_STATE_PEND The addressed device is no longer down, but is not
     *                                  ready for normal operation yet. This
     *                                  state is a transitional state, when
     *                                  shelf-to-slot communications are needed
     *                                  to make the slot fully operational.
     *
     *  OPER_STATE_POST Another transitional state. Indicates slot is
     *                                  downloaded and running POST.
     *
     *  OPER_STATE_NONE The addressed device does not exist; the slot is empty.
     */
typedef enum OperState {
#line 72 "mibslots.mdf"
    OPER_STATE_DOWN = 1,
#line 75 "mibslots.mdf"
    OPER_STATE_UP,
#line 78 "mibslots.mdf"
    OPER_STATE_DIAG,
#line 81 "mibslots.mdf"
    OPER_STATE_COREDUMP,
#line 84 "mibslots.mdf"
    OPER_STATE_PEND,
#line 90 "mibslots.mdf"
    OPER_STATE_POST,
#line 94 "mibslots.mdf"
    OPER_STATE_NONE
} OperState;


static __inline__ Bool
validOperState (int x)
{
    switch (x) {
#line 72 "mibslots.mdf"
    case OPER_STATE_DOWN:
#line 75 "mibslots.mdf"
    case OPER_STATE_UP:
#line 78 "mibslots.mdf"
    case OPER_STATE_DIAG:
#line 81 "mibslots.mdf"
    case OPER_STATE_COREDUMP:
#line 84 "mibslots.mdf"
    case OPER_STATE_PEND:
#line 90 "mibslots.mdf"
    case OPER_STATE_POST:
#line 94 "mibslots.mdf"
    case OPER_STATE_NONE:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * ReqdState:
     *
     * Values to indicate the required state of a slot. The required state may
     * differ from the current state, e.g. when a device is powering up or when
     * the desired state is changed from up to down on a running slot. Changing
     * the ReqdState forces an immediate change of the slot to the new state.
     * However, there can be a gap between the time a state change is requested
     * and when it occurs.
     *
     *  REQD_STATE_DOWN The addressed device is required to be in the down,
     *                                  non-operational state.
     *
     *  REQD_STATE_UP The addressed device is required to be in a normal
     *                                  operating state.
     */
typedef enum ReqdState {
#line 110 "mibslots.mdf"
    REQD_STATE_DOWN = 1,
#line 114 "mibslots.mdf"
    REQD_STATE_UP
} ReqdState;


static __inline__ Bool
validReqdState (int x)
{
    switch (x) {
#line 110 "mibslots.mdf"
    case REQD_STATE_DOWN:
#line 114 "mibslots.mdf"
    case REQD_STATE_UP:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * SlotStateProfile:
     *
     * A profile to store the current state of a slot card. This data may be
     * queried and/or set from SNMP or the command line interface. This profile
     * is not persistent, it is NOT stored in NVRAM. Modules wishing to monitor
     * the state of a device should register for profile updates for this type
     * of profile.
     *
     *  slotAddr The physical address of the slot whose state is stored in this
     *                                  profile.
     *
     *  currentState The current operational state of the slot.
     *
     *  reqdState The required operational state of the slot. Changing this
     *                                  value initiates a state change. The
     *                                  change is complete when the current
     *                                  state changes to match the reqd-state.
     *                                  This value is initialized from the
     *                                  administrative state of the slot at
     *                                  system startup.
     */
typedef struct slotStateProfile {
#line 156 "mibslots.mdf"
    PhysicalAddress                     slotAddr;
#line 162 "mibslots.mdf"
    OperState                           currentState;
#line 167 "mibslots.mdf"
    ReqdState                           reqdState;
}
#if ( USERIF & CLI )
__PACK__
#endif
SlotStateProfile;
#line 202 "mibslots.mdf"

#endif /* MIBSLOTS_H */

