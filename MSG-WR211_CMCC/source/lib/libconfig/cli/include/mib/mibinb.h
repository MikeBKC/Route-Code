    /*
     * Notice: file generated by MIBMAKE from mibinb.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibinb.mdf
     */
#line 3 "mibinb.mdf"
/*
 * $Id: mibinb.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1996 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 32 "mibinb.mdf"

#if ! defined( MIBINB_H )
#define MIBINB_H

#include "mibgen.h"
#include "mibglob.h"

    /*
     * How to build the factory instance of this profile.
     */
extern ConstPtr
mibFactoryBridgeOptions( MibProfileType	mibType,
			 Uint32		info );

    /*
     * Our parameter table is made external as the profile is used
     * within other profiles.
     */
extern const MibFieldComplexParams	bridgeOptionsParams;


    /*
     * IpxSpoofMode:
     *
     * IPX Client Server Spoofing Mode:
     *
     *  IPX_SPOOF_NONE No spoofing.
     *
     *  IPX_SPOOF_CLIENT Client side spoofing: Outbound RIP/SAP broadcasts are
     *                                  dropped.
     *
     *  IPX_SPOOF_SERVER Server side spoofing: connection watchdog spoofing,
     *                                  outbound RIP/SAP broadcaast and
     *                                  queries.
     */

#if ( MDF_IPX_SPOOF == FYES )

typedef enum IpxSpoofMode {
#line 70 "mibinb.mdf"
    IPX_SPOOF_NONE = 0,
#line 73 "mibinb.mdf"
    IPX_SPOOF_CLIENT,
#line 76 "mibinb.mdf"
    IPX_SPOOF_SERVER
} IpxSpoofMode;

#endif /* ( MDF_IPX_SPOOF == FYES ) */

#if ( MDF_IPX_SPOOF == FYES )



static __inline__ Bool
validIpxSpoofMode (int x)
{
    switch (x) {
#line 70 "mibinb.mdf"
    case IPX_SPOOF_NONE:
#line 73 "mibinb.mdf"
    case IPX_SPOOF_CLIENT:
#line 76 "mibinb.mdf"
    case IPX_SPOOF_SERVER:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( MDF_IPX_SPOOF == FYES ) */

    /*
     * BridgeType:
     *
     * The types of bridging we support on a P25.
     *
     *  BRIDGE_TRANSPARENT Normal transparent bridge.
     *
     *  BRIDGE_IPX_CLIENT Client side IPX spoofing.
     *
     *  BRIDGE_NONE No bridging, routing only. Requires IP or IPX routing to be
     *                                  enabled.
     */

#if ( PLATFORM & P25 )

typedef enum BridgeType {
#line 105 "mibinb.mdf"
    BRIDGE_TRANSPARENT,
#line 108 "mibinb.mdf"
    BRIDGE_IPX_CLIENT,
#line 111 "mibinb.mdf"
    BRIDGE_NONE
} BridgeType;

#endif /* ( PLATFORM & P25 ) */

#if ( PLATFORM & P25 )



static __inline__ Bool
validBridgeType (int x)
{
    switch (x) {
#line 105 "mibinb.mdf"
    case BRIDGE_TRANSPARENT:
#line 108 "mibinb.mdf"
    case BRIDGE_IPX_CLIENT:
#line 111 "mibinb.mdf"
    case BRIDGE_NONE:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( PLATFORM & P25 ) */

    /*
     * BridgeOptions:
     *
     * IP protocol configuration options.
     *
     *  bridgingGroup Select the bridging group for this connection. Group 0
     *                                  disables bridging. All packets not
     *                                  routed will be bridged to interfaces
     *                                  belonging to the same group.
     *
     *  fill1 fill to next 16-bit boundary.
     *
     *  pppBridgeNcp Enable/disable bridging on this interface. Will bridge all
     *                                  protocols not routed when enabled.
     *
     *  dialBroadcast Enable/disable outdial when broadcast frames are
     *                                  received.
     *
     *  ipxSpoofing Selects the IPX spoofing mode when bridging.
     *
     *  ipxNetWareTimeOut IPX NetWare connection timeout value.
     *
     *  fill2 filler to get to 32 bit boundary
     *
     *  bridgeType For the P25 user interface.
     */
typedef struct st_bridgeOptions {
#line 138 "mibinb.mdf"
#if ( PLATFORM & TNT )
    Uint16                              bridgingGroup;
#endif /* ( PLATFORM & TNT ) */
#line 146 "mibinb.mdf"
#if ( ! ( PLATFORM & TNT ))
    char                                fill1[ 2 ];
#endif /* ( ! ( PLATFORM & TNT )) */
#line 153 "mibinb.mdf"
    Boolean                             pppBridgeNcp;
#line 160 "mibinb.mdf"
    Boolean                             dialBroadcast;
#line 165 "mibinb.mdf"
#if ( MDF_IPX_SPOOF == FYES )
    IpxSpoofMode                        ipxSpoofing;
#endif /* ( MDF_IPX_SPOOF == FYES ) */
#line 171 "mibinb.mdf"
#if ( MDF_IPX_SPOOF == FYES )
    Uint16                              ipxNetWareTimeOut;
#endif /* ( MDF_IPX_SPOOF == FYES ) */
#line 177 "mibinb.mdf"
#if ( MDF_IPX_SPOOF == FYES )
    Uint16                              fill2;
#endif /* ( MDF_IPX_SPOOF == FYES ) */
#line 184 "mibinb.mdf"
#if ( PLATFORM & P25 )
    BridgeType                          bridgeType;
#endif /* ( PLATFORM & P25 ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
BridgeOptions;
#line 268 "mibinb.mdf"

#endif /* MIBINB_H */

