    /*
     * Notice: file generated by MIBMAKE from mibslott.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibslott.mdf
     */
#line 3 "mibslott.mdf"
/*
 *	$Id: mibslott.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *	Copyright (c) 1995 UTT Technologies, Inc.
 *	All rights reserved.
 *	Use of copyright notice does not imply publication.
 *
 *
 *			CONFIDENTIAL INFORMATION
 *			------------------------
 *	This Document contains Confidential Information or Trade Secrets,
 *	or both, which are the property of UTT Technologies, Inc.
 *	This document may not be copied, reproduced, reduced to any
 *	electronic medium or machine readable form or otherwise duplicated
 *	and the information herein may not be used, disseminated or
 *	otherwise disclosed, except with the prior written consent of
 *	 UTT Technologies, Inc.
 */

    /*
     * Profile contains TNT slot state info.  This is a non-persistant
     * profile managed by the tnt slot manager.
     */
#line 29 "mibslott.mdf"

#if ! defined( MIBSLOTT_H )
#define MIBSLOTT_H

    /*
     * The name of the SNMP State profile is stored in this global
     * data variable.
     */
extern const char* const		mibProfSlotType;

extern const MibFieldEnumParams		slotTypeParams;

    /*
     * The field number used to index this profile
     */
#define MIB_PROF_SLOT_TYPE_INDEX	1


    /*
     * TntSlotType:
     *
     * The type of slot cards known to the TNT system. This is the value
     * processed by the shelf controller software and may differ from the
     * hardware value encoded on the slot card. Translation from the hardware
     * value to this value is performed by the slot manager.
     *
     *  SLOT_TYPE_NONE No slot card present in the addressed slot.
     *
     *  SLOT_TYPE_UNKNOWN Current software does not recognize the card in the
     *                                  addressed slot.
     *
     *  SLOT_TYPE_SHELF TNT Shelf controller of any flavor (shelf and/or shelf
     *                                  router). Only valid for the pseudo
     *                                  'controller' slot (slot 17).
     *
     *  SLOT_TYPE_ROUTER Stand alone router card.
     *
     *  SLOT_TYPE_8_T1 8 line channelized T1 slot card.
     *
     *  SLOT_TYPE_8_E1 8 line channelized E1 slot card.
     *
     *  SLOT_TYPE_48_MODEM 48 digital modem slot card.
     *
     *  SLOT_TYPE_192_HDLC HDLC card.
     *
     *  SLOT_TYPE_4_ETHER 4 interface ethernet card.
     *
     *  SLOT_TYPE_4_SWAN 4 interface serial WAN card.
     *
     *  SLOT_TYPE_HSSI Single interface High Speed Serial card.
     *
     *  SLOT_TYPE_10_UNCHAN_T1 10 interface un-channelized T1 card.
     *
     *  SLOT_TYPE_36_ANLG_MODEM 36 analog modem card -- obsoleted.
     *
     *  SLOT_TYPE_T3 Single interface channelized DS3.
     *
     *  SLOT_TYPE_48_MODEM_56K 48 digital 56k modem slot card.
     *
     *  SLOT_TYPE_FORWARD TNT Shelf controller's pseudo slot for on-board 100
     *                                  Base-T. Only valid for the pseudo
     *                                  'slot-forward' slot (slot 18).
     *
     *  SLOT_TYPE_SDSL sdsl card.
     *
     *  SLOT_TYPE_CAP_ADSL cap adsl card.
     *
     *  SLOT_TYPE_DMT_ADSL dmt adsl card.
     *
     *  SLOT_TYPE_MODEM_CTRLR A '56k' modem controller with no slave cards.
     *
     *  SLOT_TYPE_32_IDSL 32 ISDN DSL card.
     *
     *  SLOT_TYPE_10_UNCHAN_E1 10 interface un-channelized E1 card.
     *
     *  SLOT_TYPE_36_ANLG_MODEM2 36 analog modem card.
     *
     *  SLOT_TYPE_CSMX_MODEM csm modem card
     *
     *  SLOT_TYPE_UDS3 Single interface unchannelized DS3 card.
     *
     *  SLOT_TYPE_DS3_ATM Single interface DS3/ATM card.
     *
     *  SLOT_TYPE_4_ETHER2 4 Port ethernet2 card.
     *
     *  SLOT_TYPE_192_HDLC2 HDLC2 card.
     *
     *  SLOT_TYPE_SDSL70_DATA 24 interface sdsl data card.
     *
     *  SLOT_TYPE_MADD multiple application dsp card.
     *
     *  SLOT_TYPE_SDSL70_VOICE 24 interface sdsl voice card.
     *
     *  SLOT_TYPE_COUNT Number of types of slot cards known.
     */
typedef enum TntSlotType {
#line 73 "mibslott.mdf"
    SLOT_TYPE_NONE = 0,
#line 76 "mibslott.mdf"
    SLOT_TYPE_UNKNOWN = 1,
#line 80 "mibslott.mdf"
    SLOT_TYPE_SHELF = 2,
#line 84 "mibslott.mdf"
    SLOT_TYPE_ROUTER = 3,
#line 87 "mibslott.mdf"
    SLOT_TYPE_8_T1 = 4,
#line 90 "mibslott.mdf"
    SLOT_TYPE_8_E1 = 5,
#line 93 "mibslott.mdf"
    SLOT_TYPE_48_MODEM = 6,
#line 96 "mibslott.mdf"
    SLOT_TYPE_192_HDLC = 7,
#line 99 "mibslott.mdf"
    SLOT_TYPE_4_ETHER = 8,
#line 102 "mibslott.mdf"
    SLOT_TYPE_4_SWAN = 9,
#line 105 "mibslott.mdf"
    SLOT_TYPE_HSSI = 10,
#line 108 "mibslott.mdf"
    SLOT_TYPE_10_UNCHAN_T1 = 11,
#line 111 "mibslott.mdf"
    SLOT_TYPE_36_ANLG_MODEM = 12,
#line 114 "mibslott.mdf"
    SLOT_TYPE_T3 = 13,
#line 117 "mibslott.mdf"
    SLOT_TYPE_48_MODEM_56K = 14,
#line 120 "mibslott.mdf"
    SLOT_TYPE_FORWARD = 15,
#line 124 "mibslott.mdf"
    SLOT_TYPE_SDSL = 16,
#line 127 "mibslott.mdf"
    SLOT_TYPE_CAP_ADSL = 17,
#line 130 "mibslott.mdf"
    SLOT_TYPE_DMT_ADSL = 18,
#line 133 "mibslott.mdf"
    SLOT_TYPE_MODEM_CTRLR = 19,
#line 136 "mibslott.mdf"
    SLOT_TYPE_32_IDSL = 20,
#line 139 "mibslott.mdf"
    SLOT_TYPE_10_UNCHAN_E1 = 21,
#line 142 "mibslott.mdf"
    SLOT_TYPE_36_ANLG_MODEM2 = 22,
#line 145 "mibslott.mdf"
    SLOT_TYPE_CSMX_MODEM = 23,
#line 148 "mibslott.mdf"
    SLOT_TYPE_UDS3 = 24,
#line 151 "mibslott.mdf"
    SLOT_TYPE_DS3_ATM = 25,
#line 154 "mibslott.mdf"
    SLOT_TYPE_4_ETHER2 = 26,
#line 157 "mibslott.mdf"
    SLOT_TYPE_192_HDLC2 = 27,
#line 160 "mibslott.mdf"
    SLOT_TYPE_SDSL70_DATA = 28,
#line 163 "mibslott.mdf"
    SLOT_TYPE_MADD = 29,
#line 166 "mibslott.mdf"
    SLOT_TYPE_SDSL70_VOICE = 30,
#line 169 "mibslott.mdf"
    SLOT_TYPE_COUNT
} TntSlotType;


static __inline__ Bool
validTntSlotType (int x)
{
    switch (x) {
#line 73 "mibslott.mdf"
    case SLOT_TYPE_NONE:
#line 76 "mibslott.mdf"
    case SLOT_TYPE_UNKNOWN:
#line 80 "mibslott.mdf"
    case SLOT_TYPE_SHELF:
#line 84 "mibslott.mdf"
    case SLOT_TYPE_ROUTER:
#line 87 "mibslott.mdf"
    case SLOT_TYPE_8_T1:
#line 90 "mibslott.mdf"
    case SLOT_TYPE_8_E1:
#line 93 "mibslott.mdf"
    case SLOT_TYPE_48_MODEM:
#line 96 "mibslott.mdf"
    case SLOT_TYPE_192_HDLC:
#line 99 "mibslott.mdf"
    case SLOT_TYPE_4_ETHER:
#line 102 "mibslott.mdf"
    case SLOT_TYPE_4_SWAN:
#line 105 "mibslott.mdf"
    case SLOT_TYPE_HSSI:
#line 108 "mibslott.mdf"
    case SLOT_TYPE_10_UNCHAN_T1:
#line 111 "mibslott.mdf"
    case SLOT_TYPE_36_ANLG_MODEM:
#line 114 "mibslott.mdf"
    case SLOT_TYPE_T3:
#line 117 "mibslott.mdf"
    case SLOT_TYPE_48_MODEM_56K:
#line 120 "mibslott.mdf"
    case SLOT_TYPE_FORWARD:
#line 124 "mibslott.mdf"
    case SLOT_TYPE_SDSL:
#line 127 "mibslott.mdf"
    case SLOT_TYPE_CAP_ADSL:
#line 130 "mibslott.mdf"
    case SLOT_TYPE_DMT_ADSL:
#line 133 "mibslott.mdf"
    case SLOT_TYPE_MODEM_CTRLR:
#line 136 "mibslott.mdf"
    case SLOT_TYPE_32_IDSL:
#line 139 "mibslott.mdf"
    case SLOT_TYPE_10_UNCHAN_E1:
#line 142 "mibslott.mdf"
    case SLOT_TYPE_36_ANLG_MODEM2:
#line 145 "mibslott.mdf"
    case SLOT_TYPE_CSMX_MODEM:
#line 148 "mibslott.mdf"
    case SLOT_TYPE_UDS3:
#line 151 "mibslott.mdf"
    case SLOT_TYPE_DS3_ATM:
#line 154 "mibslott.mdf"
    case SLOT_TYPE_4_ETHER2:
#line 157 "mibslott.mdf"
    case SLOT_TYPE_192_HDLC2:
#line 160 "mibslott.mdf"
    case SLOT_TYPE_SDSL70_DATA:
#line 163 "mibslott.mdf"
    case SLOT_TYPE_MADD:
#line 166 "mibslott.mdf"
    case SLOT_TYPE_SDSL70_VOICE:
#line 169 "mibslott.mdf"
    case SLOT_TYPE_COUNT:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * SlotTypeProfile:
     *
     * A profile to store the type of slot card located in a given shelf/slot.
     * This is a persistant profile, used to detect when the type of slot card
     * changes.
     *
     *  slotAddr The physical address of the slot whose type is stored in this
     *                                  profile.
     *
     *  slotType The type of slot card currently present in the slot.
     */
typedef struct slotTypeProfile {
#line 219 "mibslott.mdf"
    PhysicalAddress                     slotAddr;
#line 225 "mibslott.mdf"
    TntSlotType                         slotType;
}
#if ( USERIF & CLI )
__PACK__
#endif
SlotTypeProfile;
#line 256 "mibslott.mdf"

#endif /* MIBSLOTT_H */

