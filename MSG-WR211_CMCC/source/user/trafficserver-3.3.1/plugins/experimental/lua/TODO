- Hook registration consistency

  Per-object hooks register a hook table, but global hooks register
  an individual function. We should make the register function
  accept both calling conventions.

- Transaction object parity

  The transaction object that remap callbacks get is richer than
  the one that hook callbacks get. They should both use the same
  object and get the same API.

- Richer TS API support

  Flesh out API mappings. Humbedooh has a script that can generate
  a lot of Lua binding. We should use that to make as much API as
  we reasonably can.

- HTTP client support

  Wrap TSFetchURL (or its successor), such that Lua can fetch single
  resources or multiple resources in parallel. For single resources,
  use yield to make the call look synchronous; for multiple resources
  consider a callback table.

- HTTP server support

  Reference stats_over_http to enabLe us server responses directly
  from a Lua plugin. This would be useful for serving status, log
  builder pages, admin tools, etc.

- HTTP Alternate selection support

  Enable support for HTTP_SELECT_ALT_HOOK. This probably just
  requires plumbing an object for the TSHttpAltInfo edata argument.

- Documentation

  Document the Lua API in LuaDoc.

- More examples

  Add more Lua plugin examples. Take some of the header manipulation
  C plugins and rewrite them in Lua. More examples will help us
  figure out which Lua API is missing.

- Transformation plugins

  We don't support transforms yet. This probably warrants some
  special purpose API rather than just using the existing hook
  registration API.
