    /*
     * Notice: file generated by MIBMAKE from mibatmp.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibatmp.mdf
     */
#line 3 "mibatmp.mdf"
/*
 * 	$Id: mibatmp.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 25 "mibatmp.mdf"

#if (( ! defined( MIBATMP_H ) ) && ( MDF_ATMP == FYES ))
#define MIBATMP_H

    /*
     * This file contains the internal representation of the atmp profile
     * (MIB_PROF_ATMP).
     */
extern const char* const		mibProfAtmp;

    /*
     * Our parameter tables are made external as the profile is used
     * within other profiles.
     */
# if ( USERIF & CLI )
extern const MibFieldEnumParams		tunnelAgentModeParams;
extern const MibFieldEnumParams		tunnelHomeAgentTypeParams;
# endif /* ( USERIF & CLI ) */


    /*
     * How to make a default version of an ATMP profile.
     */
extern ConstPtr
mibFactoryAtmpProfile( MibProfileType	mibType,
			ConstPtr	mibIndex,
			Int		mibIndexLen );



    /*
     * TunnelAgentMode:
     *
     * Tunnel Modes:
     *
     *  TUNNEL_DISABLED Disable tunnel support.
     *
     *  TUNNEL_HOME_AGENT This box is configured to be a home agent.
     *
     *  TUNNEL_FOREIGN_AGENT This box is configured to be a foreign agent.
     *
     *  TUNNEL_HOME_AND_FOREIGN_AGENT This box is configured to be both a home
     *                                  agent and a foreign agent on a tunnel
     *                                  by tunnel basis.
     */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))

typedef enum TunnelAgentMode {
#line 83 "mibatmp.mdf"
    TUNNEL_DISABLED = 0,
#line 86 "mibatmp.mdf"
    TUNNEL_HOME_AGENT,
#line 89 "mibatmp.mdf"
    TUNNEL_FOREIGN_AGENT,
#line 92 "mibatmp.mdf"
    TUNNEL_HOME_AND_FOREIGN_AGENT
} TunnelAgentMode;

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))



static __inline__ Bool
validTunnelAgentMode (int x)
{
    switch (x) {
#line 83 "mibatmp.mdf"
    case TUNNEL_DISABLED:
#line 86 "mibatmp.mdf"
    case TUNNEL_HOME_AGENT:
#line 89 "mibatmp.mdf"
    case TUNNEL_FOREIGN_AGENT:
#line 92 "mibatmp.mdf"
    case TUNNEL_HOME_AND_FOREIGN_AGENT:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

    /*
     * TunnelHomeAgentType:
     *
     * The Tunnel Home Agent Type. This is only relevant if the agent is
     * configured to be a Home Agent.
     *
     *  TUNNEL_HOME_AGENT_ROUTER This Home Agent routes tunneled data to other
     *                                  networks.
     *
     *  TUNNEL_HOME_AGENT_GATEWAY This Home Agent delivers tunneled data to
     *                                  other networks without routing
     *                                  anything.
     */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))

typedef enum TunnelHomeAgentType {
#line 122 "mibatmp.mdf"
    TUNNEL_HOME_AGENT_ROUTER = 0,
#line 125 "mibatmp.mdf"
    TUNNEL_HOME_AGENT_GATEWAY
} TunnelHomeAgentType;

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))



static __inline__ Bool
validTunnelHomeAgentType (int x)
{
    switch (x) {
#line 122 "mibatmp.mdf"
    case TUNNEL_HOME_AGENT_ROUTER:
#line 125 "mibatmp.mdf"
    case TUNNEL_HOME_AGENT_GATEWAY:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

    /*
     * AtmpAgentMode:
     *
     * ATMP Modes:
     *
     *  ATMP_DISABLED Don't support ATMP protocol.
     *
     *  ATMP_HOME_AGENT This box is configured to be a home agent.
     *
     *  ATMP_FOREIGN_AGENT This box is configured to be a foreign agent.
     *
     *  ATMP_HOME_AND_FOREIGN_AGENT This box is configured to be both a home
     *                                  agent and a foreign agent on a tunnel
     *                                  by tunnel basis.
     */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))

typedef enum AtmpAgentMode {
#line 154 "mibatmp.mdf"
    ATMP_DISABLED = 0,
#line 157 "mibatmp.mdf"
    ATMP_HOME_AGENT,
#line 160 "mibatmp.mdf"
    ATMP_FOREIGN_AGENT,
#line 163 "mibatmp.mdf"
    ATMP_HOME_AND_FOREIGN_AGENT
} AtmpAgentMode;

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))



static __inline__ Bool
validAtmpAgentMode (int x)
{
    switch (x) {
#line 154 "mibatmp.mdf"
    case ATMP_DISABLED:
#line 157 "mibatmp.mdf"
    case ATMP_HOME_AGENT:
#line 160 "mibatmp.mdf"
    case ATMP_FOREIGN_AGENT:
#line 163 "mibatmp.mdf"
    case ATMP_HOME_AND_FOREIGN_AGENT:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

    /*
     * AtmpHomeAgentType:
     *
     * The ATMP Home Agent Type. This is only relevant if the agent is
     * configured to be a Home Agent.
     *
     *  ATMP_HOME_AGENT_ROUTER This Home agent is a router.
     *
     *  ATMP_HOME_AGENT_GATEWAY This Home Agent delivers tunneled data to other
     *                                  networks without routing anything.
     */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))

typedef enum AtmpHomeAgentType {
#line 176 "mibatmp.mdf"
    ATMP_HOME_AGENT_ROUTER = 0,
#line 179 "mibatmp.mdf"
    ATMP_HOME_AGENT_GATEWAY
} AtmpHomeAgentType;

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

#if (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES ))



static __inline__ Bool
validAtmpHomeAgentType (int x)
{
    switch (x) {
#line 176 "mibatmp.mdf"
    case ATMP_HOME_AGENT_ROUTER:
#line 179 "mibatmp.mdf"
    case ATMP_HOME_AGENT_GATEWAY:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* (( MDF_ETHERNET == FYES ) && ( MDF_ATMP == FYES )) */

    /*
     * AtmpProfile:
     *
     * The ATMP profile.
     *
     *  atmpAgentMode The valid modes for this ATMP agent.
     *
     *  atmpAgentType The type of Home Agent.
     *
     *  atmpUdpPort UDP port number to use locally.
     *
     *  atmpHomeAgentPassword The password required to access this home agent.
     *
     *  atmpSapReply Whether an ATMP Home Agent should reply to IPX SAP Nearest
     *                                  Server queries from the Mobile Client.
     *
     *  atmpRetryTimeout The number of seconds between retries to establish a
     *                                  tunnel.
     *
     *  atmpMaxRetries The maximum number of failed attempts to establish a
     *                                  tunnel before switching to the
     *                                  alternate home agent.
     *
     *  atmpIdleLimit The number of minutes of no activity before an ATMP Home
     *                                  Agent will drop a tunnel. The value 0
     *                                  disables the idle timer.
     *
     *  greMtu The maximum IP packet size that can be transmitted to a remote
     *                                  agent without performing
     *                                  pre-fragmentation. The value 0 disables
     *                                  this feature.
     *
     *  forceFragmentation When set to NO, an ICMP message will be sent if a
     *                                  frame needs fragmentation and the DF
     *                                  bit is set. This is the standard
     *                                  behavior. When set to YES, it forces
     *                                  pre-fragmentation of large IP frames
     *                                  before they are sent to the remote
     *                                  agent, even if the frame has the DF bit
     *                                  set. This behavior is not standard and
     *                                  prevents MTU discovery mechanisms.
     *
     *  atmpSnmpTrapEnabled When set to No, do not send ATMP SNMP traps. If
     *                                  Yes, send traps. The default is No.
     */
typedef struct mibProfAtmp {
#line 211 "mibatmp.mdf"
    TunnelAgentMode                     atmpAgentMode;
#line 215 "mibatmp.mdf"
    TunnelHomeAgentType                 atmpAgentType;
#line 219 "mibatmp.mdf"
    Word                                atmpUdpPort;
#line 223 "mibatmp.mdf"
    char                                atmpHomeAgentPassword[ MAX_PASSWORD_LENGTH + 1 ];
#line 227 "mibatmp.mdf"
    Boolean                             atmpSapReply;
#line 232 "mibatmp.mdf"
    Uint16                              atmpRetryTimeout;
#line 236 "mibatmp.mdf"
    Uint16                              atmpMaxRetries;
#line 241 "mibatmp.mdf"
    Uint16                              atmpIdleLimit;
#line 246 "mibatmp.mdf"
    Uint16                              greMtu;
#line 251 "mibatmp.mdf"
    Boolean                             forceFragmentation;
#line 259 "mibatmp.mdf"
#if ( MDF_SNMP == FYES )
    Bool                                atmpSnmpTrapEnabled;
#endif /* ( MDF_SNMP == FYES ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
AtmpProfile;
#line 337 "mibatmp.mdf"

#endif /* (( ! defined( MIBATMP_H ) ) && ( MDF_ATMP == FYES )) */

