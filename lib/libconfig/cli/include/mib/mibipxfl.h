    /*
     * Notice: file generated by MIBMAKE from mibipxfl.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibipxfl.mdf
     */
#line 2 "mibipxfl.mdf"
/*
 * $Id: mibipxfl.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 24 "mibipxfl.mdf"

#if ! defined( MIBIPXFL_H )
# define MIBIPXFL_H

# include "mibipxrt.h"


    /* This file contains the internal representation of the IPX SAP Filter
     * profile (MIB_PROF_IPX_FL). The name of this profile is stored in the
     * global variable mibProfIpxfl.
     */

extern const char* const		mibProfIpxfl;

# if ( MDF_IPX_ROUTE == FYES )

    /*
     * IPX SAP Filters are given names, only used to distinguish filters at
     * the user interface.  The size of the name is:
     */
#  define MAX_IPXSAP_FILTER_NAME_LENGTH	15

    /*
     * A maximum number of IPX SAP filters per filter profile are
     * defined for each platform.
     */

#  if ( PLATFORM & ( MPORT | TNT ) )
#   define MAX_IPXSAP_FILTER_ENTRIES	8
#  elif PLATFORM & ( P50 | PDSL | P25 )
#   define MAX_IPXSAP_FILTER_ENTRIES	2
#  elif ( PLATFORM & ( M200 ))
#   define MAX_IPXSAP_FILTER_ENTRIES	4
#  else
#   error Unknown PLATFORM
#  endif

# endif	/* MDF_IPX_ROUTE */


    /*
     * ipxsapFilterType:
     *
     * Each filter can be used to Exclude/Include SAP information. These filter
     * types are defined here.
     *
     *  FILTER_EXCLUDE Exclude matching SAP information from SAP table.
     *
     *  FILTER_INCLUDE Include matching SAP information from SAP table.
     */

#if ( MDF_IPX_ROUTE == FYES )

typedef enum ipxsapFilterType {
#line 92 "mibipxfl.mdf"
    FILTER_EXCLUDE,
#line 95 "mibipxfl.mdf"
    FILTER_INCLUDE
} ipxsapFilterType;

#endif /* ( MDF_IPX_ROUTE == FYES ) */

#if ( MDF_IPX_ROUTE == FYES )



static __inline__ Bool
validipxsapFilterType (int x)
{
    switch (x) {
#line 92 "mibipxfl.mdf"
    case FILTER_EXCLUDE:
#line 95 "mibipxfl.mdf"
    case FILTER_INCLUDE:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( MDF_IPX_ROUTE == FYES ) */

    /*
     * ipxsapFilterEntry:
     *
     * An ipxsapFilterEntry defines a particular filter. The filter will be
     * part of a table of filters applied to either the input or the output SAP
     * data from an interface.
     *
     *  validFilter When TRUE, this filter entry has been defined and properly
     *                                  initialized. When FALSE, this filter
     *                                  should be skipped when Filter Table is
     *                                  being applied to in/out SAP data.
     *
     *  typeFilter Filter may be used to EXCLUDE or, INCLUDE matching SAP
     *                                  fields.
     *
     *  serverType Defines the service number to be filtered in/out from SAP
     *                                  data.
     *
     *  serverName Defined the server name to be filtered, Wildcard (* and ?)
     *                                  characters are accepted for partial
     *                                  name matching.
     */

#if ( MDF_IPX_ROUTE == FYES )

typedef struct ipxsapfilterEntry {
#line 125 "mibipxfl.mdf"
    Boolean                             validFilter;
#line 131 "mibipxfl.mdf"
    Boolean                             typeFilter;
#line 135 "mibipxfl.mdf"
    Word                                serverType;
#line 139 "mibipxfl.mdf"
    char                                serverName[ MAX_IPX_ROUTE_NAME_LENGTH ];
}
#if ( USERIF & CLI )
__PACK__
#endif
ipxsapFilterEntry;

#endif /* ( MDF_IPX_ROUTE == FYES ) */

    /*
     * ipxsapFilterProfile:
     *
     * A IPX SAP Filter profile consists of the filters used to control IPX SAP
     * data in and out of an interface. This provides control of the SAP Table
     * created and SAP data sent out to other stations. Each entry is named and
     * refered to by number to assign a filter to an interface.
     *
     *  ipxsapFilterName The name of this IPX SAP Filter.
     *
     *  inputIpxSapFilters A table of filters applied to SAP packets received
     *                                  on an interface.
     *
     *  outputIpxSapFilters A table of filters applied to SAP packets sent on
     *                                  an interface.
     */

#if ( MDF_IPX_ROUTE == FYES )

typedef struct ipxsapfilterProfile {
#line 208 "mibipxfl.mdf"
    char                                ipxsapFilterName[ MAX_IPXSAP_FILTER_NAME_LENGTH + 1 ];
#line 212 "mibipxfl.mdf"
    ipxsapFilterEntry                   inputIpxSapFilters[ MAX_IPXSAP_FILTER_ENTRIES ];
#line 216 "mibipxfl.mdf"
    ipxsapFilterEntry                   outputIpxSapFilters[ MAX_IPXSAP_FILTER_ENTRIES ];
}
#if ( USERIF & CLI )
__PACK__
#endif
ipxsapFilterProfile;

#endif /* ( MDF_IPX_ROUTE == FYES ) */
#line 222 "mibipxfl.mdf"
    /*
     * The index field of an ipx sap filter profile.
     */
#  define MIB_PROF_IPX_SAPFILT_INDEX_FIELD     1

extern ConstPtr
mibFactoryIpxSapFilterProfile( MibProfileType mibType,
                         ConstPtr       mibIndex,
                         Int            mibIndexLen );

#line 258 "mibipxfl.mdf"

# endif /* MIBIPXFL_H */

