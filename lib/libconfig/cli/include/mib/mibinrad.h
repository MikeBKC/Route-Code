    /*
     * Notice: file generated by MIBMAKE from mibinrad.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibinrad.mdf
     */
#line 2 "mibinrad.mdf"
/*
 * $Id: mibinrad.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1996 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 33 "mibinrad.mdf"

#if (( ! defined( MIBINRAD_H ) ) && ( MDF_RADIUS_ACCT == FYES ))
#define MIBINRAD_H

#include "mibgen.h"
#include "mibglob.h"
#include "mibslot.h"

    /*
     * How to build the factory instance of this profile.
     */
extern ConstPtr
mibFactoryUsrRadOptions( MibProfileType	mibType,
		     	 Uint32		info );

    /*
     * Our parameter table is made external as the profile is used
     * within other profiles.
     */
extern const MibFieldComplexParams	usrRadOptionsParams;


    /*
     * UsrRadAcctType:
     *
     *
     *  USR_RAD_ACCT_NONE Use the server(s) configured globally in the
     *                                  EXTERNAL_AUTH profile.
     *
     *  USR_RAD_ACCT_RADIUS Use the server specified in this profile.
     *
     *  USR_RAD_ACCT_RADIUS_DEFAULT Send duplicate info to both global and
     *                                  locally specified servers.
     */

#if ( MDF_RADIUS_ACCT == FYES )

typedef enum UsrRadAcctType {
#line 72 "mibinrad.mdf"
    USR_RAD_ACCT_NONE,
#line 75 "mibinrad.mdf"
    USR_RAD_ACCT_RADIUS,
#line 78 "mibinrad.mdf"
    USR_RAD_ACCT_RADIUS_DEFAULT
} UsrRadAcctType;

#endif /* ( MDF_RADIUS_ACCT == FYES ) */

#if ( MDF_RADIUS_ACCT == FYES )



static __inline__ Bool
validUsrRadAcctType (int x)
{
    switch (x) {
#line 72 "mibinrad.mdf"
    case USR_RAD_ACCT_NONE:
#line 75 "mibinrad.mdf"
    case USR_RAD_ACCT_RADIUS:
#line 78 "mibinrad.mdf"
    case USR_RAD_ACCT_RADIUS_DEFAULT:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( MDF_RADIUS_ACCT == FYES ) */

    /*
     * UsrRadOptions:
     *
     * Radius Accounting Server configuration options.
     *
     *  usrRadAcctType Specify where accounting information for this connection
     *                                  will be sent, either the global server
     *                                  list, a per-user override, or both.
     *
     *  usrRadAcctHost The IP address of the RADIUS accounting host.
     *
     *  usrRadAcctPort The UDP port of the RADIUS Accounting server.
     *
     *  usrRadAcctKey The RADIUS accounting key.
     *
     *  usrRadAcctTimeout Number of seconds to wait for a response to
     *                                  accounting request.
     *
     *  usrRadAcctIDBase The Base to use in reporting the Account ID
     */

#if ( MDF_RADIUS_ACCT == FYES )

typedef struct usrRadOptions {
#line 99 "mibinrad.mdf"
    UsrRadAcctType                      usrRadAcctType;
#line 104 "mibinrad.mdf"
    IpAddress                           usrRadAcctHost;
#line 108 "mibinrad.mdf"
    Uint16                              usrRadAcctPort;
#line 112 "mibinrad.mdf"
    char                                usrRadAcctKey[ MAX_PASSWORD_LENGTH + 2 ];
#line 116 "mibinrad.mdf"
    Uint16                              usrRadAcctTimeout;
#line 120 "mibinrad.mdf"
    AcctBaseType                        usrRadAcctIDBase;
}
#if ( USERIF & CLI )
__PACK__
#endif
UsrRadOptions;

#endif /* ( MDF_RADIUS_ACCT == FYES ) */
#line 184 "mibinrad.mdf"

#endif /* (( ! defined( MIBINRAD_H ) ) && ( MDF_RADIUS_ACCT == FYES ) */

