    /*
     * Notice: file generated by MIBMAKE from mibaddr.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibaddr.mdf
     */
#line 3 "mibaddr.mdf"
/*
 * $Id: mibaddr.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 25 "mibaddr.mdf"

#if ! defined( MIBADDR_H )
# define MIBADDR_H

# include "mibgen.h"

    /* This file contains the internal representation of profiles and enums
     *  used by others profiles.
     */

#line 47 "mibaddr.mdf"

extern const MibFieldEnumParams		tntShelfNumberParams;

extern const MibFieldEnumParams		tntSlotNumberParams;

extern const MibFieldComplexParams	physicalAddressParams;

extern const MibFieldComplexParams	logicalAddressParams;


    /*
     * TntShelfNumber:
     *
     * The number of a shelf within a system. Shelves are numbered from 1 to 9,
     * the number of a shelf determined by a rotary switch on the the front
     * edge of the shelf-controller card.
     *
     *  TNT_SHELF_ANY Special value used to specify 'any' shelf.
     *
     *  TNT_SHELF_FIRST Shelf 1.
     *
     *  TNT_SHELF_2 Shelf 2.
     *
     *  TNT_SHELF_3 Shelf 3.
     *
     *  TNT_SHELF_4 Shelf 4.
     *
     *  TNT_SHELF_5 Shelf 5.
     *
     *  TNT_SHELF_6 Shelf 6.
     *
     *  TNT_SHELF_7 Shelf 7.
     *
     *  TNT_SHELF_8 Shelf 8.
     *
     *  TNT_SHELF_LAST Shelf 9.
     *
     *  TNT_SHELF_LAST Shelf 2.
     *
     *  TNT_SHELF_SIGNALING Signaling pseudo shelf.
     *
     *  TNT_SHELF_RESERVED Reserve for future use.
     *
     *  TNT_SHELF_BROADCAST Broadcast pseudo shelf.
     *
     *  TNT_SHELF_MAX Max Shelf Definition
     */
typedef enum TntShelfNumber {
#line 64 "mibaddr.mdf"
    TNT_SHELF_ANY = 0,
#line 67 "mibaddr.mdf"
    TNT_SHELF_FIRST,
#line 70 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_2,
#endif /* ( !( Q_TKO ) ) */
#line 74 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_3,
#endif /* ( !( Q_TKO ) ) */
#line 78 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_4,
#endif /* ( !( Q_TKO ) ) */
#line 82 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_5,
#endif /* ( !( Q_TKO ) ) */
#line 86 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_6,
#endif /* ( !( Q_TKO ) ) */
#line 90 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_7,
#endif /* ( !( Q_TKO ) ) */
#line 94 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_8,
#endif /* ( !( Q_TKO ) ) */
#line 98 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    TNT_SHELF_LAST,
#endif /* ( !( Q_TKO ) ) */
#line 102 "mibaddr.mdf"
#if ( ( Q_TKO ) )
    TNT_SHELF_LAST,
#endif /* ( ( Q_TKO ) ) */
#line 106 "mibaddr.mdf"
    TNT_SHELF_SIGNALING,
#line 110 "mibaddr.mdf"
    TNT_SHELF_RESERVED,
#line 114 "mibaddr.mdf"
    TNT_SHELF_BROADCAST = 0xF,
#line 118 "mibaddr.mdf"
    TNT_SHELF_MAX
} TntShelfNumber;


static __inline__ Bool
validTntShelfNumber (int x)
{
    switch (x) {
#line 64 "mibaddr.mdf"
    case TNT_SHELF_ANY:
#line 67 "mibaddr.mdf"
    case TNT_SHELF_FIRST:
#line 70 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_2:
#endif /* ( !( Q_TKO ) ) */
#line 74 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_3:
#endif /* ( !( Q_TKO ) ) */
#line 78 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_4:
#endif /* ( !( Q_TKO ) ) */
#line 82 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_5:
#endif /* ( !( Q_TKO ) ) */
#line 86 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_6:
#endif /* ( !( Q_TKO ) ) */
#line 90 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_7:
#endif /* ( !( Q_TKO ) ) */
#line 94 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_8:
#endif /* ( !( Q_TKO ) ) */
#line 98 "mibaddr.mdf"
#if ( !( Q_TKO ) )
    case TNT_SHELF_LAST:
#endif /* ( !( Q_TKO ) ) */
#line 102 "mibaddr.mdf"
#if ( ( Q_TKO ) )
    case TNT_SHELF_LAST:
#endif /* ( ( Q_TKO ) ) */
#line 106 "mibaddr.mdf"
    case TNT_SHELF_SIGNALING:
#line 110 "mibaddr.mdf"
    case TNT_SHELF_RESERVED:
#line 114 "mibaddr.mdf"
    case TNT_SHELF_BROADCAST:
#line 118 "mibaddr.mdf"
    case TNT_SHELF_MAX:
        return TRUE;
    default:
        return FALSE;
    }
}
#line 125 "mibaddr.mdf"

    /*
     * Define the maximum number of shelves.  Most arrays that
     * need to be sized by number of shelves are sized using
     * the value TNT_SHELF_COUNT and index into the array
     * using the TNT_SHELF_INDEX macro.
     */
# define TNT_SHELF_COUNT		( TNT_SHELF_LAST - TNT_SHELF_FIRST + 1 )
# define TNT_SHELF_INDEX( s )	(( s ) - TNT_SHELF_FIRST )

    /*
     * Some arrays need to handle the "any" shelf number.  Those
     * arrays size by TNT_SHELF_COUNT_ANY and use the shelf number
     * as a direct index.
     */
# define TNT_SHELF_COUNT_ANY	( TNT_SHELF_LAST + 1 )


    /*
     * TntSlotNumber:
     *
     * The number of slot cards in a TNT system and logical names for them.
     * Slot card '0' is reserved for cases when the slot card number is a don't
     * care; it means 'any' slot. Slot number 17 is reserved for the shelf
     * controller.
     *
     *  TNT_SLOT_ANY Special value used to specify 'any' slot.
     *
     *  TNT_SLOT_FIRST Slot 1.
     *
     *  TNT_SLOT_NUMBER_2 Slot 2.
     *
     *  TNT_SLOT_NUMBER_3 Slot 3.
     *
     *  TNT_SLOT_NUMBER_4 Slot 4.
     *
     *  TNT_SLOT_NUMBER_5 Slot 5.
     *
     *  TNT_SLOT_NUMBER_6 Slot 6.
     *
     *  TNT_SLOT_NUMBER_7 Slot 7.
     *
     *  TNT_SLOT_NUMBER_8 Slot 8.
     *
     *  TNT_SLOT_NUMBER_9 Slot 9.
     *
     *  TNT_SLOT_NUMBER_10 Slot 10.
     *
     *  TNT_SLOT_NUMBER_11 Slot 11.
     *
     *  TNT_SLOT_NUMBER_12 Slot 12.
     *
     *  TNT_SLOT_NUMBER_13 Slot 13.
     *
     *  TNT_SLOT_NUMBER_14 Slot 14.
     *
     *  TNT_SLOT_NUMBER_15 Slot 15.
     *
     *  TNT_SLOT_NUMBER_16 Slot 16.
     *
     *  TNT_SLOT_NUMBER_17 Slot 17. - TKO only
     *
     *  TNT_SLOT_NUMBER_18 Slot 18. - TKO only
     *
     *  TNT_SLOT_NUMBER_19 Slot 19. - TKO only
     *
     *  TNT_SLOT_NUMBER_20 Slot 20. - TKO only
     *
     *  TNT_SLOT_NUMBER_21 Slot 21. - TKO only
     *
     *  TNT_SLOT_NUMBER_22 Slot 22. - TKO only
     *
     *  TNT_SLOT_NUMBER_23 Slot 23. - TKO only
     *
     *  TNT_SLOT_NUMBER_24 Slot 24. - TKO only
     *
     *  TNT_SLOT_NUMBER_25 Slot 25. - TKO only
     *
     *  TNT_SLOT_NUMBER_26 Slot 26. - TKO only
     *
     *  TNT_SLOT_NUMBER_27 Slot 27. - TKO only
     *
     *  TNT_SLOT_NUMBER_28 Slot 28. - TKO only
     *
     *  TNT_SLOT_NUMBER_29 Slot 29. - TKO only
     *
     *  TNT_SLOT_NUMBER_30 Slot 30. - TKO only
     *
     *  TNT_SLOT_NUMBER_31 Slot 31. - TKO only
     *
     *  TNT_SLOT_NUMBER_32 Slot 32. - TKO only
     *
     *  TNT_SLOT_NUMBER_33 Slot 33. - TKO only
     *
     *  TNT_SLOT_NUMBER_34 Slot 34. - TKO only
     *
     *  TNT_SLOT_NUMBER_35 Slot 35. - TKO only
     *
     *  TNT_SLOT_NUMBER_36 Slot 36. - TKO only
     *
     *  TNT_SLOT_NUMBER_37 Slot 37. - TKO only
     *
     *  TNT_SLOT_NUMBER_38 Slot 38. - TKO only
     *
     *  TNT_SLOT_NUMBER_39 Slot 39. - TKO only
     *
     *  TNT_SLOT_NUMBER_40 Slot 40. - TKO only
     *
     *  TNT_SLOT_SHELF1 The shelf-controller pseudo-slot.
     *
     *  TNT_SLOT_SHELF2 The 2nd shelf-controller - TKO only
     *
     *  TNT_SLOT_FORWARD The shelf-controller forward pseudo-slot. For on-board
     *                                  100BaseT etc...
     *
     *  TNT_SLOT_LOOP_CELL pseudo-slot for loopback cells
     *
     *  TNT_SLOT_BROADCAST Broadcast pseudo-slot.
     *
     *  TNT_SLOT_RESERVED Reserve for future use.
     *
     *  TNT_SLOT_MAX Max Slot Definition
     */
typedef enum TntSlotNumber {
#line 151 "mibaddr.mdf"
    TNT_SLOT_ANY = 0,
#line 154 "mibaddr.mdf"
    TNT_SLOT_FIRST,
#line 157 "mibaddr.mdf"
    TNT_SLOT_NUMBER_2,
#line 160 "mibaddr.mdf"
    TNT_SLOT_NUMBER_3,
#line 163 "mibaddr.mdf"
    TNT_SLOT_NUMBER_4,
#line 166 "mibaddr.mdf"
    TNT_SLOT_NUMBER_5,
#line 169 "mibaddr.mdf"
    TNT_SLOT_NUMBER_6,
#line 172 "mibaddr.mdf"
    TNT_SLOT_NUMBER_7,
#line 175 "mibaddr.mdf"
    TNT_SLOT_NUMBER_8,
#line 178 "mibaddr.mdf"
    TNT_SLOT_NUMBER_9,
#line 181 "mibaddr.mdf"
    TNT_SLOT_NUMBER_10,
#line 184 "mibaddr.mdf"
    TNT_SLOT_NUMBER_11,
#line 187 "mibaddr.mdf"
    TNT_SLOT_NUMBER_12,
#line 190 "mibaddr.mdf"
    TNT_SLOT_NUMBER_13,
#line 193 "mibaddr.mdf"
    TNT_SLOT_NUMBER_14,
#line 196 "mibaddr.mdf"
    TNT_SLOT_NUMBER_15,
#line 199 "mibaddr.mdf"
    TNT_SLOT_NUMBER_16,
#line 202 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_17,
#endif /* ( Q_TKO ) */
#line 206 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_18,
#endif /* ( Q_TKO ) */
#line 210 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_19,
#endif /* ( Q_TKO ) */
#line 214 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_20,
#endif /* ( Q_TKO ) */
#line 218 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_21,
#endif /* ( Q_TKO ) */
#line 222 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_22,
#endif /* ( Q_TKO ) */
#line 226 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_23,
#endif /* ( Q_TKO ) */
#line 230 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_24,
#endif /* ( Q_TKO ) */
#line 234 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_25,
#endif /* ( Q_TKO ) */
#line 238 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_26,
#endif /* ( Q_TKO ) */
#line 242 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_27,
#endif /* ( Q_TKO ) */
#line 246 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_28,
#endif /* ( Q_TKO ) */
#line 250 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_29,
#endif /* ( Q_TKO ) */
#line 254 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_30,
#endif /* ( Q_TKO ) */
#line 258 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_31,
#endif /* ( Q_TKO ) */
#line 262 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_32,
#endif /* ( Q_TKO ) */
#line 266 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_33,
#endif /* ( Q_TKO ) */
#line 270 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_34,
#endif /* ( Q_TKO ) */
#line 274 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_35,
#endif /* ( Q_TKO ) */
#line 278 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_36,
#endif /* ( Q_TKO ) */
#line 282 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_37,
#endif /* ( Q_TKO ) */
#line 286 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_38,
#endif /* ( Q_TKO ) */
#line 290 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_39,
#endif /* ( Q_TKO ) */
#line 294 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_NUMBER_40,
#endif /* ( Q_TKO ) */
#line 298 "mibaddr.mdf"
    TNT_SLOT_SHELF1,
#line 301 "mibaddr.mdf"
#if ( Q_TKO )
    TNT_SLOT_SHELF2,
#endif /* ( Q_TKO ) */
#line 305 "mibaddr.mdf"
    TNT_SLOT_FORWARD,
#line 308 "mibaddr.mdf"
    TNT_SLOT_LOOP_CELL,
#line 312 "mibaddr.mdf"
    TNT_SLOT_BROADCAST,
#line 316 "mibaddr.mdf"
    TNT_SLOT_RESERVED,
#line 320 "mibaddr.mdf"
    TNT_SLOT_MAX
} TntSlotNumber;


static __inline__ Bool
validTntSlotNumber (int x)
{
    switch (x) {
#line 151 "mibaddr.mdf"
    case TNT_SLOT_ANY:
#line 154 "mibaddr.mdf"
    case TNT_SLOT_FIRST:
#line 157 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_2:
#line 160 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_3:
#line 163 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_4:
#line 166 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_5:
#line 169 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_6:
#line 172 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_7:
#line 175 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_8:
#line 178 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_9:
#line 181 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_10:
#line 184 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_11:
#line 187 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_12:
#line 190 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_13:
#line 193 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_14:
#line 196 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_15:
#line 199 "mibaddr.mdf"
    case TNT_SLOT_NUMBER_16:
#line 202 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_17:
#endif /* ( Q_TKO ) */
#line 206 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_18:
#endif /* ( Q_TKO ) */
#line 210 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_19:
#endif /* ( Q_TKO ) */
#line 214 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_20:
#endif /* ( Q_TKO ) */
#line 218 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_21:
#endif /* ( Q_TKO ) */
#line 222 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_22:
#endif /* ( Q_TKO ) */
#line 226 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_23:
#endif /* ( Q_TKO ) */
#line 230 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_24:
#endif /* ( Q_TKO ) */
#line 234 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_25:
#endif /* ( Q_TKO ) */
#line 238 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_26:
#endif /* ( Q_TKO ) */
#line 242 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_27:
#endif /* ( Q_TKO ) */
#line 246 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_28:
#endif /* ( Q_TKO ) */
#line 250 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_29:
#endif /* ( Q_TKO ) */
#line 254 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_30:
#endif /* ( Q_TKO ) */
#line 258 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_31:
#endif /* ( Q_TKO ) */
#line 262 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_32:
#endif /* ( Q_TKO ) */
#line 266 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_33:
#endif /* ( Q_TKO ) */
#line 270 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_34:
#endif /* ( Q_TKO ) */
#line 274 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_35:
#endif /* ( Q_TKO ) */
#line 278 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_36:
#endif /* ( Q_TKO ) */
#line 282 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_37:
#endif /* ( Q_TKO ) */
#line 286 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_38:
#endif /* ( Q_TKO ) */
#line 290 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_39:
#endif /* ( Q_TKO ) */
#line 294 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_NUMBER_40:
#endif /* ( Q_TKO ) */
#line 298 "mibaddr.mdf"
    case TNT_SLOT_SHELF1:
#line 301 "mibaddr.mdf"
#if ( Q_TKO )
    case TNT_SLOT_SHELF2:
#endif /* ( Q_TKO ) */
#line 305 "mibaddr.mdf"
    case TNT_SLOT_FORWARD:
#line 308 "mibaddr.mdf"
    case TNT_SLOT_LOOP_CELL:
#line 312 "mibaddr.mdf"
    case TNT_SLOT_BROADCAST:
#line 316 "mibaddr.mdf"
    case TNT_SLOT_RESERVED:
#line 320 "mibaddr.mdf"
    case TNT_SLOT_MAX:
        return TRUE;
    default:
        return FALSE;
    }
}
#line 326 "mibaddr.mdf"

    /*
     * Define the maximum number of slots.  For easy porting of
     * existing code, slot cards are defined as being a 1 slot system.
     * Thus the first slot card is the same as the last slot card.
     * In all cases, the slot count is last - first + 1.
     */
# if ( TNT_CARD & SHELF_CARD )
#  define TNT_SLOT_SHELF	TNT_SLOT_SHELF1
#  define TNT_SLOT_LAST		TNT_SLOT_SHELF
#  define TXX_SLOT_LAST		TNT_SLOT_SHELF
#  define TNT_SLOT_LAST_SLOT_CARD	(TNT_SLOT_SHELF - 1)
# else
#  define TNT_SLOT_LAST		TNT_SLOT_FIRST
#  define TXX_SLOT_LAST		TNT_SLOT_FIRST
# endif


    /*
     * Most arrays that need to be sized by number of slots are sized using
     * the value TNT_SLOT_COUNT and index into the array using the
     * TNT_SLOT_INDEX macro.
     */
# define TNT_SLOT_COUNT		( TNT_SLOT_LAST - TNT_SLOT_FIRST + 1 )
# define TNT_SLOT_INDEX( s )	(( s ) - TNT_SLOT_FIRST )

    /*
     * Some arrays need to handle the "any" slot number and/or the
     * shelf controller.  Those arrays size by TNT_SLOT_COUNT_ANY and use
     * the slot number as a direct index.
     */
# define TNT_SLOT_COUNT_ANY	( TNT_SLOT_SHELF + 1 )

#line 362 "mibaddr.mdf"

    /*
     * TntPhysicalItemNumber:
     *
     * The number of a device within a particular shelf/slot.  The number
     * only has meaning within the context of the shelf/slot.  Different
     * shelf/slot card types will have different mappings of TntItem
     * to their internal resources.  The value zero indicates that there
     * is no item.
     */
typedef Uint16			TntPhysicalItemNumber;

    /*
     * TntLogicalItemNumber:
     *
     * The number of a logical item associated with a physical address.
     * We'll give people lots of bits to do whatever they wish (and
     * leave a "LogicalAddress" an even number of words.
     */
typedef Uint32			TntLogicalItemNumber;


    /*
     * PhysicalAddress:
     *
     * A data type used to define the unique location of a physical device
     * within the TNT system.
     *
     *  shelf The number of the shelf that the addressed physical device
     *                                  resides on.
     *
     *  slot The number of the slot that the addressed physical device resides
     *                                  on.
     *
     *  item A number that specifies an addressable entity within the context
     *                                  of shelf and slot.
     */
typedef struct PhysicalAddress_tag {
#line 407 "mibaddr.mdf"
    TntShelfNumber                      shelf:8;
#line 412 "mibaddr.mdf"
    TntSlotNumber                       slot:8;
#line 417 "mibaddr.mdf"
    TntPhysicalItemNumber               item;
}
#if ( USERIF & CLI )
__PACK__
#endif
PhysicalAddress;

    /*
     * LogicalAddress:
     *
     * A data type used to define the unique location of a logical device
     * within the TNT system.
     *
     *  physAddr The physical address that the addressed logical device resides
     *                                  at.
     *
     *  logicalItem A number that specifies an addressable logical entity
     *                                  within the context of a physical
     *                                  address.
     */
typedef struct logicalAddress {
#line 474 "mibaddr.mdf"
    PhysicalAddress                     physAddr;
#line 478 "mibaddr.mdf"
    TntLogicalItemNumber                logicalItem;
}
#if ( USERIF & CLI )
__PACK__
#endif
LogicalAddress;
#line 514 "mibaddr.mdf"

#endif /* MIBADDR_H */

