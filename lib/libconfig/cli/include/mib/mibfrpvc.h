    /*
     * Notice: file generated by MIBMAKE from mibfrpvc.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibfrpvc.mdf
     */
#line 3 "mibfrpvc.mdf"
/*
 * $Id: mibfrpvc.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1997 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 25 "mibfrpvc.mdf"

#if ! defined( MIBFRPVC_H )
#define MIBFRPVC_H

#include "mibgen.h"

    /*
     *  The Frame Relay PVC status profile
     */
extern const char* const		mibProfFrPVCStat;

extern const char* const		mibProfDlciStat;

#line 70 "mibfrpvc.mdf"

#define	MAX_DLCI_PER_PVC	2


    /*
     * FrPvcState:
     *
     * The possible states of a PVC-segment (circuit); The states of a PVC, as
     * it concerns the higher layer. The only state that is meaningful to the
     * higher layer, in effect, is FR_PVC_DATA_TRANSFER. All other states mean
     * the end-to-end data doesn't exist. Note, this is copied from the
     * FrDlciState enum in frmain.h; the new enum created primarily to include
     * in the internal state profiles.
     *
     *  FR_PVC_INACTIVE The PVC is inactive.
     *
     *  FR_PVC_CLOSED PVC exists but is closed.
     *
     *  FR_PVC_DATA_TRANSFER PVC is up and data may be transferred.
     *
     *  FR_PVC_NUMBER_OF_STATES invalid value, terminates enum.
     */
typedef enum FrPvcState {
#line 86 "mibfrpvc.mdf"
    FR_PVC_INACTIVE,
#line 89 "mibfrpvc.mdf"
    FR_PVC_CLOSED,
#line 92 "mibfrpvc.mdf"
    FR_PVC_DATA_TRANSFER,
#line 95 "mibfrpvc.mdf"
    FR_PVC_NUMBER_OF_STATES
} FrPvcState;


static __inline__ Bool
validFrPvcState (int x)
{
    switch (x) {
#line 86 "mibfrpvc.mdf"
    case FR_PVC_INACTIVE:
#line 89 "mibfrpvc.mdf"
    case FR_PVC_CLOSED:
#line 92 "mibfrpvc.mdf"
    case FR_PVC_DATA_TRANSFER:
#line 95 "mibfrpvc.mdf"
    case FR_PVC_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * DlciIdent:
     *
     * A data type used to uniquely identify a DLCI within the TNT system.
     *
     *  dlci The DLCI number.
     *
     *  routeID The system RouteID value associated with this DLCI.
     *
     *  frProfile The Frame Relay profile over which the DLCI is established.
     */

#if ( MDF_FRAME_RELAY_NNI == FYES )

typedef struct dlciIdent {
#line 108 "mibfrpvc.mdf"
    Uint16                              dlci;
#line 112 "mibfrpvc.mdf"
    Uint16                              routeID;
#line 116 "mibfrpvc.mdf"
    char                                frProfile[ MAX_FR_RELAY_NAME_LEN + 1 ];
}
#if ( USERIF & CLI )
__PACK__
#endif
DlciIdent;

#endif /* ( MDF_FRAME_RELAY_NNI == FYES ) */

    /*
     * FrPVCStateProfile:
     *
     * Reflects status of a Frame Relay PVC segment.
     *
     *  circuitName The name of the PVC segment, or circuit. Identifies a
     *                                  circuit, unique within the system.
     *
     *  currentState The current state of the circuit.
     *
     *  dlciMember Member DLCIs of this segment.
     */

#if ( MDF_FRAME_RELAY_NNI == FYES )

typedef struct frPVCStateProfile {
#line 168 "mibfrpvc.mdf"
    char                                circuitName[ MAX_FR_RELAY_NAME_LEN + 1 ];
#line 174 "mibfrpvc.mdf"
    FrPvcState                          currentState;
#line 178 "mibfrpvc.mdf"
    DlciIdent                           dlciMember[ MAX_DLCI_PER_PVC ];
}
#if ( USERIF & CLI )
__PACK__
#endif
FrPVCStateProfile;

#endif /* ( MDF_FRAME_RELAY_NNI == FYES ) */
#line 184 "mibfrpvc.mdf"

 	/* The field ID of the Index Field for this profile. */
#define	MIB_FRPVC_STAT_INDEX_FIELD	1


    /*
     * FrDlciStateProfile:
     *
     * Reflects status of a DLCI which is a member of a PVC segment.
     *
     *  dlciIdent Identifies the DLCI within the system. Index of this profile.
     *
     *  circuitName The name of the PVC segment (circuit) of which this DLCI is
     *                                  a part.
     *
     *  currentState The current state of the DLCI.
     *
     *  tag A tag associated with the DLCI on the owning card.
     *
     *  shelfNumber The shelf-number of the card owning this DLCI.
     *
     *  slotNumber The slot-number of the card owning this DLCI.
     */

#if ( MDF_FRAME_RELAY_NNI == FYES )

typedef struct frDlciStateProfile {
#line 219 "mibfrpvc.mdf"
    DlciIdent                           dlciIdent;
#line 224 "mibfrpvc.mdf"
    char                                circuitName[ MAX_FR_RELAY_NAME_LEN + 1 ];
#line 228 "mibfrpvc.mdf"
    FrPvcState                          currentState;
#line 232 "mibfrpvc.mdf"
    Pointer                             tag;
#line 236 "mibfrpvc.mdf"
    TntShelfNumber                      shelfNumber;
#line 240 "mibfrpvc.mdf"
    TntSlotNumber                       slotNumber;
}
#if ( USERIF & CLI )
__PACK__
#endif
FrDlciStateProfile;

#endif /* ( MDF_FRAME_RELAY_NNI == FYES ) */
#line 246 "mibfrpvc.mdf"

 	/* The field ID of the Index Field for this profile. */
#define	MIB_DLCI_STAT_INDEX_FIELD	1

#line 275 "mibfrpvc.mdf"

#endif /* #define MIBFRPVC_H */

