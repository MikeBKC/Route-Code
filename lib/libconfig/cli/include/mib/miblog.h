    /*
     * Notice: file generated by MIBMAKE from miblog.mdf
     * DO NOT EDIT THIS FILE!!!  Edit miblog.mdf
     */
#line 2 "miblog.mdf"
/*
 * $Id: miblog.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 24 "miblog.mdf"

#if ! defined( MIBLOG_H )
#define MIBLOG_H

#include "mibgen.h"


extern const char* const		mibProfLog;

extern const MibFieldEnumParams		logMsgLevelParams;

extern ConstPtr
mibFactoryLogProfile( MibProfileType	mibType,
		      ConstPtr		mibIndex,
		      Int		mibIndexLen );



    /*
     * LogMsgLevel:
     *
     *
     *  LOG_LEVEL_NONE No log messages will be saved/displayed.
     *
     *  LOG_LEVEL_EMERG Something bad has happened -- normal operation is
     *                                  doubtful.
     *
     *  LOG_LEVEL_ALERT Something bad has happened, but normal operation can
     *                                  probably continue.
     *
     *  LOG_LEVEL_CRIT An interface has gone down. Also used for security
     *                                  errors.
     *
     *  LOG_LEVEL_ERR Something that should not occur has occured.
     *
     *  LOG_LEVEL_WARNING Messages for things out of the ordinary in otherwise
     *                                  normal operation, e.g. login failure
     *                                  due to bad user name/password.
     *
     *  LOG_LEVEL_NOTICE Things of interest in normal operation, e.g link
     *                                  up/down.
     *
     *  LOG_LEVEL_INFO State/status changes that are normally not of general
     *                                  interest.
     *
     *  LOG_LEVEL_DEBUG Messages that would only be of interest when debugging
     *                                  unit configuration.
     *
     *  LOG_LEVEL_SW_DEBUG Messages that would only be of interest when
     *                                  debugging code and are not for display
     *                                  to users.
     */
typedef enum LogMsgLevel {
#line 60 "miblog.mdf"
    LOG_LEVEL_NONE,
#line 63 "miblog.mdf"
    LOG_LEVEL_EMERG,
#line 66 "miblog.mdf"
    LOG_LEVEL_ALERT,
#line 70 "miblog.mdf"
    LOG_LEVEL_CRIT,
#line 73 "miblog.mdf"
    LOG_LEVEL_ERR,
#line 76 "miblog.mdf"
    LOG_LEVEL_WARNING,
#line 80 "miblog.mdf"
    LOG_LEVEL_NOTICE,
#line 83 "miblog.mdf"
    LOG_LEVEL_INFO,
#line 86 "miblog.mdf"
    LOG_LEVEL_DEBUG,
#line 90 "miblog.mdf"
    LOG_LEVEL_SW_DEBUG
} LogMsgLevel;


static __inline__ Bool
validLogMsgLevel (int x)
{
    switch (x) {
#line 60 "miblog.mdf"
    case LOG_LEVEL_NONE:
#line 63 "miblog.mdf"
    case LOG_LEVEL_EMERG:
#line 66 "miblog.mdf"
    case LOG_LEVEL_ALERT:
#line 70 "miblog.mdf"
    case LOG_LEVEL_CRIT:
#line 73 "miblog.mdf"
    case LOG_LEVEL_ERR:
#line 76 "miblog.mdf"
    case LOG_LEVEL_WARNING:
#line 80 "miblog.mdf"
    case LOG_LEVEL_NOTICE:
#line 83 "miblog.mdf"
    case LOG_LEVEL_INFO:
#line 86 "miblog.mdf"
    case LOG_LEVEL_DEBUG:
#line 90 "miblog.mdf"
    case LOG_LEVEL_SW_DEBUG:
        return TRUE;
    default:
        return FALSE;
    }
}
#line 97 "miblog.mdf"

    /*
     * logConvertLevel
     *
     * Given an internal logging level, return the value for the level
     * as known by syslog.
     */
extern Uint32
logConvertLevel( LogMsgLevel	level );


    /*
     * LogFacility:
     *
     * The syslog facility codes. The codes are added to LOG_BASE before
     * sending to the log host.
     *
     *  LOG_LOCAL0 Syslog facility local0 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     *
     *  LOG_LOCAL1 Syslog facility local1 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     *
     *  LOG_LOCAL2 Syslog facility local2 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     *
     *  LOG_LOCAL3 Syslog facility local3 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     *
     *  LOG_LOCAL4 Syslog facility local4 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     *
     *  LOG_LOCAL5 Syslog facility local5 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     *
     *  LOG_LOCAL6 Syslog facility local6 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     *
     *  LOG_LOCAL7 Syslog facility local7 (man syslog.conf on your UNIX syslog
     *                                  server for more info.
     */

#if ( MDF_LOGPROF == FYES )

typedef enum LogFacility {
#line 141 "miblog.mdf"
    LOG_LOCAL0,
#line 145 "miblog.mdf"
    LOG_LOCAL1,
#line 149 "miblog.mdf"
    LOG_LOCAL2,
#line 153 "miblog.mdf"
    LOG_LOCAL3,
#line 157 "miblog.mdf"
    LOG_LOCAL4,
#line 161 "miblog.mdf"
    LOG_LOCAL5,
#line 165 "miblog.mdf"
    LOG_LOCAL6,
#line 169 "miblog.mdf"
    LOG_LOCAL7
} LogFacility;

#endif /* ( MDF_LOGPROF == FYES ) */

#if ( MDF_LOGPROF == FYES )



static __inline__ Bool
validLogFacility (int x)
{
    switch (x) {
#line 141 "miblog.mdf"
    case LOG_LOCAL0:
#line 145 "miblog.mdf"
    case LOG_LOCAL1:
#line 149 "miblog.mdf"
    case LOG_LOCAL2:
#line 153 "miblog.mdf"
    case LOG_LOCAL3:
#line 157 "miblog.mdf"
    case LOG_LOCAL4:
#line 161 "miblog.mdf"
    case LOG_LOCAL5:
#line 165 "miblog.mdf"
    case LOG_LOCAL6:
#line 169 "miblog.mdf"
    case LOG_LOCAL7:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( MDF_LOGPROF == FYES ) */
#line 175 "miblog.mdf"

    /*
     * The syslog facility codes.  The codes are added to LOG_BASE
     * before sending to the log host.
     */
#define	LOG_BASE	16	/* reserved for local use */
#define LOG_SHIFT	3


    /*
     * LogCallInfoLvl:
     *
     *
     *  LOG_CALLINFOLVL_NONE No call info will be displayed.
     *
     *  LOG_CALLINFOLVL_ENDOFCALL Call info will be displayed at the end of the
     *                                  call.
     */
typedef enum LogCallInfoLvl {
#line 203 "miblog.mdf"
    LOG_CALLINFOLVL_NONE,
#line 206 "miblog.mdf"
    LOG_CALLINFOLVL_ENDOFCALL
} LogCallInfoLvl;


static __inline__ Bool
validLogCallInfoLvl (int x)
{
    switch (x) {
#line 203 "miblog.mdf"
    case LOG_CALLINFOLVL_NONE:
#line 206 "miblog.mdf"
    case LOG_CALLINFOLVL_ENDOFCALL:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * LogSyslogFormat:
     *
     *
     *  LOG_SYSLOGFORMAT_TNT syslog message format is TNT style.
     *
     *  LOG_SYSLOGFORMAT_MAX syslog message format is MAX style.
     */
typedef enum LogSyslogFormat {
#line 223 "miblog.mdf"
    LOG_SYSLOGFORMAT_TNT,
#line 226 "miblog.mdf"
    LOG_SYSLOGFORMAT_MAX
} LogSyslogFormat;


static __inline__ Bool
validLogSyslogFormat (int x)
{
    switch (x) {
#line 223 "miblog.mdf"
    case LOG_SYSLOGFORMAT_TNT:
#line 226 "miblog.mdf"
    case LOG_SYSLOGFORMAT_MAX:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * LogProfile:
     *
     * Configure system-wide event logging parameters.
     *
     *  saveLevel The lowest level of message to be saved for status display.
     *
     *  saveNumber The maximum number of message to be saved for status
     *                                  display.
     *
     *  softwareDebug If TRUE, LOG_LEVEL_SW_DEBUG messages are treated as
     *                                  LOG_LEVEL_DEBUG. Otherwise, they are
     *                                  discarded.
     *
     *  callInfoLvl Specifies when call status changes are logged.
     *
     *  logEnabled TRUE if log messages are to be forwarded to a remote host
     *                                  running syslogd.
     *
     *  logHost The IP address of the log host for syslog updating.
     *
     *  logPort The Port number on the log host for syslog updating.
     *
     *  logFacility The syslogd facility code for messages logged from this
     *                                  box.
     *
     *  syslogFormat Specifies the syslog output format to use.
     */

#if ( MDF_LOGPROF == FYES )

typedef struct logProfile {
   char                                 name[ MAX_PROFILE_NAME_LENGTH + 1 ];
   Boolean                              active; 

#line 246 "miblog.mdf"
    LogMsgLevel                         saveLevel;
#line 250 "miblog.mdf"
    Uint                                saveNumber;
#line 254 "miblog.mdf"
    Bool                                softwareDebug;
#line 260 "miblog.mdf"
    LogCallInfoLvl                      callInfoLvl;
#line 265 "miblog.mdf"
#if ( MDF_IP == FYES )
    Bool                                logEnabled;
#endif /* ( MDF_IP == FYES ) */
#line 271 "miblog.mdf"
#if ( MDF_IP == FYES )
    IpAddress                           logHost;
#endif /* ( MDF_IP == FYES ) */
#line 276 "miblog.mdf"
#if ( MDF_IP == FYES )
    Word                                logPort;
#endif /* ( MDF_IP == FYES ) */
#line 281 "miblog.mdf"
#if ( MDF_IP == FYES )
    LogFacility                         logFacility;
#endif /* ( MDF_IP == FYES ) */
#line 286 "miblog.mdf"
#if ( MDF_IP == FYES )
    LogSyslogFormat                     syslogFormat;
#endif /* ( MDF_IP == FYES ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
LogProfile;

#endif /* ( MDF_LOGPROF == FYES ) */
#line 335 "miblog.mdf"

#endif /* MIBLOG_H */


