    /*
     * Notice: file generated by MIBMAKE from mibbrite.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibbrite.mdf
     */
#line 2 "mibbrite.mdf"
/*
 * $Id: mibbrite.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 24 "mibbrite.mdf"

#if ! defined( MIBBRITE_H )
# define MIBBRITE_H

# include "mibds0.h"
# include "mibaddr.h"
# include "mibglob.h"


    /* This file contains the internal representation of the briTe profile
     * (MIB_PROF_NET_BRI_TE). The name of this profile is stored in the global
     * variable mibProfBriTe.
     */

extern const char* const		mibProfBriTe;

    /*
     * The maximum length of a SPID is defined below.
     */
# define MAX_SPID_LENGTH		20

    /*
     * The maximum length of an answer number (for BRI LT) is:
     */
# define MAX_ANSWER_NUMBER	MAX_PHONE_NUMBER_LENGTH


    /*
     * In anticipation of support for more than 2 logical links per DSL
     * I have defined BRI_MAX_LOGICAL_LINKS to represent the number of
     * logical links per BRI DSL actually supported on a platform.  This
     * number should be the constant MAX_LOGICAL_LINKS defined in
     * tei_ces.h, but that is defined totally out of bounds for our
     * purposes.  In the future we will redefine MAX_LOGICAL_LINKS
     * correctly in tei_ces.h and then use that up here.
     */
# if PLATFORM & ( MPORT | P50 | PDSL | P25 | P15 | TNT | M200 )

#  define BRI_MAX_LOGICAL_LINKS		2

# else
#  error Unknown PLATFORM
# endif


    /*
     * BRIClockSource:
     *
     * Each BRI trunk may be selectable as a clock source for the unit. If a
     * particular trunk is not usable as a clock source, then this enumeration
     * allows the user to disable it. This is necessary for unclocked circuits
     * to the network.
     *
     *  BRI_CLK_USABLE The BRI line can be used as the master clock source.
     *
     *  BRI_CLK_SLAVE_ONLY The BRI line can not be used as the master clock
     *                                  source.
     */
typedef enum BRIClockSource {
#line 97 "mibbrite.mdf"
    BRI_CLK_USABLE,
#line 100 "mibbrite.mdf"
    BRI_CLK_SLAVE_ONLY
} BRIClockSource;


static __inline__ Bool
validBRIClockSource (int x)
{
    switch (x) {
#line 97 "mibbrite.mdf"
    case BRI_CLK_USABLE:
#line 100 "mibbrite.mdf"
    case BRI_CLK_SLAVE_ONLY:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * BriAnalogEncode:
     *
     * The following values are analog encoding for digital modems/pots which
     * selected by the user.
     *
     *  BRI_SWITCH_TYPE use switch-type to determine analog encoding
     *
     *  BRI_MU_LAW override u-Law (actually MU-Law) encoding of analog data.
     *
     *  BRI_A_LAW override A-Law encoding of analog data.
     */

#if ( NETIF & BRI )

typedef enum BriAnalogEncode {
#line 125 "mibbrite.mdf"
    BRI_SWITCH_TYPE,
#line 128 "mibbrite.mdf"
    BRI_MU_LAW,
#line 131 "mibbrite.mdf"
    BRI_A_LAW
} BriAnalogEncode;

#endif /* ( NETIF & BRI ) */

#if ( NETIF & BRI )



static __inline__ Bool
validBriAnalogEncode (int x)
{
    switch (x) {
#line 125 "mibbrite.mdf"
    case BRI_SWITCH_TYPE:
#line 128 "mibbrite.mdf"
    case BRI_MU_LAW:
#line 131 "mibbrite.mdf"
    case BRI_A_LAW:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & BRI ) */

    /*
     * BRIChannelConfig:
     *
     * TCW - We need to decouple the concept of a physical B-channel and a
     * logical link. SPIDs and phoneNumbers are associated with Abstract
     * Terminals/logic links, NOT with B-channels. These, along with CES,
     * should be moved to the AbstractTermBlock. channelUsage, trunkGroup and
     * routePort are associated with a specific B-channel and are appropriately
     * kept in this object. For each B-channel the following information is
     * kept:
     *
     *  spid The SPID, if used with AT&T 5E5, or 0 if no SPID.
     *
     *  phoneNumber The number the far end dials to get this channel. Only
     *                                  enough trailing digits to descriminate
     *                                  between this channel and other channels
     *                                  used by the device are required.
     *
     *  ces The Connection Endpoint Suffix (CES) associated with this logical
     *                                  link.
     *
     *  trunkGroup Identifies the trunk group ID if trunks groups are enabled.
     *
     *  channelUsage Usage of the b-channel.
     *
     *  routePort A port number for routing incoming calls is also associated
     *                                  with each channel. A port number of
     *                                  zero means calls arriving on this
     *                                  channel can be routed to any port.
     *
     *  callRouteInfo The physical address of the device where calls received
     *                                  on this channel should be routed to.
     *                                  Deprecated, see the call routing
     *                                  profile for an alternate mechanism.
     *
     *  nailedGroup A number that identifies the set of channels that makes up
     *                                  a nailed group.
     */
typedef struct briChannelConfig {
#line 160 "mibbrite.mdf"
    Byte                                spid[ MAX_SPID_LENGTH + 1 ];
#line 166 "mibbrite.mdf"
    char                                phoneNumber[ MAX_PHONE_NUMBER_LENGTH + 1 ];
#line 174 "mibbrite.mdf"
    Byte                                ces;
#line 181 "mibbrite.mdf"
    Word                                trunkGroup;
#line 187 "mibbrite.mdf"
    DS0ChannelUsage                     channelUsage;
#line 191 "mibbrite.mdf"
    RectangularPortNumber               routePort;
#line 199 "mibbrite.mdf"
#if ( PLATFORM & ( TNT ) )
    PhysicalAddress                     callRouteInfo;
#endif /* ( PLATFORM & ( TNT ) ) */
#line 208 "mibbrite.mdf"
#if ( PLATFORM & ( TNT ) )
    Uint16                              nailedGroup;
#endif /* ( PLATFORM & ( TNT ) ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
BRIChannelConfig;
#line 215 "mibbrite.mdf"
#  if (MDF_X25_DTE == FYES)
#   include "lcdparam.h"
#  endif


    /*
     * X25DChannelConfig:
     *
     * The provisioned parameters that describe the D-Channel x25 service.
     *
     *  protoEnabled A Boolean set true if d channel x.25 is enabled on this
     *                                  line.
     *
     *  spid The D channel SPID, if used with DMS-100, or 0 if no SPID.
     *
     *  tei The D channel fixed tei if used with DMS-100, or 0 if no fixed tei.
     *
     *  trunkGroup Identifies the trunk group ID - required for x25 operation.
     *
     *  twoWay Describes the two-way channels, the number of channels and
     *                                  starting number.
     *
     *  oneWayIn Describes the one-way in channels, the number of channels and
     *                                  starting number.
     *
     *  oneWayOut Describes the one-way out channels, the number of channels
     *                                  and starting number.
     */

#if (MDF_X25_DTE == FYES)

typedef struct x25DChannelConfig {
#line 227 "mibbrite.mdf"
    Boolean                             protoEnabled;
#line 231 "mibbrite.mdf"
    Byte                                spid[ MAX_SPID_LENGTH + 1 ];
#line 235 "mibbrite.mdf"
    Word                                tei;
#line 239 "mibbrite.mdf"
    Word                                trunkGroup;
#line 243 "mibbrite.mdf"
    SideBySide                          twoWay;
#line 248 "mibbrite.mdf"
    SideBySide                          oneWayIn;
#line 253 "mibbrite.mdf"
    SideBySide                          oneWayOut;
}
#if ( USERIF & CLI )
__PACK__
#endif
X25DChannelConfig;

#endif /* (MDF_X25_DTE == FYES) */
#line 260 "mibbrite.mdf"
#  define lcs value1
#  define startNo value2

    /*
     * BRILineInterface:
     *
     * For each BRI, we are only interested in circuit switching this month. We
     * just keep track here if the line is enabled, all the real info is in the
     * B channel data structure.
     *
     *  lineEnabled Boolean that is TRUE if this interface is part of the set
     *                                  used for this network set, or FALSE
     *                                  otherwise.
     *
     *  dualLink A Boolean set true if and only if we use two logical links on
     *                                  a multipoint line.
     *
     *  channelConfig The configuration parameters of each logical link
     *                                  associated with this BRI line.
     *
     *  x25Config The configuration parameters parameters of the logical
     *                                  channels provisioned for X.25 on the
     *                                  D-Channel.
     *
     *  dialPlan Whether we are using the trunk-group-only or extended-dial
     *                                  plan.
     *
     *  answerNumber1 Phone numbers to match when routing by incoming phone
     *                                  number.
     *
     *  answerNumber2 Phone numbers to match when routing by incoming phone
     *                                  number.
     *
     *  routePort Prt/Grp (nailed group number) for the D-channel.
     *
     *  briClockSource Boolean that is TRUE if this interface can be used as
     *                                  the netclock source.
     */
typedef struct briLineInterface {
#line 301 "mibbrite.mdf"
    Boolean                             lineEnabled;
#line 306 "mibbrite.mdf"
    Boolean                             dualLink;
#line 313 "mibbrite.mdf"
    BRIChannelConfig                    channelConfig[ BRI_MAX_LOGICAL_LINKS ];
#line 318 "mibbrite.mdf"
#if (MDF_X25_DTE == FYES)
    X25DChannelConfig                   x25Config;
#endif /* (MDF_X25_DTE == FYES) */
#line 325 "mibbrite.mdf"
    int                                 dialPlan;
#line 331 "mibbrite.mdf"
    char                                answerNumber1[ MAX_ANSWER_NUMBER + 1 ];
#line 336 "mibbrite.mdf"
    char                                answerNumber2[ MAX_ANSWER_NUMBER + 1 ];
#line 341 "mibbrite.mdf"
#if (MDF_X25_DCHAN == FYES)
    Word                                routePort;
#endif /* (MDF_X25_DCHAN == FYES) */
#line 347 "mibbrite.mdf"
    BRIClockSource                      briClockSource;
}
#if ( USERIF & CLI )
__PACK__
#endif
BRILineInterface;

    /*
     * BRINetworkProfile:
     *
     * For each BRI interface profile, the following information is kept:
     *
     *  profileNumber If it is a stored profile, the number of the profile
     *                                  (1..MAX_NETWORK_PROFILES). If it is the
     *                                  current profile, the number of the
     *                                  stored profile from which it was
     *                                  loaded, or zero if it has never been
     *                                  loaded.
     *
     *  name The null terminated ascii string that the user gave to this
     *                                  particular profile.
     *
     *  lineInterface Description of each interface that is used for this
     *                                  profile set.
     *
     *  switchType The physical CO switch that the BRI's come from.
     *
     *  ansVoiceCall When setting this field to no. the pipeline will not
     *                                  answer Voice call even if the call is
     *                                  destinated for us
     *
     *  concatNailed When setting this field to no, BRI leased lines are
     *                                  concatenated, when yes, the B channels
     *                                  are concatenated (SUPER128)
     *
     *  briAnalogEncode Sets the encoding standard for digitized analog data to
     *                                  either u-Law or A-Law for BRI. The
     *                                  Defaults is to encode according to BRI
     *                                  switchType, this option is to override.
     */
typedef struct briNetworkprofile {
    char                                name[MAX_PROFILE_NAME_LENGTH+1];
    Boolean                             active;
#line 388 "mibbrite.mdf"
    Word                                profileNumber;
#line 395 "mibbrite.mdf"
//  char                                name[ MAX_NET_PROFILE_NAME + 1 ];
#line 400 "mibbrite.mdf"
    BRILineInterface                    lineInterface[ BRI_MAX_DSL_PER_SLOT ];
#line 404 "mibbrite.mdf"
    NetworkSwitchType                   switchType;
#line 408 "mibbrite.mdf"
#if ( MDF_ANS_VOICE_CALL == FYES )
    Boolean                             ansVoiceCall;
#endif /* ( MDF_ANS_VOICE_CALL == FYES ) */
#line 414 "mibbrite.mdf"
#if ( PLATFORM & P50) && ( NAILED_CHANS == FYES )
    Boolean                             concatNailed;
#endif /* ( PLATFORM & P50) && ( NAILED_CHANS == FYES ) */
#line 420 "mibbrite.mdf"
#if ( MDF_BRI_ANALOG_ENCODE == FYES )
    BriAnalogEncode                     briAnalogEncode;
#endif /* ( MDF_BRI_ANALOG_ENCODE == FYES ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
BRINetworkProfile;
#line 451 "mibbrite.mdf"

# endif /* MIBBRITE_H */

