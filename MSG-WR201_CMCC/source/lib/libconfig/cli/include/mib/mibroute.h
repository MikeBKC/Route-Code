    /*
     * Notice: file generated by MIBMAKE from mibroute.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibroute.mdf
     */
#line 2 "mibroute.mdf"
/*
 * $Id: mibroute.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 24 "mibroute.mdf"

#if ! defined( MIBROUTE_H )
#define MIBROUTE_H

    /* This file contains the internal representation of the route profile
     * (MIB_PROF_ROUTE). The name of this profile is stored in the global
     * variable mibProfRoute.
     */

extern const char* const		mibProfRoute;

extern ConstPtr
mibFactoryRouteProfile( MibProfileType	mibType,
		        ConstPtr	mibIndex,
		        Int		mibIndexLen );

#define MIB_ROUTE_INDEX_FIELD		1

#define MIB_DEFAULT_ROUTE_INDEX		"default"


    /*
     * RouteProfile:
     *
     * A Route profile contains the information required by the Router to
     * set-up static routes. The static routes are passed to the router at
     * start-up and whenever a route changes.
     *
     *  hostName The name of this route.
     *
     *  hostAddress The IP address of the destination network or subnet. An
     *                                  address of 0.0.0.0 indicates a default
     *                                  route.
     *
     *  netmask The netmask to be used for the destination.
     *
     *  gatewayAddress The address of the gateway/router for this static route.
     *
     *  hops The number of hops to the named host.
     *
     *  outputCost The OSPF cost of this link.
     *
     *  preference The preference of this route.
     *
     *  thirdParty Advertise the gateway as an OSPF 3rd party advertisement.
     *
     *  aseType The OSPF ASE type of this LSA.
     *
     *  aseTag The OSPF ASE tag of this link.
     *
     *  privateRoute TRUE if this is a private route that should not be
     *                                  advertised via routing protocols.
     *
     *  active TRUE if this is route is active. Inactive routes are
     *                                  ignored and do not affect the routing
     *                                  tables.
     *
     *  ase7Adv Indicates OSPF ASE7, and whether to advertise or not.
     *
     *  vRouterName Specifies the VRouter in which this IP Route belongs.
     *
     *  interVRouterName Specifies the VRouter.
     *
     *  interfaceName Specifies the Router bind to interface(internet profile).
     */
typedef struct st_routeProfile {
#line 90 "mibroute.mdf"
    //char                                hostName[ MAX_PROFILE_NAME_LENGTH + 1 ];
    /*
     * mod by llliu@080528 for one2one route.
     */
    char                                hostName[ MAX_HOST_NAME_LENGTH + 1 ];
    Boolean                             active;
#line 94 "mibroute.mdf"
    IpAddress                           hostAddress;
#line 99 "mibroute.mdf"
    IpAddress                           netmask;
#line 104 "mibroute.mdf"
    IpAddress                           gatewayAddress;
    IpAddress                           keepaliveAddress;
#line 108 "mibroute.mdf"
    Word                                hops;
#line 112 "mibroute.mdf"
#if ( MDF_OSPF == FYES )
    Uint32                              outputCost;
#endif /* ( MDF_OSPF == FYES ) */
#line 117 "mibroute.mdf"
    Uint32                              preference;
//for route_backup
	Uint32				Interval;
	Uint32				Retry;
	Uint32				Pref_Down;
	Uint32				Metric_Down;
//for route_loadbalance
	Uint32				weight1;
	Uint32				weight2;
#line 121 "mibroute.mdf"
#if ( MDF_OSPF == FYES )
    Boolean                             thirdParty;
#endif /* ( MDF_OSPF == FYES ) */
#line 126 "mibroute.mdf"
#if ( MDF_OSPF == FYES )
    Int                                 aseType;
#endif /* ( MDF_OSPF == FYES ) */
#line 131 "mibroute.mdf"
#if ( MDF_OSPF == FYES )
    Uint32                              aseTag;
#endif /* ( MDF_OSPF == FYES ) */
#line 136 "mibroute.mdf"
    Boolean                             privateRoute;
#line 141 "mibroute.mdf"
#line 146 "mibroute.mdf"
#if ( MDF_OSPF == FYES )
    Int                                 ase7Adv;
#endif /* ( MDF_OSPF == FYES ) */
#line 151 "mibroute.mdf"
#if ( MDF_VROUTER == FYES )
    char                                vRouterName[ MAX_NAME_LEN + 1 ];
#endif /* ( MDF_VROUTER == FYES ) */
#line 157 "mibroute.mdf"
#if ( MDF_VROUTER == FYES )
    char                                interVRouterName[ MAX_NAME_LEN + 1 ];
#endif /* ( MDF_VROUTER == FYES ) */
    char                                interfaceName[ MAX_PROFILE_NAME_LENGTH + 1 ];
// 
// zhz@20051221, for polciy routing
//
    Word          			filterActive;
    char                                inAclProfile[ MAX_PROFILE_NAME_LENGTH + 1 ];
    char                                outAclProfile[ MAX_PROFILE_NAME_LENGTH + 1 ];
    Int                                 routeType;
    char				pdbProfile[ MAX_PROFILE_NAME_LENGTH + 1 ];
}
#if ( USERIF & CLI )
__PACK__
#endif
RouteProfile;
#line 281 "mibroute.mdf"

#endif /* MIBROUTE_H */

