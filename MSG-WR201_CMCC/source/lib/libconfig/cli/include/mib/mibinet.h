    /*
     * Notice: file generated by MIBMAKE from mibinet.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibinet.mdf
     */
/*
 * $Id: mibinet.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1996 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */



#if ! defined( MIBINET_H )
# define MIBINET_H

# include "mibglob.h"
# include "mibcmt.h"
# include "mibinans.h"
# include "mibinara.h"
# include "mibinatlk.h"
# include "mibinb.h"
# include "mibincomb.h"
# include "mibineu.h"
# include "mibinfr.h"
# include "mibinip.h"
# include "mibinipx.h"
# include "mibinmp.h"
# include "mibinmpp.h"
# include "mibinppp.h"
# include "mibinrad.h"
# include "mibinses.h"
# include "mibint3pos.h"
# include "mibintcp.h"
# include "mibintel.h"
# include "mibinv120.h"
# include "mibinx25.h"
# include "mibinx32.h"
# include "mibinx75.h"
# include "mibindhcp.h"
# include "mibindtpt.h"
# include "mibintunnel.h"
# include "mibinatm.h"
# include "mibinpppoe.h"

    /*
     * This file contains the internal representation of the Internet profile
     * (MIB_PROF_INTERNET). The name of this profile is stored in the global
     * variable mibProfInter.
     */
extern const char* const		mibProfInter;

    /*
     * Function to create the factory instance of an internet profile.
     */
# if ( MIBMGR == FYES )
extern ConstPtr
mibFactoryInetProfile( MibProfileType	mibType,
		       ConstPtr		mibIndex,
		       Int		mibIndexLen );
# endif

    /*
     * The field number of the index to this profile.
     */
# define MIB_INTER_INDEX_FIELD	1



    /*
     * CalledNumberType:
     *
     * The type of phone number contained in the 'dial' field.
     *
     *  UNKNOWN_NUMBER
     *
     *  INTL_NUMBER
     *
     *  NAT_NUMBER
     *
     *  NET_SPECIFIC
     *
     *  LOC_NUMBER
     *
     *  ABBREV_NUMBER
     */
typedef enum CalledNumberType {
    UNKNOWN_NUMBER = 0,
    INTL_NUMBER = 1,
    NAT_NUMBER = 2,
    NET_SPECIFIC = 3,
    LOC_NUMBER = 4,
    ABBREV_NUMBER = 6
} CalledNumberType;


static __inline__ Bool
validCalledNumberType (int x)
{
    switch (x) {
    case UNKNOWN_NUMBER:
    case INTL_NUMBER:
    case NAT_NUMBER:
    case NET_SPECIFIC:
    case LOC_NUMBER:
    case ABBREV_NUMBER:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * PriNumberingPlanID:
     *
     * The PRI numbering plan ID for the called number.
     *
     *  UNKNOWN_NUMB_PLAN
     *
     *  ISDN_NUMB_PLAN
     *
     *  PRIVATE_NUMB_PLAN
     */
typedef enum PriNumberingPlanID {
    UNKNOWN_NUMB_PLAN = 0,
    ISDN_NUMB_PLAN = 1,
    PRIVATE_NUMB_PLAN = 9
} PriNumberingPlanID;


static __inline__ Bool
validPriNumberingPlanID (int x)
{
    switch (x) {
    case UNKNOWN_NUMB_PLAN:
    case ISDN_NUMB_PLAN:
    case PRIVATE_NUMB_PLAN:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * InternetProfile:
     *
     * An internet profile (known as a 'connection profile' to users) started
     * out as a clone of a call profile (see DBAProfile in mb4prof.h) with
     * additional support for WAN features. The profile is partitioned along
     * the lines of the user interface. However, things have been fudged to try
     * to keep words on word boundaries, longs on log boundaries, etc.
     *
     *  hostName The name of the host we will be communicating with. This name
     *                                  is used as part of the authentication
     *                                  process when authentication is being
     *                                  used.
     *
     *  active A profile can be disabled by setting this field to no. There is
     *                                  no difference between an inactive
     *                                  profile and no profile at all to the
     *                                  remainder of the code.
     *
     *  mgmtType The encapsulation protocol to be used when communicating with
     *                                  the named station.
     *
     *  calledNumberType Indication of whether national number, international
     *                                  number, etc. is specified.
     *
     *  phoneNumber The phone number of the named station.
     *
     *  clid The calling line number for authentication.
     *
     *  ip IP protocol configuration options.
     *
     *  ipx IPX protocol configuration options.
     *
     *  bridge Bridging specific configuration options.
     *
     *  session Generic per session configuration options.
     *
     *  telco Telco specific configuration options.
     *
     *  ppp PPP protocol specific configuration options. These values are also
     *                                  used for the PPP variants, MP and MPP.
     *
     *  mp MP (rfc1717) protocol specific configuration options. These values
     *                                  are also used for the MP variant, MPP.
     *
     *  mpp MPP, UTT 's extension to the rfc1717 MP protocol, configuration
     *                                  options.
     *
     *  fr Frame relay protocol specific configuration options.
     *
     *  tcp TCP clear session specific configuration options.
     *
     *  ara ARA protocol specific configuration options.
     *
     *  comb Combinet bridging specific configuration options.
     *
     *  x25 B-channel X.25 specific configuration options.
     *
     *  v120 V.120 rate adaption specific configuration options.
     *
     *  eu EUNET protocol specific configuration options.
     *
     *  ans Things that only belong to the answer profile but need to be in
     *                                  every profile for historical reasons.
     *                                  Hidden, the user should never see
     *                                  these.
     *
     *  x75 X.75 specific configuration options.
     *
     *  atalk Appletalk specific configuration options.
     *
     *  usrRad User defined RADIUS Accounting fileds.
     *
     *  calledNumber The called line number for authentication.
     *
     *  dhcp DHCP configuration options
     *
     *  sharedprof Shared profile configuration options.
     *
     *  t3pos T3POS specific configuration options.
     *
     *  framedOnly A profile can be restricted to only doing the framed
     *                                  commands (ppp, mpp, slip, and quit) by
     *                                  setting this to YES
     *
     *  altPhoneNumber1 The first alternate phone number of the named station.
     *
     *  altPhoneNumber2 The second alternate phone number of the named station.
     *
     *  altPhoneNumber3 The third alternate phone number of the named station.
     *
     *  x32 X.32 specific configuration options.
     *
     *  tunnelOpts Tunnel specific configuration options.
     *
     *  priNumberingPlanID PRI Called Party element's Numbering-Plan-ID value
     *                                  for outgoing PRI calls.
     *
     *  vRouterName Specifies the VRouter in which this profile belongs.
     *
     *  atm ATM protocol specific configuration options.
     *
     *  natWan specific nat configuration options.
     */
typedef struct internetProfile {
    char                                hostName[ MAX_HOST_NAME_LENGTH + 1 ];
    Boolean                             active;
    Boolean				activeB;
    CallMgmtType                        mgmtType;
#if (( NETIF & ( T1 | E1 )) || ( PLATFORM & TNT ))
    CalledNumberType                    calledNumberType;
#endif /* (( NETIF & ( T1 | E1 )) || ( PLATFORM & TNT )) */
    char                                phoneNumber[ MAX_PHONE_NUMBER_LENGTH+1 ];
    int					trunkGroup;
#if ( MDF_CLID == FYES )
    char                                clid[ MAX_PHONE_NUMBER_LENGTH+1 ];
#endif /* ( MDF_CLID == FYES ) */
#if ( MDF_IP_ROUTE == FYES )
    IpOptions                           ip;
#endif /* ( MDF_IP_ROUTE == FYES ) */
#if ( MDF_IPX_ROUTE == FYES )
    IpxOptions                          ipx;
#endif /* ( MDF_IPX_ROUTE == FYES ) */
    BridgeOptions                       bridge;
    SesOptions                          session;
    TelcoOptions                        telco;
#if ( MDF_PPP == FYES )
    PppOptions                          ppp;
#endif /* ( MDF_PPP == FYES ) */
#if ( MDF_MPP == FYES )
    MpOptions                           mp;
#endif /* ( MDF_MPP == FYES ) */
#if ( MDF_MPP == FYES )
    MppOptions                          mpp;
#endif /* ( MDF_MPP == FYES ) */
#if ( MDF_FRAME_RELAY == FYES )
    FrOptions                           fr;
#endif /* ( MDF_FRAME_RELAY == FYES ) */
#if ( MDF_TELNET == FYES ) || ( MDF_TCP_CLEAR == FYES )
    TcpOptions                          tcp;
#endif /* ( MDF_TELNET == FYES ) || ( MDF_TCP_CLEAR == FYES ) */
#if ( MDF_ARAP == FYES )
    AraOptions                          ara;
#endif /* ( MDF_ARAP == FYES ) */
#if ( MDF_COMB == FYES )
    CombOptions                         comb;
#endif /* ( MDF_COMB == FYES ) */
#if ( MDF_X25B == FYES )
    X25Options                          x25;
#endif /* ( MDF_X25B == FYES ) */
#if ( MDF_V120 == FYES )
    V120Options                         v120;
#endif /* ( MDF_V120 == FYES ) */
#if (( MDF_EURAW == FYES ) || ( MDF_EUUI == FYES ))
    EuOptions                           eu;
#endif /* (( MDF_EURAW == FYES ) || ( MDF_EUUI == FYES )) */
    AnsOptions                          ans;
#if ( MDF_X75 == FYES )
    X75Options                          x75;
#endif /* ( MDF_X75 == FYES ) */
#if ( MDF_APPLE_ROUTE == FYES )
    AtalkOptions                        atalk;
#endif /* ( MDF_APPLE_ROUTE == FYES ) */
#if ( MDF_RADIUS_ACCT == FYES )
    UsrRadOptions                       usrRad;
#endif /* ( MDF_RADIUS_ACCT == FYES ) */
#if ( MDF_CLID == FYES )
    char                                calledNumber[ MAX_PHONE_NUMBER_LENGTH+1 ];
#endif /* ( MDF_CLID == FYES ) */
#if ( MDF_DHCP_SERVER_IMPL == FYES )
    DHCPOptions                         dhcp;
#endif /* ( MDF_DHCP_SERVER_IMPL == FYES ) */
#if ( MDF_PER_PROFILE_SHARING == FYES )
    Boolean                             sharedprof;
#endif /* ( MDF_PER_PROFILE_SHARING == FYES ) */
#if ( MDF_X25_T3POS == FYES )
    T3PosOptions                        t3pos;
#endif /* ( MDF_X25_T3POS == FYES ) */
#if (MDF_TERMSRV == FYES && MDF_ASYNC == FYES)
    Boolean                             framedOnly;
#endif /* (MDF_TERMSRV == FYES && MDF_ASYNC == FYES) */
#if ( PIPE_ALT_DIAL_NUM == FYES )
    char                                altPhoneNumber1[ MAX_PHONE_NUMBER_LENGTH+1 ];
#endif /* ( PIPE_ALT_DIAL_NUM == FYES ) */
#if (PIPE_ALT_DIAL_NUM == FYES )
    char                                altPhoneNumber2[ MAX_PHONE_NUMBER_LENGTH+1 ];
#endif /* (PIPE_ALT_DIAL_NUM == FYES ) */
#if ( PIPE_ALT_DIAL_NUM == FYES )
    char                                altPhoneNumber3[ MAX_PHONE_NUMBER_LENGTH+1 ];
#endif /* ( PIPE_ALT_DIAL_NUM == FYES ) */
#if ( MDF_X25B == FYES )
    X32Options                          x32;
#endif /* ( MDF_X25B == FYES ) */
#if ( Q_L2_TUNNEL || Q_L3_TUNNEL )
    TunnelOptions                       tunnelOpts;
#endif /* ( Q_L2_TUNNEL || Q_L3_TUNNEL ) */
#if ( ( PLATFORM & MPORT ) && ( NETIF & T1 ) )
    PriNumberingPlanID                  priNumberingPlanID;
#endif /* ( ( PLATFORM & MPORT ) && ( NETIF & T1 ) ) */
#if ( MDF_VROUTER == FYES )
    char                                vRouterName[ MAX_NAME_LEN + 1 ];
#endif /* ( MDF_VROUTER == FYES ) */
#if ( MDF_ATM == FYES )
    AtmOptions                          atm;
#endif /* ( MDF_ATM == FYES ) */
    /* add:Ast@20020411 */
    PppoeOptions			pppoe;
/* add, zhz@20030512 */
    int					natWan;
    char                      		description[MAX_PROFILE_NAME_LENGTH + 1];
/*added by jfgu@090717*/
    char				remark[MAX_REMARK_LENGTH + 1];

}
InternetProfile;

    /*
     * Function that does the same as mibFactoryInetProfile, but in a
     * format known to lots of working code.  Found in tnthelp.c for TNT.
     */
extern const InternetProfile*
buildFactoryInetProfile( void );

# if ( USERIF & CLI )
extern Boolean
frCircuitCheck( InternetProfile *prof,
		char*		message,
		Int*		messageLen );
# endif

    /*
     * Function modifies selected flags in a InternetProfile
     * (eg. mpp.mppEnabled) based on the CallMgmtType.
     */


    /*
     * for TNT, this special func must be accessible from
     * shelf and slot cards, unfortunately this .c file is
     * only linked on the shelf hence the following __inline__
     * mess...
     */
extern void
adjustForMgmtType( InternetProfile	*iProf );

#endif /* MIBINET_H */

