    /*
     * Notice: file generated by MIBMAKE from mibintunnel.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibintunnel.mdf
     */
#line 3 "mibintunnel.mdf"
/*
 * $Id: mibintunnel.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1997 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 32 "mibintunnel.mdf"

#if ! defined( MIBINTUNNEL_H )
# define MIBINTUNNEL_H

# include "mibgen.h"
# include "mibglob.h"
# include "mibatmp.h"


    /*
     * How to build the factory instance of this profile.
     */
extern ConstPtr
mibFactoryTunnelOptions( MibProfileType	mibType,
			 Uint32		info );

    /*
     * Our parameter table is made external as the profile is used
     * within other profiles.
     */
extern const MibFieldComplexParams	tunnelOptionsParams;


    /*
     * TunnelProfType:
     *
     * Tunnel profile type
     *
     *  TUNNEL_PROF_DISABLED This profile does not describe a tunnel
     *
     *  TUNNEL_PROF_MC This profile is a mobile client
     *
     *  TUNNEL_PROF_GATEWAY This profile is a gateway connection to a home
     *                                  network
     */
typedef enum TunnelProfType {
#line 87 "mibintunnel.mdf"
    TUNNEL_PROF_DISABLED = 0,
#line 90 "mibintunnel.mdf"
    TUNNEL_PROF_MC,
    TUNNEL_PROF_SERVER,     /* added by llliu@080422 */
#line 93 "mibintunnel.mdf"
#if ( PLATFORM & TNT )
    TUNNEL_PROF_GATEWAY
#endif /* ( PLATFORM & TNT ) */
} TunnelProfType;


static __inline__ Bool
validTunnelProfType (int x)
{
    switch (x) {
#line 87 "mibintunnel.mdf"
    case TUNNEL_PROF_DISABLED:
#line 90 "mibintunnel.mdf"
    case TUNNEL_PROF_MC:
#line 93 "mibintunnel.mdf"
#if ( PLATFORM & TNT )
    case TUNNEL_PROF_GATEWAY:
#endif /* ( PLATFORM & TNT ) */
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * TunnelingProtocol:
     *
     * Tunneling protocols
     *
     *  TUNNEL_PROTOCOL_NONE Tunneling disabled.
     *
     *  TUNNEL_PROTOCOL_PPTP Use PPTP (Point-to-Point Tunneling Protocol).
     *
     *  TUNNEL_PROTOCOL_L2F Use L2F (Layer 2 Forwarding).
     *
     *  TUNNEL_PROTOCOL_L2TP Use L2TP (Layer 2 Tunneling Protocol).
     *
     *  TUNNEL_PROTOCOL_ATMP Use ATMP .
     *
     *  TUNNEL_PROTOCOL_VTP Use VTP (Virtual Tunneling Protocol).
     *
     *  TUNNEL_PROTOCOL_IPINIP Use IP-in-IP encapsulation (RFC 2003).
     */
typedef enum TunnelingProtocol {
#line 124 "mibintunnel.mdf"
    TUNNEL_PROTOCOL_NONE = 0x0,
#line 127 "mibintunnel.mdf"
#if ( MDF_PPTP == FYES )
    TUNNEL_PROTOCOL_PPTP = 0x1,
#endif /* ( MDF_PPTP == FYES ) */
#line 131 "mibintunnel.mdf"
#if 0 && ( MDF_L2F == FYES )
    TUNNEL_PROTOCOL_L2F = 0x2,
#endif /* 0 && ( MDF_L2F == FYES ) */
#line 135 "mibintunnel.mdf"
#if ( MDF_L2TP == FYES )
    TUNNEL_PROTOCOL_L2TP = 0x4,
#endif /* ( MDF_L2TP == FYES ) */
#line 139 "mibintunnel.mdf"
#if ( MDF_ATMP == FYES )
    TUNNEL_PROTOCOL_ATMP = 0x8,
#endif /* ( MDF_ATMP == FYES ) */
#line 143 "mibintunnel.mdf"
#if ( MDF_VTP == FYES )
    TUNNEL_PROTOCOL_VTP = 0x10,
#endif /* ( MDF_VTP == FYES ) */
#line 147 "mibintunnel.mdf"
#if ( MDF_IPINIP == FYES )
    TUNNEL_PROTOCOL_IPINIP = 0x20,
#endif /* ( MDF_IPINIP == FYES ) */
    TUNNEL_PROTOCOL_ANY	= 0xFF
} TunnelingProtocol;


static __inline__ Bool
validTunnelingProtocol (int x)
{
    switch (x) {
#line 124 "mibintunnel.mdf"
    case TUNNEL_PROTOCOL_NONE:
#line 127 "mibintunnel.mdf"
#if ( MDF_PPTP == FYES )
    case TUNNEL_PROTOCOL_PPTP:
#endif /* ( MDF_PPTP == FYES ) */
#line 131 "mibintunnel.mdf"
#if 0 && ( MDF_L2F == FYES )
    case TUNNEL_PROTOCOL_L2F:
#endif /* 0 && ( MDF_L2F == FYES ) */
#line 135 "mibintunnel.mdf"
#if ( MDF_L2TP == FYES )
    case TUNNEL_PROTOCOL_L2TP:
#endif /* ( MDF_L2TP == FYES ) */
#line 139 "mibintunnel.mdf"
#if ( MDF_ATMP == FYES )
    case TUNNEL_PROTOCOL_ATMP:
#endif /* ( MDF_ATMP == FYES ) */
#line 143 "mibintunnel.mdf"
#if ( MDF_VTP == FYES )
    case TUNNEL_PROTOCOL_VTP:
#endif /* ( MDF_VTP == FYES ) */
#line 147 "mibintunnel.mdf"
#if ( MDF_IPINIP == FYES )
    case TUNNEL_PROTOCOL_IPINIP:
#endif /* ( MDF_IPINIP == FYES ) */
        return TRUE;
    case TUNNEL_PROTOCOL_ANY:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * AtmpRipType:
     *
     * Atmp RIP
     *
     *  ATMP_RIP_OFF Turn off RIP for ATMP HA.
     *
     *  ATMP_RIPV2_SEND Send RIPv2 to HN from ATMP HA.
     *
     *  ATMP_RIP_NONE
     */
typedef enum AtmpRipType {
#line 181 "mibintunnel.mdf"
#if ( MDF_ATMP == FYES )
    ATMP_RIP_OFF = 0,
#endif /* ( MDF_ATMP == FYES ) */
#line 185 "mibintunnel.mdf"
#if ( MDF_ATMP == FYES )
    ATMP_RIPV2_SEND = 1,
#endif /* ( MDF_ATMP == FYES ) */
#line 189 "mibintunnel.mdf"
#if ( MDF_ATMP != FYES )
    ATMP_RIP_NONE = 0
#endif /* ( MDF_ATMP != FYES ) */
} AtmpRipType;


static __inline__ Bool
validAtmpRipType (int x)
{
    switch (x) {
#line 181 "mibintunnel.mdf"
#if ( MDF_ATMP == FYES )
    case ATMP_RIP_OFF:
#endif /* ( MDF_ATMP == FYES ) */
#line 185 "mibintunnel.mdf"
#if ( MDF_ATMP == FYES )
    case ATMP_RIPV2_SEND:
#endif /* ( MDF_ATMP == FYES ) */
#line 189 "mibintunnel.mdf"
#if ( MDF_ATMP != FYES )
    case ATMP_RIP_NONE:
#endif /* ( MDF_ATMP != FYES ) */
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * TunnelOptions:
     *
     * Tunnel configuration options
     *
     *  tunnelProfType The type of connection this profile describes
     *
     *  tunnelingProtocol The protocol used for tunneling, if enabled
     *
     *  maxTunnels If this profile is a tunnel gateway, then this parameter
     *                                  specifies the maximum number of tunnels
     *                                  allowed to the home network specified
     *                                  by the name of this profile.
     *
     *  atmpRipType Allows an ATMP home agent to send routing updates to the
     *                                  home network consisting of the mobile
     *                                  nodes' addresses.
     *
     *  priTunnelServer The IP address or hostname of the primary tunnel server
     *                                  if this is a mobile client's profile.
     *
     *  secTunnelServer The IP address or hostname of the secondary tunnel
     *                                  server if this is a mobile client's
     *                                  profile.
     *
     *  udpPortHomeAgent The default UDP port to use when communicating with
     *                                  the ATMP home agent, if this is a
     *                                  mobile client's profile.
     *
     *  tunnelServerPassword The password required by the tunnel server, if
     *                                  this is a mobile client profile.
     *
     *  homeNetworkName The name of the home network if the ATMP home agent is
     *                                  operating in gateway mode. It should be
     *                                  empty if the ATMP home agent is
     *                                  operating in router mode. Used only if
     *                                  this is an ATMP mobile client's
     *                                  profile.
     *
     *  unused This field was temporarily assigned at the early stages of
     *                                  3.0/7.0 It is now unused.
     */

#if ( Q_L3_TUNNEL || Q_L2_TUNNEL )

typedef struct st_tunnelOptions {
#line 217 "mibintunnel.mdf"
    TunnelProfType                      tunnelProfType;
#line 221 "mibintunnel.mdf"
    TunnelingProtocol                   tunnelingProtocol;
#line 225 "mibintunnel.mdf"
#if ( PLATFORM & ( TNT ) )
    Uint16                              maxTunnels;
#endif /* ( PLATFORM & ( TNT ) ) */
#line 232 "mibintunnel.mdf"
#if ( MDF_ATMP == FYES )
    AtmpRipType                         atmpRipType;
#endif /* ( MDF_ATMP == FYES ) */
#line 238 "mibintunnel.mdf"
    char                                priTunnelServer[ MAX_HOST_NAME_LENGTH + 1 ];
#line 244 "mibintunnel.mdf"
    char                                secTunnelServer[ MAX_HOST_NAME_LENGTH + 1 ];
#line 250 "mibintunnel.mdf"
#if ( Q_L3_TUNNEL )
    Uint16                              udpPortHomeAgent;
#endif /* ( Q_L3_TUNNEL ) */
#line 256 "mibintunnel.mdf"
    char                                tunnelServerPassword[ MAX_PASSWORD_LENGTH + 1 ];
#line 262 "mibintunnel.mdf"
#if ( Q_L3_TUNNEL )
    char                                homeNetworkName[ MAX_HOST_NAME_LENGTH + 1 ];
#endif /* ( Q_L3_TUNNEL ) */
#line 269 "mibintunnel.mdf"
#if ( 0 )
    char                                unused[ MAX_HOST_NAME_LENGTH + 1 ];
#endif /* ( 0 ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
TunnelOptions;

#endif /* ( Q_L3_TUNNEL || Q_L2_TUNNEL ) */
#line 459 "mibintunnel.mdf"

#endif /* MIBINTUNNEL_H */

