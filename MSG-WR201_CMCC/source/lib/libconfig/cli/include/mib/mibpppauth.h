    /*
     * Notice: file generated by MIBMAKE from mibpppauth.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibpppauth.mdf
     */
#line 3 "mibpppauth.mdf"
/*
 * SCCS ID: $Id: mibpppauth.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1996 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

    /*
     * Define the enumerated type PppAuthMode and it's CLI lookup
     * tables.
     */
#line 29 "mibpppauth.mdf"

#if ! defined( MIBPPPAUTH_H )
#define MIBPPPAUTH_H

#include "mibgen.h"

#if ( USERIF & CLI )

extern const MibFieldEnumParams	pppAuthModeParams;

extern const MibFieldEnumParams	pppSendAuthModeParams;

#endif /* ( USERIF & CLI ) */


    /*
     * PppAuthMode:
     *
     * PPP authentication types:
     *
     *  PPP_AUTH_NONE No authentication for PPP (or MP, or MPP).
     *
     *  PPP_AUTH_PAP Must use Password Authentication Protocol. Password is
     *                                  sent in the clear.
     *
     *  PPP_AUTH_CHAP Must use Challenge Handshake Protocol. Password is not
     *                                  sent in the clear. An MD5 digest
     *                                  calculated from the password and a
     *                                  random challenge is sent instead.
     *
     *  PPP_AUTH_ANY May user either PAP, CHAP or, MS-CHAP but one must be
     *                                  used.
     *
     *  PPP_AUTH_PAP_DES Must use PAP with dynamic passwords: One-time DES
     *                                  password encryption w/challenge in
     *                                  Pipeline
     *
     *  PPP_AUTH_PAP_TOKEN One-time DES password encryption w/challenge in
     *                                  token.
     *
     *  PPP_AUTH_PAP_TOKEN_CHAP PAP_TOKEN for 1st call of MPP session, CHAP for
     *                                  the rest.
     *
     *  PPP_AUTH_CHAP_CACHE_TOKEN Must use CHAP with dynamic passwords: CHAP
     *                                  with challenges, but cache token
     *                                  responses
     *
     *  PPP_AUTH_MS_CHAP Must use Microsoft's extension of CHAP, designed
     *                                  mostly for Win NT/Lan Manager
     *                                  platforms. For more details see -
     *                                  ftp://ftp.microsoft.com/DEVELOPR/RFC/chapexts.txt
     */
typedef enum PppAuthMode {
#line 58 "mibpppauth.mdf"
    PPP_AUTH_NONE,
#line 61 "mibpppauth.mdf"
    PPP_AUTH_PAP,
#line 65 "mibpppauth.mdf"
    PPP_AUTH_CHAP,
#line 70 "mibpppauth.mdf"
    PPP_AUTH_ANY,
#line 73 "mibpppauth.mdf"
    PPP_AUTH_PAP_DES,
#line 77 "mibpppauth.mdf"
    PPP_AUTH_PAP_TOKEN,
#line 80 "mibpppauth.mdf"
    PPP_AUTH_PAP_TOKEN_CHAP,
#line 83 "mibpppauth.mdf"
    PPP_AUTH_CHAP_CACHE_TOKEN,
#line 87 "mibpppauth.mdf"
    PPP_AUTH_MS_CHAP,
    PPP_AUTH_MS_CHAPV2
} PppAuthMode;


static __inline__ Bool
validPppAuthMode (int x)
{
    switch (x) {
#line 58 "mibpppauth.mdf"
    case PPP_AUTH_NONE:
#line 61 "mibpppauth.mdf"
    case PPP_AUTH_PAP:
#line 65 "mibpppauth.mdf"
    case PPP_AUTH_CHAP:
#line 70 "mibpppauth.mdf"
    case PPP_AUTH_ANY:
#line 73 "mibpppauth.mdf"
    case PPP_AUTH_PAP_DES:
#line 77 "mibpppauth.mdf"
    case PPP_AUTH_PAP_TOKEN:
#line 80 "mibpppauth.mdf"
    case PPP_AUTH_PAP_TOKEN_CHAP:
#line 83 "mibpppauth.mdf"
    case PPP_AUTH_CHAP_CACHE_TOKEN:
#line 87 "mibpppauth.mdf"
    case PPP_AUTH_MS_CHAP:
    case PPP_AUTH_MS_CHAPV2:
     return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * PppSendAuthMode:
     *
     * PPP send authentication types - MUST match PPP auth type values:
     *
     *  PPP_AUTH_SEND_NONE No authentication for PPP (or MP, or MPP).
     *
     *  PPP_AUTH_SEND_PAP Must use Password Authentication Protocol. Password
     *                                  is sent in the clear.
     *
     *  PPP_AUTH_SEND_CHAP Must use Challenge Handshake Protocol. Password is
     *                                  not sent in the clear. An MD5 digest
     *                                  calculated from the password and a
     *                                  random challenge is sent instead.
     *
     *  PPP_AUTH_SEND_MS_CHAP Must use Microsoft's extension of CHAP, designed
     *                                  mostly for Win NT/Lan Manager
     *                                  platforms. For more details see -
     *                                  ftp://ftp.microsoft.com/DEVELOPR/RFC/chapexts.txt
     */
typedef enum PppSendAuthMode {
#line 98 "mibpppauth.mdf"
    PPP_AUTH_SEND_NONE = 0,
#line 101 "mibpppauth.mdf"
    PPP_AUTH_SEND_PAP = 1,
#line 105 "mibpppauth.mdf"
    PPP_AUTH_SEND_CHAP = 2,
#line 110 "mibpppauth.mdf"
    PPP_AUTH_SEND_MS_CHAP = 8,
    PPP_AUTH_SEND_MS_CHAPV2 = 9

} PppSendAuthMode;


static __inline__ Bool
validPppSendAuthMode (int x)
{
    switch (x) {
#line 98 "mibpppauth.mdf"
    case PPP_AUTH_SEND_NONE:
#line 101 "mibpppauth.mdf"
    case PPP_AUTH_SEND_PAP:
#line 105 "mibpppauth.mdf"
    case PPP_AUTH_SEND_CHAP:
#line 110 "mibpppauth.mdf"
    case PPP_AUTH_SEND_MS_CHAP:
    case PPP_AUTH_SEND_MS_CHAPV2:
        return TRUE;
    default:
        return FALSE;
    }
}
#line 135 "mibpppauth.mdf"

#endif /* MIBPPPAUTH_H */

