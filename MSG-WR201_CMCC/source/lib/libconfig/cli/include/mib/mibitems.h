    /*
     * Notice: file generated by MIBMAKE from mibitems.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibitems.mdf
     */
/*
 * $Id: mibitems.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1996 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */


#if ! defined( MIBITEMS_H )
#define MIBITEMS_H

    /*
     * This file contains the items for the different cards in the tnt system.
     */

extern const MibFieldEnumParams		shelfRouterItemListParams;

extern const MibFieldEnumParams		t1CardItemListParams;

extern const MibFieldEnumParams		e1CardItemListParams;

extern const MibFieldEnumParams		modemCardItemListParams;

extern const MibFieldEnumParams		maddModemCardItemListParams;

extern const MibFieldEnumParams		analogModemCardItemListParams;

extern const MibFieldEnumParams		hdlcCardItemListParams;

extern const MibFieldEnumParams		etherCardItemListParams;

extern const MibFieldEnumParams		swanCardItemListParams;

extern const MibFieldEnumParams		sdslCardItemListParams;

extern const MibFieldEnumParams		cadslCardItemListParams;

extern const MibFieldEnumParams		dadslCardItemListParams;

extern const MibFieldEnumParams		hssiCardItemListParams;

extern const MibFieldEnumParams		t3CardItemListParams;

extern const MibFieldEnumParams		unchanT1CardItemListParams;

extern const MibFieldEnumParams		unchanE1CardItemListParams;

extern const MibFieldEnumParams		uds3CardItemListParams;

extern const MibFieldEnumParams		ds3AtmCardItemListParams;

extern const MibFieldEnumParams		sdsl70CardItemListParams;


    /*
     * ShelfRouterItemList:
     *
     * The card-wide list of addressable physical devices on the shelf-router
     *
     *  SR_SHELF_ROUTER The shelf-router card as a whole.
     *
     *  SR_EXTERNAL_ENET The external ethernet interface.
     *
     *  SR_UART The serial port.
     *
     *  SR_NUM_ITEMS Add additional items above this one.
     */
typedef enum ShelfRouterItemList {
    SR_SHELF_ROUTER,
    SR_EXTERNAL_ENET,
    SR_UART,
    SR_NUM_ITEMS
} ShelfRouterItemList;


static __inline__ Bool
validShelfRouterItemList (int x)
{
    switch (x) {
    case SR_SHELF_ROUTER:
    case SR_EXTERNAL_ENET:
    case SR_UART:
    case SR_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * T1CardItemList:
     *
     * The card-wide list of addressable physical devices on the T1 card.
     *
     *  T1_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  T1_LINE_1 The T1 card supports up to 8 T1 lines
     *
     *  T1_LINE_2
     *
     *  T1_LINE_3
     *
     *  T1_LINE_4
     *
     *  T1_LINE_5
     *
     *  T1_LINE_6
     *
     *  T1_LINE_7
     *
     *  T1_LINE_8
     *
     *  T1_UART The debug serial port.
     *
     *  T1_NUM_ITEMS Total number of items on the card
     */
typedef enum T1CardItemList {
    T1_SLOT_CARD = 0,
    T1_LINE_1,
    T1_LINE_2,
    T1_LINE_3,
    T1_LINE_4,
    T1_LINE_5,
    T1_LINE_6,
    T1_LINE_7,
    T1_LINE_8,
    T1_UART,
    T1_NUM_ITEMS
} T1CardItemList;


static __inline__ Bool
validT1CardItemList (int x)
{
    switch (x) {
    case T1_SLOT_CARD:
    case T1_LINE_1:
    case T1_LINE_2:
    case T1_LINE_3:
    case T1_LINE_4:
    case T1_LINE_5:
    case T1_LINE_6:
    case T1_LINE_7:
    case T1_LINE_8:
    case T1_UART:
    case T1_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * E1CardItemList:
     *
     * The card-wide list of addressable physical devices on the E1 card.
     *
     *  E1_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  E1_LINE_1 The E1 card supports up to 8 E1 lines
     *
     *  E1_LINE_2
     *
     *  E1_LINE_3
     *
     *  E1_LINE_4
     *
     *  E1_LINE_5
     *
     *  E1_LINE_6
     *
     *  E1_LINE_7
     *
     *  E1_LINE_8
     *
     *  E1_UART The debug serial port.
     *
     *  E1_NUM_ITEMS Total number of items on the card
     */
typedef enum E1CardItemList {
    E1_SLOT_CARD = 0,
    E1_LINE_1,
    E1_LINE_2,
    E1_LINE_3,
    E1_LINE_4,
    E1_LINE_5,
    E1_LINE_6,
    E1_LINE_7,
    E1_LINE_8,
    E1_UART,
    E1_NUM_ITEMS
} E1CardItemList;


static __inline__ Bool
validE1CardItemList (int x)
{
    switch (x) {
    case E1_SLOT_CARD:
    case E1_LINE_1:
    case E1_LINE_2:
    case E1_LINE_3:
    case E1_LINE_4:
    case E1_LINE_5:
    case E1_LINE_6:
    case E1_LINE_7:
    case E1_UART:
    case E1_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * ModemCardItemList:
     *
     * The card-wide list of addressable physical devices on the modem card.
     *
     *  MODEM_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  MODEM_1 The modem card supports 48 modems
     *
     *  MODEM_2
     *
     *  MODEM_3
     *
     *  MODEM_4
     *
     *  MODEM_5
     *
     *  MODEM_6
     *
     *  MODEM_7
     *
     *  MODEM_8
     *
     *  MODEM_9
     *
     *  MODEM_10
     *
     *  MODEM_11
     *
     *  MODEM_12
     *
     *  MODEM_13
     *
     *  MODEM_14
     *
     *  MODEM_15
     *
     *  MODEM_16
     *
     *  MODEM_17
     *
     *  MODEM_18
     *
     *  MODEM_19
     *
     *  MODEM_20
     *
     *  MODEM_21
     *
     *  MODEM_22
     *
     *  MODEM_23
     *
     *  MODEM_24
     *
     *  MODEM_25
     *
     *  MODEM_26
     *
     *  MODEM_27
     *
     *  MODEM_28
     *
     *  MODEM_29
     *
     *  MODEM_30
     *
     *  MODEM_31
     *
     *  MODEM_32
     *
     *  MODEM_33
     *
     *  MODEM_34
     *
     *  MODEM_35
     *
     *  MODEM_36
     *
     *  MODEM_37
     *
     *  MODEM_38
     *
     *  MODEM_39
     *
     *  MODEM_40
     *
     *  MODEM_41
     *
     *  MODEM_42
     *
     *  MODEM_43
     *
     *  MODEM_44
     *
     *  MODEM_45
     *
     *  MODEM_46
     *
     *  MODEM_47
     *
     *  MODEM_48
     *
     *  MODEM_UART The debug serial port.
     *
     *  MODEM_NUM_ITEMS Total number of items on the card
     */
typedef enum ModemCardItemList {
    MODEM_SLOT_CARD = 0,
    MODEM_1,
    MODEM_2,
    MODEM_3,
    MODEM_4,
    MODEM_5,
    MODEM_6,
    MODEM_7,
    MODEM_8,
    MODEM_9,
    MODEM_10,
    MODEM_11,
    MODEM_12,
    MODEM_13,
    MODEM_14,
    MODEM_15,
    MODEM_16,
    MODEM_17,
    MODEM_18,
    MODEM_19,
    MODEM_20,
    MODEM_21,
    MODEM_22,
    MODEM_23,
    MODEM_24,
    MODEM_25,
    MODEM_26,
    MODEM_27,
    MODEM_28,
    MODEM_29,
    MODEM_30,
    MODEM_31,
    MODEM_32,
    MODEM_33,
    MODEM_34,
    MODEM_35,
    MODEM_36,
    MODEM_37,
    MODEM_38,
    MODEM_39,
    MODEM_40,
    MODEM_41,
    MODEM_42,
    MODEM_43,
    MODEM_44,
    MODEM_45,
    MODEM_46,
    MODEM_47,
    MODEM_48,
    MODEM_UART,
    MODEM_NUM_ITEMS
} ModemCardItemList;


static __inline__ Bool
validModemCardItemList (int x)
{
    switch (x) {
    case MODEM_SLOT_CARD:
    case MODEM_1:
    case MODEM_2:
    case MODEM_3:
    case MODEM_4:
    case MODEM_5:
    case MODEM_6:
    case MODEM_7:
    case MODEM_8:
    case MODEM_9:
    case MODEM_10:
    case MODEM_11:
    case MODEM_12:
    case MODEM_13:
    case MODEM_14:
    case MODEM_15:
    case MODEM_16:
    case MODEM_17:
    case MODEM_18:
    case MODEM_19:
    case MODEM_20:
    case MODEM_21:
    case MODEM_22:
    case MODEM_23:
    case MODEM_24:
    case MODEM_25:
    case MODEM_26:
    case MODEM_27:
    case MODEM_28:
    case MODEM_29:
    case MODEM_30:
    case MODEM_31:
    case MODEM_32:
    case MODEM_33:
    case MODEM_34:
    case MODEM_35:
    case MODEM_36:
    case MODEM_37:
    case MODEM_38:
    case MODEM_39:
    case MODEM_40:
    case MODEM_41:
    case MODEM_42:
    case MODEM_43:
    case MODEM_44:
    case MODEM_45:
    case MODEM_46:
    case MODEM_47:
    case MODEM_48:
    case MODEM_UART:
    case MODEM_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * AnalogModemCardItemList:
     *
     * The card-wide list of addressable physical devices on the analog modem
     * card.
     *
     *  ANALOG_MODEM_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  ANALOG_MODEM_1 The analog modem card supports 36 modems
     *
     *  ANALOG_MODEM_2
     *
     *  ANALOG_MODEM_3
     *
     *  ANALOG_MODEM_4
     *
     *  ANALOG_MODEM_5
     *
     *  ANALOG_MODEM_6
     *
     *  ANALOG_MODEM_7
     *
     *  ANALOG_MODEM_8
     *
     *  ANALOG_MODEM_9
     *
     *  ANALOG_MODEM_10
     *
     *  ANALOG_MODEM_11
     *
     *  ANALOG_MODEM_12
     *
     *  ANALOG_MODEM_13
     *
     *  ANALOG_MODEM_14
     *
     *  ANALOG_MODEM_15
     *
     *  ANALOG_MODEM_16
     *
     *  ANALOG_MODEM_17
     *
     *  ANALOG_MODEM_18
     *
     *  ANALOG_MODEM_19
     *
     *  ANALOG_MODEM_20
     *
     *  ANALOG_MODEM_21
     *
     *  ANALOG_MODEM_22
     *
     *  ANALOG_MODEM_23
     *
     *  ANALOG_MODEM_24
     *
     *  ANALOG_MODEM_25
     *
     *  ANALOG_MODEM_26
     *
     *  ANALOG_MODEM_27
     *
     *  ANALOG_MODEM_28
     *
     *  ANALOG_MODEM_29
     *
     *  ANALOG_MODEM_30
     *
     *  ANALOG_MODEM_31
     *
     *  ANALOG_MODEM_32
     *
     *  ANALOG_MODEM_33
     *
     *  ANALOG_MODEM_34
     *
     *  ANALOG_MODEM_35
     *
     *  ANALOG_MODEM_36
     *
     *  ANALOG_MODEM_UART The debug serial port.
     *
     *  ANALOG_MODEM_NUM_ITEMS Total number of items on the card
     */
typedef enum AnalogModemCardItemList {
    ANALOG_MODEM_SLOT_CARD = 0,
    ANALOG_MODEM_1,
    ANALOG_MODEM_2,
    ANALOG_MODEM_3,
    ANALOG_MODEM_4,
    ANALOG_MODEM_5,
    ANALOG_MODEM_6,
    ANALOG_MODEM_7,
    ANALOG_MODEM_8,
    ANALOG_MODEM_9,
    ANALOG_MODEM_10,
    ANALOG_MODEM_11,
    ANALOG_MODEM_12,
    ANALOG_MODEM_13,
    ANALOG_MODEM_14,
    ANALOG_MODEM_15,
    ANALOG_MODEM_16,
    ANALOG_MODEM_17,
    ANALOG_MODEM_18,
    ANALOG_MODEM_19,
    ANALOG_MODEM_20,
    ANALOG_MODEM_21,
    ANALOG_MODEM_22,
    ANALOG_MODEM_23,
    ANALOG_MODEM_24,
    ANALOG_MODEM_25,
    ANALOG_MODEM_26,
    ANALOG_MODEM_27,
    ANALOG_MODEM_28,
    ANALOG_MODEM_29,
    ANALOG_MODEM_30,
    ANALOG_MODEM_31,
    ANALOG_MODEM_32,
    ANALOG_MODEM_33,
    ANALOG_MODEM_34,
    ANALOG_MODEM_35,
    ANALOG_MODEM_36,
    ANALOG_MODEM_UART,
    ANALOG_MODEM_NUM_ITEMS
} AnalogModemCardItemList;


static __inline__ Bool
validAnalogModemCardItemList (int x)
{
    switch (x) {
    case ANALOG_MODEM_SLOT_CARD:
    case ANALOG_MODEM_1:
    case ANALOG_MODEM_2:
    case ANALOG_MODEM_3:
    case ANALOG_MODEM_4:
    case ANALOG_MODEM_5:
    case ANALOG_MODEM_6:
    case ANALOG_MODEM_7:
    case ANALOG_MODEM_8:
    case ANALOG_MODEM_9:
    case ANALOG_MODEM_10:
    case ANALOG_MODEM_11:
    case ANALOG_MODEM_12:
    case ANALOG_MODEM_13:
    case ANALOG_MODEM_14:
    case ANALOG_MODEM_15:
    case ANALOG_MODEM_16:
    case ANALOG_MODEM_17:
    case ANALOG_MODEM_18:
    case ANALOG_MODEM_19:
    case ANALOG_MODEM_20:
    case ANALOG_MODEM_21:
    case ANALOG_MODEM_22:
    case ANALOG_MODEM_23:
    case ANALOG_MODEM_24:
    case ANALOG_MODEM_25:
    case ANALOG_MODEM_26:
    case ANALOG_MODEM_27:
    case ANALOG_MODEM_28:
    case ANALOG_MODEM_29:
    case ANALOG_MODEM_30:
    case ANALOG_MODEM_31:
    case ANALOG_MODEM_32:
    case ANALOG_MODEM_33:
    case ANALOG_MODEM_34:
    case ANALOG_MODEM_35:
    case ANALOG_MODEM_36:
    case ANALOG_MODEM_UART:
    case ANALOG_MODEM_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * MaddModemCardItemList:
     *
     * The card-wide list of addressable physical devices on the madd card.
     *
     *  MADD_MODEM_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  MADD_MODEM_1 The madd card supports 96 modems
     *
     *  MADD_MODEM_2
     *
     *  MADD_MODEM_3
     *
     *  MADD_MODEM_4
     *
     *  MADD_MODEM_5
     *
     *  MADD_MODEM_6
     *
     *  MADD_MODEM_7
     *
     *  MADD_MODEM_8
     *
     *  MADD_MODEM_9
     *
     *  MADD_MODEM_10
     *
     *  MADD_MODEM_11
     *
     *  MADD_MODEM_12
     *
     *  MADD_MODEM_13
     *
     *  MADD_MODEM_14
     *
     *  MADD_MODEM_15
     *
     *  MADD_MODEM_16
     *
     *  MADD_MODEM_17
     *
     *  MADD_MODEM_18
     *
     *  MADD_MODEM_19
     *
     *  MADD_MODEM_20
     *
     *  MADD_MODEM_21
     *
     *  MADD_MODEM_22
     *
     *  MADD_MODEM_23
     *
     *  MADD_MODEM_24
     *
     *  MADD_MODEM_25
     *
     *  MADD_MODEM_26
     *
     *  MADD_MODEM_27
     *
     *  MADD_MODEM_28
     *
     *  MADD_MODEM_29
     *
     *  MADD_MODEM_30
     *
     *  MADD_MODEM_31
     *
     *  MADD_MODEM_32
     *
     *  MADD_MODEM_33
     *
     *  MADD_MODEM_34
     *
     *  MADD_MODEM_35
     *
     *  MADD_MODEM_36
     *
     *  MADD_MODEM_37
     *
     *  MADD_MODEM_38
     *
     *  MADD_MODEM_39
     *
     *  MADD_MODEM_40
     *
     *  MADD_MODEM_41
     *
     *  MADD_MODEM_42
     *
     *  MADD_MODEM_43
     *
     *  MADD_MODEM_44
     *
     *  MADD_MODEM_45
     *
     *  MADD_MODEM_46
     *
     *  MADD_MODEM_47
     *
     *  MADD_MODEM_48
     *
     *  MADD_MODEM_49
     *
     *  MADD_MODEM_50
     *
     *  MADD_MODEM_51
     *
     *  MADD_MODEM_52
     *
     *  MADD_MODEM_53
     *
     *  MADD_MODEM_54
     *
     *  MADD_MODEM_55
     *
     *  MADD_MODEM_56
     *
     *  MADD_MODEM_57
     *
     *  MADD_MODEM_58
     *
     *  MADD_MODEM_59
     *
     *  MADD_MODEM_60
     *
     *  MADD_MODEM_61
     *
     *  MADD_MODEM_62
     *
     *  MADD_MODEM_63
     *
     *  MADD_MODEM_64
     *
     *  MADD_MODEM_65
     *
     *  MADD_MODEM_66
     *
     *  MADD_MODEM_67
     *
     *  MADD_MODEM_68
     *
     *  MADD_MODEM_69
     *
     *  MADD_MODEM_70
     *
     *  MADD_MODEM_71
     *
     *  MADD_MODEM_72
     *
     *  MADD_MODEM_73
     *
     *  MADD_MODEM_74
     *
     *  MADD_MODEM_75
     *
     *  MADD_MODEM_76
     *
     *  MADD_MODEM_77
     *
     *  MADD_MODEM_78
     *
     *  MADD_MODEM_79
     *
     *  MADD_MODEM_80
     *
     *  MADD_MODEM_81
     *
     *  MADD_MODEM_82
     *
     *  MADD_MODEM_83
     *
     *  MADD_MODEM_84
     *
     *  MADD_MODEM_85
     *
     *  MADD_MODEM_86
     *
     *  MADD_MODEM_87
     *
     *  MADD_MODEM_88
     *
     *  MADD_MODEM_89
     *
     *  MADD_MODEM_90
     *
     *  MADD_MODEM_91
     *
     *  MADD_MODEM_92
     *
     *  MADD_MODEM_93
     *
     *  MADD_MODEM_94
     *
     *  MADD_MODEM_95
     *
     *  MADD_MODEM_96
     *
     *  MADD_MODEM_UART The debug serial port.
     *
     *  MADD_MODEM_NUM_ITEMS Total number of items on the card
     */
typedef enum MaddModemCardItemList {
    MADD_MODEM_SLOT_CARD = 0,
    MADD_MODEM_1,
    MADD_MODEM_2,
    MADD_MODEM_3,
    MADD_MODEM_4,
    MADD_MODEM_5,
    MADD_MODEM_6,
    MADD_MODEM_7,
    MADD_MODEM_8,
    MADD_MODEM_9,
    MADD_MODEM_10,
    MADD_MODEM_11,
    MADD_MODEM_12,
    MADD_MODEM_13,
    MADD_MODEM_14,
    MADD_MODEM_15,
    MADD_MODEM_16,
    MADD_MODEM_17,
    MADD_MODEM_18,
    MADD_MODEM_19,
    MADD_MODEM_20,
    MADD_MODEM_21,
    MADD_MODEM_22,
    MADD_MODEM_23,
    MADD_MODEM_24,
    MADD_MODEM_25,
    MADD_MODEM_26,
    MADD_MODEM_27,
    MADD_MODEM_28,
    MADD_MODEM_29,
    MADD_MODEM_30,
    MADD_MODEM_31,
    MADD_MODEM_32,
    MADD_MODEM_33,
    MADD_MODEM_34,
    MADD_MODEM_35,
    MADD_MODEM_36,
    MADD_MODEM_37,
    MADD_MODEM_38,
    MADD_MODEM_39,
    MADD_MODEM_40,
    MADD_MODEM_41,
    MADD_MODEM_42,
    MADD_MODEM_43,
    MADD_MODEM_44,
    MADD_MODEM_45,
    MADD_MODEM_46,
    MADD_MODEM_47,
    MADD_MODEM_48,
    MADD_MODEM_49,
    MADD_MODEM_50,
    MADD_MODEM_51,
    MADD_MODEM_52,
    MADD_MODEM_53,
    MADD_MODEM_54,
    MADD_MODEM_55,
    MADD_MODEM_56,
    MADD_MODEM_57,
    MADD_MODEM_58,
    MADD_MODEM_59,
    MADD_MODEM_60,
    MADD_MODEM_61,
    MADD_MODEM_62,
    MADD_MODEM_63,
    MADD_MODEM_64,
    MADD_MODEM_65,
    MADD_MODEM_66,
    MADD_MODEM_67,
    MADD_MODEM_68,
    MADD_MODEM_69,
    MADD_MODEM_70,
    MADD_MODEM_71,
    MADD_MODEM_72,
    MADD_MODEM_73,
    MADD_MODEM_74,
    MADD_MODEM_75,
    MADD_MODEM_76,
    MADD_MODEM_77,
    MADD_MODEM_78,
    MADD_MODEM_79,
    MADD_MODEM_80,
    MADD_MODEM_81,
    MADD_MODEM_82,
    MADD_MODEM_83,
    MADD_MODEM_84,
    MADD_MODEM_85,
    MADD_MODEM_86,
    MADD_MODEM_87,
    MADD_MODEM_88,
    MADD_MODEM_89,
    MADD_MODEM_90,
    MADD_MODEM_91,
    MADD_MODEM_92,
    MADD_MODEM_93,
    MADD_MODEM_94,
    MADD_MODEM_95,
    MADD_MODEM_96,
    MADD_MODEM_UART,
    MADD_MODEM_NUM_ITEMS
} MaddModemCardItemList;


static __inline__ Bool
validMaddModemCardItemList (int x)
{
    switch (x) {
    case MADD_MODEM_SLOT_CARD:
    case MADD_MODEM_1:
    case MADD_MODEM_2:
    case MADD_MODEM_3:
    case MADD_MODEM_4:
    case MADD_MODEM_5:
    case MADD_MODEM_6:
    case MADD_MODEM_7:
    case MADD_MODEM_8:
    case MADD_MODEM_9:
    case MADD_MODEM_10:
    case MADD_MODEM_11:
    case MADD_MODEM_12:
    case MADD_MODEM_13:
    case MADD_MODEM_14:
    case MADD_MODEM_15:
    case MADD_MODEM_16:
    case MADD_MODEM_17:
    case MADD_MODEM_18:
    case MADD_MODEM_19:
    case MADD_MODEM_20:
    case MADD_MODEM_21:
    case MADD_MODEM_22:
    case MADD_MODEM_23:
    case MADD_MODEM_24:
    case MADD_MODEM_25:
    case MADD_MODEM_26:
    case MADD_MODEM_27:
    case MADD_MODEM_28:
    case MADD_MODEM_29:
    case MADD_MODEM_30:
    case MADD_MODEM_31:
    case MADD_MODEM_32:
    case MADD_MODEM_33:
    case MADD_MODEM_34:
    case MADD_MODEM_35:
    case MADD_MODEM_36:
    case MADD_MODEM_37:
    case MADD_MODEM_38:
    case MADD_MODEM_39:
    case MADD_MODEM_40:
    case MADD_MODEM_41:
    case MADD_MODEM_42:
    case MADD_MODEM_43:
    case MADD_MODEM_44:
    case MADD_MODEM_45:
    case MADD_MODEM_46:
    case MADD_MODEM_47:
    case MADD_MODEM_48:
    case MADD_MODEM_49:
    case MADD_MODEM_50:
    case MADD_MODEM_51:
    case MADD_MODEM_52:
    case MADD_MODEM_53:
    case MADD_MODEM_54:
    case MADD_MODEM_55:
    case MADD_MODEM_56:
    case MADD_MODEM_57:
    case MADD_MODEM_58:
    case MADD_MODEM_59:
    case MADD_MODEM_60:
    case MADD_MODEM_61:
    case MADD_MODEM_62:
    case MADD_MODEM_63:
    case MADD_MODEM_64:
    case MADD_MODEM_65:
    case MADD_MODEM_66:
    case MADD_MODEM_67:
    case MADD_MODEM_68:
    case MADD_MODEM_69:
    case MADD_MODEM_70:
    case MADD_MODEM_71:
    case MADD_MODEM_72:
    case MADD_MODEM_73:
    case MADD_MODEM_74:
    case MADD_MODEM_75:
    case MADD_MODEM_76:
    case MADD_MODEM_77:
    case MADD_MODEM_78:
    case MADD_MODEM_79:
    case MADD_MODEM_80:
    case MADD_MODEM_81:
    case MADD_MODEM_82:
    case MADD_MODEM_83:
    case MADD_MODEM_84:
    case MADD_MODEM_85:
    case MADD_MODEM_86:
    case MADD_MODEM_87:
    case MADD_MODEM_88:
    case MADD_MODEM_89:
    case MADD_MODEM_90:
    case MADD_MODEM_91:
    case MADD_MODEM_92:
    case MADD_MODEM_93:
    case MADD_MODEM_94:
    case MADD_MODEM_95:
    case MADD_MODEM_96:
    case MADD_MODEM_UART:
    case MADD_MODEM_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * HdlcCardItemList:
     *
     * The card-wide list of addressable physical devices on the HDLC card.
     *
     *  HDLC_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  HDLC_1 The HDLC card supports 6 32-channel controllers
     *
     *  HDLC_2
     *
     *  HDLC_3
     *
     *  HDLC_4
     *
     *  HDLC_5
     *
     *  HDLC_6
     *
     *  HDLC_VIRTUAL_ITEM
     *
     *  HDLC_UART The debug serial port.
     *
     *  HDLC_NUM_ITEMS Total number of items on the card
     */
typedef enum HdlcCardItemList {
    HDLC_SLOT_CARD = 0,
    HDLC_1,
    HDLC_2,
    HDLC_3,
    HDLC_4,
    HDLC_5,
    HDLC_6,
    HDLC_VIRTUAL_ITEM,
    HDLC_UART,
    HDLC_NUM_ITEMS
} HdlcCardItemList;


static __inline__ Bool
validHdlcCardItemList (int x)
{
    switch (x) {
    case HDLC_SLOT_CARD:
    case HDLC_1:
    case HDLC_2:
    case HDLC_3:
    case HDLC_4:
    case HDLC_5:
    case HDLC_6:
    case HDLC_VIRTUAL_ITEM:
    case HDLC_UART:
    case HDLC_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * EtherCardItemList:
     *
     * The card-wide list of addressable physical devices on the Ethernet card.
     *
     *  ETHER_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  ETHER_1 The ethernet card supports 4 10BaseT Ethernet ports
     *
     *  ETHER_2
     *
     *  ETHER_3
     *
     *  ETHER_4
     *
     *  ETHER_5 100 Base-T daughter board
     *
     *  ETHER_UART The debug serial port.
     *
     *  ETHER_NUM_ITEMS Total number of items on the card
     */
typedef enum EtherCardItemList {
    ETHER_SLOT_CARD = 0,
    ETHER_1,
    ETHER_2,
    ETHER_3,
    ETHER_4,
    ETHER_5,
    ETHER_UART,
    ETHER_NUM_ITEMS
} EtherCardItemList;


static __inline__ Bool
validEtherCardItemList (int x)
{
    switch (x) {
    case ETHER_SLOT_CARD:
    case ETHER_1:
    case ETHER_2:
    case ETHER_3:
    case ETHER_4:
    case ETHER_5:
    case ETHER_UART:
    case ETHER_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * HssiCardItemList:
     *
     * The card-wide list of addressable physical devices on the HSSI card.
     *
     *  HSSI_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  HSSI_1 The hssi card supports one High Speed Serial Interface port
     *
     *  HSSI_UART The debug serial port.
     *
     *  HSSI_NUM_ITEMS Total number of items on the card
     */
typedef enum HssiCardItemList {
    HSSI_SLOT_CARD = 0,
    HSSI_1,
    HSSI_UART,
    HSSI_NUM_ITEMS
} HssiCardItemList;


static __inline__ Bool
validHssiCardItemList (int x)
{
    switch (x) {
    case HSSI_SLOT_CARD:
    case HSSI_1:
    case HSSI_UART:
    case HSSI_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * T3CardItemList:
     *
     * The card-wide list of addressable physical devices on the T3 card.
     *
     *  T3_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  T3_LINE_1 The T3 card supports up to 28 logical T1 lines
     *
     *  T3_LINE_2
     *
     *  T3_LINE_3
     *
     *  T3_LINE_4
     *
     *  T3_LINE_5
     *
     *  T3_LINE_6
     *
     *  T3_LINE_7
     *
     *  T3_LINE_8
     *
     *  T3_LINE_9
     *
     *  T3_LINE_10
     *
     *  T3_LINE_11
     *
     *  T3_LINE_12
     *
     *  T3_LINE_13
     *
     *  T3_LINE_14
     *
     *  T3_LINE_15
     *
     *  T3_LINE_16
     *
     *  T3_LINE_17
     *
     *  T3_LINE_18
     *
     *  T3_LINE_19
     *
     *  T3_LINE_20
     *
     *  T3_LINE_21
     *
     *  T3_LINE_22
     *
     *  T3_LINE_23
     *
     *  T3_LINE_24
     *
     *  T3_LINE_25
     *
     *  T3_LINE_26
     *
     *  T3_LINE_27
     *
     *  T3_LINE_28
     *
     *  T3_DSP0_SPORT1 The T3 card supports 4 DSP SPORTs. These entries are
     *                                  used for internal TDM addressing.
     *
     *  T3_DSP0_SPORT0
     *
     *  T3_DSP1_SPORT1
     *
     *  T3_DSP1_SPORT0
     *
     *  T3_UART The debug serial port.
     *
     *  T3_NUM_ITEMS Total number of items on the card
     */
typedef enum T3CardItemList {
    T3_SLOT_CARD = 0,
    T3_LINE_1,
    T3_LINE_2,
    T3_LINE_3,
    T3_LINE_4,
    T3_LINE_5,
    T3_LINE_6,
    T3_LINE_7,
    T3_LINE_8,
    T3_LINE_9,
    T3_LINE_10,
    T3_LINE_11,
    T3_LINE_12,
    T3_LINE_13,
    T3_LINE_14,
    T3_LINE_15,
    T3_LINE_16,
    T3_LINE_17,
    T3_LINE_18,
    T3_LINE_19,
    T3_LINE_20,
    T3_LINE_21,
    T3_LINE_22,
    T3_LINE_23,
    T3_LINE_24,
    T3_LINE_25,
    T3_LINE_26,
    T3_LINE_27,
    T3_LINE_28,
    T3_DSP0_SPORT1,
    T3_DSP0_SPORT0,
    T3_DSP1_SPORT1,
    T3_DSP1_SPORT0,
    T3_UART,
    T3_NUM_ITEMS
} T3CardItemList;


static __inline__ Bool
validT3CardItemList (int x)
{
    switch (x) {
    case T3_SLOT_CARD:
    case T3_LINE_1:
    case T3_LINE_2:
    case T3_LINE_3:
    case T3_LINE_4:
    case T3_LINE_5:
    case T3_LINE_6:
    case T3_LINE_7:
    case T3_LINE_8:
    case T3_LINE_9:
    case T3_LINE_10:
    case T3_LINE_11:
    case T3_LINE_12:
    case T3_LINE_13:
    case T3_LINE_14:
    case T3_LINE_15:
    case T3_LINE_16:
    case T3_LINE_17:
    case T3_LINE_18:
    case T3_LINE_19:
    case T3_LINE_20:
    case T3_LINE_21:
    case T3_LINE_22:
    case T3_LINE_23:
    case T3_LINE_24:
    case T3_LINE_25:
    case T3_LINE_26:
    case T3_LINE_27:
    case T3_LINE_28:
    case T3_DSP0_SPORT1:
    case T3_DSP0_SPORT0:
    case T3_DSP1_SPORT1:
    case T3_DSP1_SPORT0:
    case T3_UART:
    case T3_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * UnchanT1CardItemList:
     *
     * The card-wide list of addressable physical devices on the Unchannelized
     * T1 card.
     *
     *  UNCHAN_T1_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  UNCHAN_T1_LINE_1 The Unchannelized T1 card supports up to 10 T1 lines
     *
     *  UNCHAN_T1_LINE_2
     *
     *  UNCHAN_T1_LINE_3
     *
     *  UNCHAN_T1_LINE_4
     *
     *  UNCHAN_T1_LINE_5
     *
     *  UNCHAN_T1_LINE_6
     *
     *  UNCHAN_T1_LINE_7
     *
     *  UNCHAN_T1_LINE_8
     *
     *  UNCHAN_T1_LINE_9
     *
     *  UNCHAN_T1_LINE_10
     *
     *  UNCHAN_T1_SCA_1 The Unchannelized T1 card supports up to 10 Serial
     *                                  Comm. Adaptors (SCA)
     *
     *  UNCHAN_T1_SCA_2
     *
     *  UNCHAN_T1_SCA_3
     *
     *  UNCHAN_T1_SCA_4
     *
     *  UNCHAN_T1_SCA_5
     *
     *  UNCHAN_T1_SCA_6
     *
     *  UNCHAN_T1_SCA_7
     *
     *  UNCHAN_T1_SCA_8
     *
     *  UNCHAN_T1_SCA_9
     *
     *  UNCHAN_T1_SCA_10
     *
     *  UNCHAN_T1_VIRTUAL_ITEM
     *
     *  UNCHAN_T1_UART The debug serial port.
     *
     *  UNCHAN_T1_NUM_ITEMS Total number of items on the card
     */
typedef enum UnchanT1CardItemList {
    UNCHAN_T1_SLOT_CARD = 0,
    UNCHAN_T1_LINE_1,
    UNCHAN_T1_LINE_2,
    UNCHAN_T1_LINE_3,
    UNCHAN_T1_LINE_4,
    UNCHAN_T1_LINE_5,
    UNCHAN_T1_LINE_6,
    UNCHAN_T1_LINE_7,
    UNCHAN_T1_LINE_8,
    UNCHAN_T1_LINE_9,
    UNCHAN_T1_LINE_10,
    UNCHAN_T1_SCA_1,
    UNCHAN_T1_SCA_2,
    UNCHAN_T1_SCA_3,
    UNCHAN_T1_SCA_4,
    UNCHAN_T1_SCA_5,
    UNCHAN_T1_SCA_6,
    UNCHAN_T1_SCA_7,
    UNCHAN_T1_SCA_8,
    UNCHAN_T1_SCA_9,
    UNCHAN_T1_SCA_10,
    UNCHAN_T1_VIRTUAL_ITEM,
    UNCHAN_T1_UART,
    UNCHAN_T1_NUM_ITEMS
} UnchanT1CardItemList;


static __inline__ Bool
validUnchanT1CardItemList (int x)
{
    switch (x) {
    case UNCHAN_T1_SLOT_CARD:
    case UNCHAN_T1_LINE_1:
    case UNCHAN_T1_LINE_2:
    case UNCHAN_T1_LINE_3:
    case UNCHAN_T1_LINE_4:
    case UNCHAN_T1_LINE_5:
    case UNCHAN_T1_LINE_6:
    case UNCHAN_T1_LINE_7:
    case UNCHAN_T1_LINE_8:
    case UNCHAN_T1_LINE_9:
    case UNCHAN_T1_LINE_10:
    case UNCHAN_T1_SCA_1:
    case UNCHAN_T1_SCA_2:
    case UNCHAN_T1_SCA_3:
    case UNCHAN_T1_SCA_4:
    case UNCHAN_T1_SCA_5:
    case UNCHAN_T1_SCA_6:
    case UNCHAN_T1_SCA_7:
    case UNCHAN_T1_SCA_8:
    case UNCHAN_T1_SCA_9:
    case UNCHAN_T1_SCA_10:
    case UNCHAN_T1_VIRTUAL_ITEM:
    case UNCHAN_T1_UART:
    case UNCHAN_T1_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * UnchanE1CardItemList:
     *
     * The card-wide list of addressable physical devices on the Unchannelized
     * E1 card.
     *
     *  UNCHAN_E1_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  UNCHAN_E1_LINE_1 The Unchannelized E1 card supports up to 10 E1 lines
     *
     *  UNCHAN_E1_LINE_2
     *
     *  UNCHAN_E1_LINE_3
     *
     *  UNCHAN_E1_LINE_4
     *
     *  UNCHAN_E1_LINE_5
     *
     *  UNCHAN_E1_LINE_6
     *
     *  UNCHAN_E1_LINE_7
     *
     *  UNCHAN_E1_LINE_8
     *
     *  UNCHAN_E1_LINE_9
     *
     *  UNCHAN_E1_LINE_10
     *
     *  UNCHAN_E1_SCA_1 The Unchannelized E1 card supports up to 10 Serial
     *                                  Comm. Adaptors (SCA)
     *
     *  UNCHAN_E1_SCA_2
     *
     *  UNCHAN_E1_SCA_3
     *
     *  UNCHAN_E1_SCA_4
     *
     *  UNCHAN_E1_SCA_5
     *
     *  UNCHAN_E1_SCA_6
     *
     *  UNCHAN_E1_SCA_7
     *
     *  UNCHAN_E1_SCA_8
     *
     *  UNCHAN_E1_SCA_9
     *
     *  UNCHAN_E1_SCA_10
     *
     *  UNCHAN_E1_VIRTUAL_ITEM
     *
     *  UNCHAN_E1_UART The debug serial port.
     *
     *  UNCHAN_E1_NUM_ITEMS Total number of items on the card
     */
typedef enum UnchanE1CardItemList {
    UNCHAN_E1_SLOT_CARD = 0,
    UNCHAN_E1_LINE_1,
    UNCHAN_E1_LINE_2,
    UNCHAN_E1_LINE_3,
    UNCHAN_E1_LINE_4,
    UNCHAN_E1_LINE_5,
    UNCHAN_E1_LINE_6,
    UNCHAN_E1_LINE_7,
    UNCHAN_E1_LINE_8,
    UNCHAN_E1_LINE_9,
    UNCHAN_E1_LINE_10,
    UNCHAN_E1_SCA_1,
    UNCHAN_E1_SCA_2,
    UNCHAN_E1_SCA_3,
    UNCHAN_E1_SCA_4,
    UNCHAN_E1_SCA_5,
    UNCHAN_E1_SCA_6,
    UNCHAN_E1_SCA_7,
    UNCHAN_E1_SCA_8,
    UNCHAN_E1_SCA_9,
    UNCHAN_E1_SCA_10,
    UNCHAN_E1_VIRTUAL_ITEM,
    UNCHAN_E1_UART,
    UNCHAN_E1_NUM_ITEMS
} UnchanE1CardItemList;


static __inline__ Bool
validUnchanE1CardItemList (int x)
{
    switch (x) {
    case UNCHAN_E1_SLOT_CARD:
    case UNCHAN_E1_LINE_1:
    case UNCHAN_E1_LINE_2:
    case UNCHAN_E1_LINE_3:
    case UNCHAN_E1_LINE_4:
    case UNCHAN_E1_LINE_5:
    case UNCHAN_E1_LINE_6:
    case UNCHAN_E1_LINE_7:
    case UNCHAN_E1_LINE_8:
    case UNCHAN_E1_LINE_9:
    case UNCHAN_E1_LINE_10:
    case UNCHAN_E1_SCA_1:
    case UNCHAN_E1_SCA_2:
    case UNCHAN_E1_SCA_3:
    case UNCHAN_E1_SCA_4:
    case UNCHAN_E1_SCA_5:
    case UNCHAN_E1_SCA_6:
    case UNCHAN_E1_SCA_7:
    case UNCHAN_E1_SCA_8:
    case UNCHAN_E1_SCA_9:
    case UNCHAN_E1_SCA_10:
    case UNCHAN_E1_VIRTUAL_ITEM:
    case UNCHAN_E1_UART:
    case UNCHAN_E1_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * SdslCardItemList:
     *
     * The card-wide list of addressable physical devices on the SDSL card.
     *
     *  SDSL_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  SDSL_LINE_1 The SDSL card supports 16 lines
     *
     *  SDSL_LINE_2
     *
     *  SDSL_LINE_3
     *
     *  SDSL_LINE_4
     *
     *  SDSL_LINE_5
     *
     *  SDSL_LINE_6
     *
     *  SDSL_LINE_7
     *
     *  SDSL_LINE_8
     *
     *  SDSL_LINE_9
     *
     *  SDSL_LINE_10
     *
     *  SDSL_LINE_11
     *
     *  SDSL_LINE_12
     *
     *  SDSL_LINE_13
     *
     *  SDSL_LINE_14
     *
     *  SDSL_LINE_15
     *
     *  SDSL_LINE_16
     *
     *  SDSL_VIRTUAL_ITEM
     *
     *  SDSL_UART The debug serial port.
     *
     *  SDSL_NUM_ITEMS Total number of items on the card
     */
typedef enum SdslCardItemList {
    SDSL_SLOT_CARD = 0,
    SDSL_LINE_1,
    SDSL_LINE_2,
    SDSL_LINE_3,
    SDSL_LINE_4,
    SDSL_LINE_5,
    SDSL_LINE_6,
    SDSL_LINE_7,
    SDSL_LINE_8,
    SDSL_LINE_9,
    SDSL_LINE_10,
    SDSL_LINE_11,
    SDSL_LINE_12,
    SDSL_LINE_13,
    SDSL_LINE_14,
    SDSL_LINE_15,
    SDSL_LINE_16,
    SDSL_VIRTUAL_ITEM,
    SDSL_UART,
    SDSL_NUM_ITEMS
} SdslCardItemList;


static __inline__ Bool
validSdslCardItemList (int x)
{
    switch (x) {
    case SDSL_SLOT_CARD:
    case SDSL_LINE_1:
    case SDSL_LINE_2:
    case SDSL_LINE_3:
    case SDSL_LINE_4:
    case SDSL_LINE_5:
    case SDSL_LINE_6:
    case SDSL_LINE_7:
    case SDSL_LINE_8:
    case SDSL_LINE_9:
    case SDSL_LINE_10:
    case SDSL_LINE_11:
    case SDSL_LINE_12:
    case SDSL_LINE_13:
    case SDSL_LINE_14:
    case SDSL_LINE_15:
    case SDSL_LINE_16:
    case SDSL_VIRTUAL_ITEM:
    case SDSL_UART:
    case SDSL_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * CadslCardItemList:
     *
     * The card-wide list of addressable physical devices on the CAP ADSL card.
     *
     *  CAP_ADSL_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  CADSL_LINE_1 The CAP ADSL card supports 6 lines
     *
     *  CADSL_LINE_2
     *
     *  CADSL_LINE_3
     *
     *  CADSL_LINE_4
     *
     *  CADSL_LINE_5
     *
     *  CADSL_LINE_6
     *
     *  CADSL_VIRTUAL_ITEM
     *
     *  CAPADSL_UART The debug serial port.
     *
     *  CAP_ADSL_NUM_ITEMS Total number of items on the card
     */
typedef enum CadslCardItemList {
    CAP_ADSL_SLOT_CARD = 0,
    CADSL_LINE_1,
    CADSL_LINE_2,
    CADSL_LINE_3,
    CADSL_LINE_4,
    CADSL_LINE_5,
    CADSL_LINE_6,
    CADSL_VIRTUAL_ITEM,
    CAPADSL_UART,
    CAP_ADSL_NUM_ITEMS
} CadslCardItemList;


static __inline__ Bool
validCadslCardItemList (int x)
{
    switch (x) {
    case CAP_ADSL_SLOT_CARD:
    case CADSL_LINE_1:
    case CADSL_LINE_2:
    case CADSL_LINE_3:
    case CADSL_LINE_4:
    case CADSL_LINE_5:
    case CADSL_LINE_6:
    case CADSL_VIRTUAL_ITEM:
    case CAPADSL_UART:
    case CAP_ADSL_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * DadslCardItemList:
     *
     * The card-wide list of addressable physical devices on the DMT ADSL card.
     *
     *  DMT_ADSL_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  DADSL_LINE_1 The DMT ADSL card supports 6 lines
     *
     *  DADSL_LINE_2
     *
     *  DADSL_LINE_3
     *
     *  DADSL_LINE_4
     *
     *  DADSL_LINE_5
     *
     *  DADSL_LINE_6
     *
     *  DADSL_VIRTUAL_ITEM
     *
     *  DMTADSL_UART The debug serial port.
     *
     *  DMT_ADSL_NUM_ITEMS Total number of items on the card
     */
typedef enum DadslCardItemList {
    DMT_ADSL_SLOT_CARD = 0,
    DADSL_LINE_1,
    DADSL_LINE_2,
    DADSL_LINE_3,
    DADSL_LINE_4,
    DADSL_LINE_5,
    DADSL_LINE_6,
    DADSL_VIRTUAL_ITEM,
    DMTADSL_UART,
    DMT_ADSL_NUM_ITEMS
} DadslCardItemList;


static __inline__ Bool
validDadslCardItemList (int x)
{
    switch (x) {
    case DMT_ADSL_SLOT_CARD:
    case DADSL_LINE_1:
    case DADSL_LINE_2:
    case DADSL_LINE_3:
    case DADSL_LINE_4:
    case DADSL_LINE_5:
    case DADSL_LINE_6:
    case DADSL_VIRTUAL_ITEM:
    case DMTADSL_UART:
    case DMT_ADSL_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * Uds3CardItemList:
     *
     * The card-wide list of addressable physical devices on the Uds3 card.
     *
     *  UDS3_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  UDS3_LINE_1 The UDS3 card supports 1 channel
     *
     *  UDS3_VIRTUAL_ITEM
     *
     *  UDS3_UART The debug serial port.
     *
     *  UDS3_NUM_ITEMS Total number of items on the card
     */
typedef enum Uds3CardItemList {
    UDS3_SLOT_CARD = 0,
    UDS3_LINE_1,
    UDS3_VIRTUAL_ITEM,
    UDS3_UART,
    UDS3_NUM_ITEMS
} Uds3CardItemList;


static __inline__ Bool
validUds3CardItemList (int x)
{
    switch (x) {
    case UDS3_SLOT_CARD:
    case UDS3_LINE_1:
    case UDS3_VIRTUAL_ITEM:
    case UDS3_UART:
    case UDS3_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * SwanCardItemList:
     *
     * The card-wide list of addressable physical devices on the Swan card.
     *
     *  SWAN_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  SWAN_LINE_1 The Swan card supports up to 4 serial wan lines
     *
     *  SWAN_LINE_2
     *
     *  SWAN_LINE_3
     *
     *  SWAN_LINE_4
     *
     *  SWAN_VIRTUAL_ITEM
     *
     *  SWAN_UART The debug serial port.
     *
     *  SWAN_NUM_ITEMS Total number of items on the card
     */
typedef enum SwanCardItemList {
    SWAN_SLOT_CARD = 0,
    SWAN_LINE_1,
    SWAN_LINE_2,
    SWAN_LINE_3,
    SWAN_LINE_4,
    SWAN_VIRTUAL_ITEM,
    SWAN_UART,
    SWAN_NUM_ITEMS
} SwanCardItemList;


static __inline__ Bool
validSwanCardItemList (int x)
{
    switch (x) {
    case SWAN_SLOT_CARD:
    case SWAN_LINE_1:
    case SWAN_LINE_2:
    case SWAN_LINE_3:
    case SWAN_LINE_4:
    case SWAN_VIRTUAL_ITEM:
    case SWAN_UART:
    case SWAN_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * IdslCardItemList:
     *
     * The card-wide list of addressable physical devices on the IDSL card.
     *
     *  IDSL_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  IDSL_1 The IDSL card supports 32 lines
     *
     *  IDSL_2
     *
     *  IDSL_3
     *
     *  IDSL_4
     *
     *  IDSL_5
     *
     *  IDSL_6
     *
     *  IDSL_7
     *
     *  IDSL_8
     *
     *  IDSL_9
     *
     *  IDSL_10
     *
     *  IDSL_11
     *
     *  IDSL_12
     *
     *  IDSL_13
     *
     *  IDSL_14
     *
     *  IDSL_15
     *
     *  IDSL_16
     *
     *  IDSL_17
     *
     *  IDSL_18
     *
     *  IDSL_19
     *
     *  IDSL_20
     *
     *  IDSL_21
     *
     *  IDSL_22
     *
     *  IDSL_23
     *
     *  IDSL_24
     *
     *  IDSL_25
     *
     *  IDSL_26
     *
     *  IDSL_27
     *
     *  IDSL_28
     *
     *  IDSL_29
     *
     *  IDSL_30
     *
     *  IDSL_31
     *
     *  IDSL_32
     *
     *  IDSL_VIRTUAL_ITEM
     *
     *  IDSL_UART The debug serial port.
     *
     *  IDSL_NUM_ITEMS Total number of items on the card
     */
typedef enum IdslCardItemList {
    IDSL_SLOT_CARD = 0,
    IDSL_1,
    IDSL_2,
    IDSL_3,
    IDSL_4,
    IDSL_5,
    IDSL_6,
    IDSL_7,
    IDSL_8,
    IDSL_9,
    IDSL_10,
    IDSL_11,
    IDSL_12,
    IDSL_13,
    IDSL_14,
    IDSL_15,
    IDSL_16,
    IDSL_17,
    IDSL_18,
    IDSL_19,
    IDSL_20,
    IDSL_21,
    IDSL_22,
    IDSL_23,
    IDSL_24,
    IDSL_25,
    IDSL_26,
    IDSL_27,
    IDSL_28,
    IDSL_29,
    IDSL_30,
    IDSL_31,
    IDSL_32,
    IDSL_VIRTUAL_ITEM,
    IDSL_UART,
    IDSL_NUM_ITEMS
} IdslCardItemList;


static __inline__ Bool
validIdslCardItemList (int x)
{
    switch (x) {
    case IDSL_SLOT_CARD:
    case IDSL_1:
    case IDSL_2:
    case IDSL_3:
    case IDSL_4:
    case IDSL_5:
    case IDSL_6:
    case IDSL_7:
    case IDSL_8:
    case IDSL_9:
    case IDSL_10:
    case IDSL_11:
    case IDSL_12:
    case IDSL_13:
    case IDSL_14:
    case IDSL_15:
    case IDSL_16:
    case IDSL_17:
    case IDSL_18:
    case IDSL_19:
    case IDSL_20:
    case IDSL_21:
    case IDSL_22:
    case IDSL_23:
    case IDSL_24:
    case IDSL_25:
    case IDSL_26:
    case IDSL_27:
    case IDSL_28:
    case IDSL_29:
    case IDSL_30:
    case IDSL_31:
    case IDSL_32:
    case IDSL_VIRTUAL_ITEM:
    case IDSL_UART:
    case IDSL_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * Ds3AtmCardItemList:
     *
     * The card-wide list of addressable physical devices on the DS3 ATM card.
     *
     *  DS3_ATM_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  DS3_ATM_LINE_1 The ds3/atm card supports one Interface port
     *
     *  DS3_ATM_VIRTUAL_ITEM
     *
     *  DS3_ATM_UART The debug serial port.
     *
     *  DS3_ATM_NUM_ITEMS Total number of items on the card
     */
typedef enum Ds3AtmCardItemList {
    DS3_ATM_SLOT_CARD = 0,
    DS3_ATM_LINE_1,
    DS3_ATM_VIRTUAL_ITEM,
    DS3_ATM_UART,
    DS3_ATM_NUM_ITEMS
} Ds3AtmCardItemList;


static __inline__ Bool
validDs3AtmCardItemList (int x)
{
    switch (x) {
    case DS3_ATM_SLOT_CARD:
    case DS3_ATM_LINE_1:
    case DS3_ATM_VIRTUAL_ITEM:
    case DS3_ATM_UART:
    case DS3_ATM_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * Sdsl70CardItemList:
     *
     * The card-wide list of addressable physical devices on the SDSL70 card.
     *
     *  SDSL70_SLOT_CARD Item 0 refers to the slot card itself as a whole
     *
     *  SDSL70_LINE_1 The SDSL card (with Bt8970 bitpumps) supports 24 lines
     *
     *  SDSL70_LINE_2
     *
     *  SDSL70_LINE_3
     *
     *  SDSL70_LINE_4
     *
     *  SDSL70_LINE_5
     *
     *  SDSL70_LINE_6
     *
     *  SDSL70_LINE_7
     *
     *  SDSL70_LINE_8
     *
     *  SDSL70_LINE_9
     *
     *  SDSL70_LINE_10
     *
     *  SDSL70_LINE_11
     *
     *  SDSL70_LINE_12
     *
     *  SDSL70_LINE_13
     *
     *  SDSL70_LINE_14
     *
     *  SDSL70_LINE_15
     *
     *  SDSL70_LINE_16
     *
     *  SDSL70_LINE_17
     *
     *  SDSL70_LINE_18
     *
     *  SDSL70_LINE_19
     *
     *  SDSL70_LINE_20
     *
     *  SDSL70_LINE_21
     *
     *  SDSL70_LINE_22
     *
     *  SDSL70_LINE_23
     *
     *  SDSL70_LINE_24
     *
     *  SDSL70_VIRTUAL_ITEM
     *
     *  SDSL70_UART The debug serial port.
     *
     *  SDSL70_NUM_ITEMS Total number of items on the card
     */
typedef enum Sdsl70CardItemList {
    SDSL70_SLOT_CARD = 0,
    SDSL70_LINE_1,
    SDSL70_LINE_2,
    SDSL70_LINE_3,
    SDSL70_LINE_4,
    SDSL70_LINE_5,
    SDSL70_LINE_6,
    SDSL70_LINE_7,
    SDSL70_LINE_8,
    SDSL70_LINE_9,
    SDSL70_LINE_10,
    SDSL70_LINE_11,
    SDSL70_LINE_12,
    SDSL70_LINE_13,
    SDSL70_LINE_14,
    SDSL70_LINE_15,
    SDSL70_LINE_16,
    SDSL70_LINE_17,
    SDSL70_LINE_18,
    SDSL70_LINE_19,
    SDSL70_LINE_20,
    SDSL70_LINE_21,
    SDSL70_LINE_22,
    SDSL70_LINE_23,
    SDSL70_LINE_24,
    SDSL70_VIRTUAL_ITEM,
    SDSL70_UART,
    SDSL70_NUM_ITEMS
} Sdsl70CardItemList;


static __inline__ Bool
validSdsl70CardItemList (int x)
{
    switch (x) {
    case SDSL70_SLOT_CARD:
    case SDSL70_LINE_1:
    case SDSL70_LINE_2:
    case SDSL70_LINE_3:
    case SDSL70_LINE_4:
    case SDSL70_LINE_5:
    case SDSL70_LINE_6:
    case SDSL70_LINE_7:
    case SDSL70_LINE_8:
    case SDSL70_LINE_9:
    case SDSL70_LINE_10:
    case SDSL70_LINE_11:
    case SDSL70_LINE_12:
    case SDSL70_LINE_13:
    case SDSL70_LINE_14:
    case SDSL70_LINE_15:
    case SDSL70_LINE_16:
    case SDSL70_LINE_17:
    case SDSL70_LINE_18:
    case SDSL70_LINE_19:
    case SDSL70_LINE_20:
    case SDSL70_LINE_21:
    case SDSL70_LINE_22:
    case SDSL70_LINE_23:
    case SDSL70_LINE_24:
    case SDSL70_VIRTUAL_ITEM:
    case SDSL70_UART:
    case SDSL70_NUM_ITEMS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /* for UT1 card, 1 virtual device per DS0 channel: */
#define	UNCHAN_T1_VIRTUAL_DEVICES	240

    /* for UE1 card, 1 virtual device per usuable DS0 channel: */
#define	UNCHAN_E1_VIRTUAL_DEVICES	240

    /* for SWAN card, 10 virtual devices per SWAN line: */
#define	SWAN_VIRTUAL_DEVICES		120

    /* for XDSL card, 8 virtual devices per XDSL line: */
#define	SDSL_VIRTUAL_DEVICES		8 * 16
#define	CADSL_VIRTUAL_DEVICES		8 * 6
#define	DADSL_VIRTUAL_DEVICES		8 * 6
#define	UDS3_VIRTUAL_DEVICES		8 * 16

    /* for SDSL70 data/voice card, 5 virtual devices per line */
#define	SDSL70_VIRTUAL_DEVICES		5 * 24

    /* for IDSL card, set to current max of 120  */
#define	IDSL_VIRTUAL_DEVICES		120

#define HDLC_VIRTUAL_DEVICES            120
#define HDLC2_VIRTUAL_DEVICES		120

#define DS3_ATM_VIRTUAL_DEVICES         (15*24)	/* Temporary ! */

#if ( Q_TNT_T3_CARD )
# define MAX_MUNICH_COUNT	1
# define MUNICH_MAX_CHANNELS	32
#elif ( Q_TNT_IDSL_CARD )
# define MAX_MUNICH_COUNT	3
# define MUNICH_MAX_CHANNELS	32
#else
    /*
     * Reduce the number of channels from 6x32 to 3x24 due to the memory
     * availability on the HDLC card.
     */
# define MAX_MUNICH_COUNT	3
# define MUNICH_MAX_CHANNELS	32
#endif

#define HDLC2_TRUNKS			6
#define HDLC2_CHANNELS_PER_TRUNK	31

#if ( Q_TNT_ANALOG_MODEM_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (ANALOG_MODEM_UART - ANALOG_MODEM_1)
#elif ( Q_TNT_ANALOG_MODEM2_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (ANALOG_MODEM_UART - ANALOG_MODEM_1)
#elif ( Q_TNT_MODEM_56K_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (MODEM_UART - MODEM_1)
#elif ( TNT_CARD == MODEM_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (MODEM_UART - MODEM_1)
#elif ( TNT_CARD == MODEM_CSMX_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (MODEM_UART - MODEM_1)
#elif ( TNT_CARD == MADD_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (MADD_MODEM_UART - MODEM_1)
#elif ( Q_TNT_HDLC_CARD )
# define NUM_CHANS_PER_PHYSICAL    MUNICH_MAX_CHANNELS
# define NUM_PHYSICAL_DEVICES      MAX_MUNICH_COUNT
#elif ( Q_TNT_HDLC2_CARD )
# define NUM_CHANS_PER_PHYSICAL    HDLC2_CHANNELS_PER_TRUNK
# define NUM_PHYSICAL_DEVICES      HDLC2_TRUNKS
#elif ( Q_TNT_SDSL_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (SDSL_VIRTUAL_ITEM - SDSL_LINE_1)
#elif ( TNT_CARD & CAP_ADSL_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (CADSL_VIRTUAL_ITEM - CADSL_LINE_1)
#elif ( TNT_CARD & DMT_ADSL_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (DADSL_VIRTUAL_ITEM - DADSL_LINE_1)
#elif ( Q_TNT_SDSL70_VOICE_CARD )
# define NUM_CHANS_PER_PHYSICAL    2
# define NUM_PHYSICAL_DEVICES      (SDSL70_VIRTUAL_ITEM - SDSL70_LINE_1)
#elif ( Q_TNT_SDSL70_DATA_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (SDSL70_VIRTUAL_ITEM - SDSL70_LINE_1)
#elif ( TNT_CARD == UDS3_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (UDS3_VIRTUAL_ITEM - UDS3_LINE_1)
#elif ( Q_TNT_SWAN_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (SWAN_VIRTUAL_ITEM - SWAN_LINE_1)
#elif ( Q_TNT_UNCHAN_T1_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (UNCHAN_T1_SCA_1 - UNCHAN_T1_LINE_1)
#elif ( Q_TNT_UNCHAN_E1_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      (UNCHAN_T1_SCA_1 - UNCHAN_T1_LINE_1)
#elif ( Q_TNT_IDSL_CARD )
# define NUM_CHANS_PER_PHYSICAL    2
# define NUM_PHYSICAL_DEVICES      (IDSL_VIRTUAL_ITEM - IDSL_1)
#elif ( Q_TNT_DS3_ATM_CARD )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      1
#elif ( Q_STNGR_LINE_INTERFACE_MODULE )
# define NUM_CHANS_PER_PHYSICAL    1
# define NUM_PHYSICAL_DEVICES      1
#endif


#endif /* MIBITEMS_H */

