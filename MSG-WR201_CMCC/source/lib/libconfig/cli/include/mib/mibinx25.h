    /*
     * Notice: file generated by MIBMAKE from mibinx25.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibinx25.mdf
     */
#line 3 "mibinx25.mdf"
/*
 * $Id: mibinx25.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1996 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

#line 32 "mibinx25.mdf"

#if (( ! defined( MIBINX25_H ) ) && \
     ( ( MDF_X25B == FYES ) || ( MDF_IPOX25 == FYES ) ))
# define MIBINX25_H

# include "mibgen.h"
# include "mibglob.h"


    /*
     * How to build the factory instance of this profile.
     */
extern ConstPtr
mibFactoryX25Options( MibProfileType	mibType,
		       Uint32		info );

    /*
     * Our parameter table is made external as the profile is used
     * within other profiles.
     */
extern const MibFieldComplexParams	x25OptionsParams;


    /*
     * X3ProfType:
     *
     * The X.3 param profile type to use.
     *
     *  X3_PROF_CRT X.3 param profile named CRT
     *
     *  X3_PROF_INFONET X.3 param profile named INFONET
     *
     *  X3_PROF_DF X.3 param profile named DEFAULT
     *
     *  X3_PROF_SCEN X.3 param profile named SCEN
     *
     *  X3_PROF_CC_SSP X.3 param profile named CC_SSP
     *
     *  X3_PROF_CC_TSP X.3 param profile named CC_TSP
     *
     *  X3_PROF_HARDCOPY X.3 param profile named HARDCOPY
     *
     *  X3_PROF_HDX X.3 param profile named HDX
     *
     *  X3_PROF_SHARK X.3 param profile named SHARK
     *
     *  X3_PROF_NULL X.3 param profile named NULL
     *
     *  X3_PROF_CUSTOM X.3 param profile named CUSTOM, get it from x3CustomProf
     *                                  string
     *
     *  X3_PROF_LAST Max number of permanent profile
     */
typedef enum X3ProfType {
#line 85 "mibinx25.mdf"
    X3_PROF_CRT,
#line 88 "mibinx25.mdf"
    X3_PROF_INFONET,
#line 91 "mibinx25.mdf"
    X3_PROF_DF,
#line 94 "mibinx25.mdf"
    X3_PROF_SCEN,
#line 97 "mibinx25.mdf"
    X3_PROF_CC_SSP,
#line 100 "mibinx25.mdf"
    X3_PROF_CC_TSP,
#line 103 "mibinx25.mdf"
    X3_PROF_HARDCOPY,
#line 106 "mibinx25.mdf"
    X3_PROF_HDX,
#line 109 "mibinx25.mdf"
    X3_PROF_SHARK,
#line 112 "mibinx25.mdf"
    X3_PROF_NULL,
#line 115 "mibinx25.mdf"
    X3_PROF_CUSTOM,
#line 118 "mibinx25.mdf"
    X3_PROF_LAST
} X3ProfType;


static __inline__ Bool
validX3ProfType (int x)
{
    switch (x) {
#line 85 "mibinx25.mdf"
    case X3_PROF_CRT:
#line 88 "mibinx25.mdf"
    case X3_PROF_INFONET:
#line 91 "mibinx25.mdf"
    case X3_PROF_DF:
#line 94 "mibinx25.mdf"
    case X3_PROF_SCEN:
#line 97 "mibinx25.mdf"
    case X3_PROF_CC_SSP:
#line 100 "mibinx25.mdf"
    case X3_PROF_CC_TSP:
#line 103 "mibinx25.mdf"
    case X3_PROF_HARDCOPY:
#line 106 "mibinx25.mdf"
    case X3_PROF_HDX:
#line 109 "mibinx25.mdf"
    case X3_PROF_SHARK:
#line 112 "mibinx25.mdf"
    case X3_PROF_NULL:
#line 115 "mibinx25.mdf"
    case X3_PROF_CUSTOM:
#line 118 "mibinx25.mdf"
    case X3_PROF_LAST:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * X25EncapsType:
     *
     * RFC1356 encaps type for IP over X.25, and PPP over X.25.
     *
     *  X25_ENCAPS_RFC877 RFC877
     *
     *  X25_ENCAPS_SNAP SNAP
     *
     *  X25_ENCAPS_NULL NULL, also used in bridging mode
     *
     *  X25_ENCAPS_PPP PPP
     *
     *  X25_ENCAPS_AODI AO/DI
     *
     *  X25_ENCAPS_LAST Number of encaps type
     */
typedef enum X25EncapsType {
#line 142 "mibinx25.mdf"
    X25_ENCAPS_RFC877,
#line 145 "mibinx25.mdf"
    X25_ENCAPS_SNAP,
#line 148 "mibinx25.mdf"
    X25_ENCAPS_NULL,
#line 151 "mibinx25.mdf"
    X25_ENCAPS_PPP,
#line 154 "mibinx25.mdf"
    X25_ENCAPS_AODI,
#line 157 "mibinx25.mdf"
    X25_ENCAPS_LAST
} X25EncapsType;


static __inline__ Bool
validX25EncapsType (int x)
{
    switch (x) {
#line 142 "mibinx25.mdf"
    case X25_ENCAPS_RFC877:
#line 145 "mibinx25.mdf"
    case X25_ENCAPS_SNAP:
#line 148 "mibinx25.mdf"
    case X25_ENCAPS_NULL:
#line 151 "mibinx25.mdf"
    case X25_ENCAPS_PPP:
#line 154 "mibinx25.mdf"
    case X25_ENCAPS_AODI:
#line 157 "mibinx25.mdf"
    case X25_ENCAPS_LAST:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * X25CallMode:
     *
     * IP Over X.25 Call mode: Outgoing/Incoming/Both.
     *
     *  X25_CALLMODE_BOTH Both Incoming and Outgoing
     *
     *  X25_CALLMODE_OUTGOING Outgoing only
     *
     *  X25_CALLMODE_INCOMING Incoming Only
     *
     *  X25_CALLMODE_LAST Number of call mode
     */
typedef enum X25CallMode {
#line 167 "mibinx25.mdf"
    X25_CALLMODE_BOTH,
#line 170 "mibinx25.mdf"
    X25_CALLMODE_OUTGOING,
#line 173 "mibinx25.mdf"
    X25_CALLMODE_INCOMING,
#line 176 "mibinx25.mdf"
    X25_CALLMODE_LAST
} X25CallMode;


static __inline__ Bool
validX25CallMode (int x)
{
    switch (x) {
#line 167 "mibinx25.mdf"
    case X25_CALLMODE_BOTH:
#line 170 "mibinx25.mdf"
    case X25_CALLMODE_OUTGOING:
#line 173 "mibinx25.mdf"
    case X25_CALLMODE_INCOMING:
#line 176 "mibinx25.mdf"
    case X25_CALLMODE_LAST:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * X25Options:
     *
     * X25inet configuration options.
     *
     *  x25Enabled Hidden, for answer profile
     *
     *  x25Profile Name of the x25 profile that this profile is associated
     *                                  with.
     *
     *  recvPassword For future use. We currently use the password in the PPP
     *                                  sub-profile.
     *
     *  fill2
     *
     *  lcn The LCN (if any) for this profile (for PVCs).
     *
     *  x3Prof X.3 profile parameter index
     *
     *  maxCalls Max number of unsuccessful calls
     *
     *  padVce PAD VCE enable flag
     *
     *  fill1
     *
     *  x25EncapsType RFC1356 encaps Type: RFC877/SNAP/NULL
     *
     *  x121Addr X.121 address to auto-call upon session startup.
     *
     *  x25RevCharge Reverse charge request
     *
     *  x25CallMode Call mode for this interface: Both/Outgoing/Incoming
     *
     *  x121Answer Answer number: mandatory if call mode is incoming or both.
     *
     *  x25InactTimer X.25 Inactivity Timer.
     *
     *  x25IfMtu X.25 Interface MTU.
     *
     *  x3CustomPfNotUsed Obsoleted by x3-custom-parameters(21).
     *
     *  x25Rpoa X.25 RPOA facility.
     *
     *  x25Cug X.25 CUG index.
     *
     *  x25Nui X.25 NUI facility.
     *
     *  x3CustomParam X.3 CUSTOM parameters R/W by PAD commands only.
     *
     *  padBanner PAD banner message.
     *
     *  padPrompt PAD prompt.
     *
     *  padNuiPrompt NUI prompt.
     *
     *  padNuiPwPrompt NUI password prompt.
     *
     *  padAlias1 PAD Alias number 1.
     *
     *  padAlias2 PAD Alias number 2.
     *
     *  padAlias3 PAD Alias number 3.
     *
     *  padDiagDisp PAD D/B channel Diagnostic display.
     *
     *  padDiagListen PAD diag listen address.
     *
     *  padDiagPw PAD diag password.
     */
typedef struct x25Options {
#line 202 "mibinx25.mdf"
    Boolean                             x25Enabled;
#line 208 "mibinx25.mdf"
    char                                x25Profile[ MAX_X25_NAME_LEN + 1 ];
#line 213 "mibinx25.mdf"
#if ( PLATFORM & TNT )
    char                                recvPassword[ MAX_PASSWORD_LENGTH + 1 ];
#endif /* ( PLATFORM & TNT ) */
#line 221 "mibinx25.mdf"
#if ( ! ( PLATFORM & TNT ))
    char                                fill2;
#endif /* ( ! ( PLATFORM & TNT )) */
#line 227 "mibinx25.mdf"
    Uint16                              lcn;
#line 232 "mibinx25.mdf"
    X3ProfType                          x3Prof;
#line 237 "mibinx25.mdf"
    Uint16                              maxCalls;
#line 242 "mibinx25.mdf"
    Boolean                             padVce;
#line 247 "mibinx25.mdf"
    char                                fill1;
#line 252 "mibinx25.mdf"
    X25EncapsType                       x25EncapsType;
#line 257 "mibinx25.mdf"
    char                                x121Addr[ MAX_X25_AUTO_CALL_LEN + 1 ];
#line 262 "mibinx25.mdf"
    Boolean                             x25RevCharge;
#line 267 "mibinx25.mdf"
    X25CallMode                         x25CallMode;
#line 272 "mibinx25.mdf"
    char                                x121Answer[ MAX_X25_NAME_LEN + 1 ];
#line 277 "mibinx25.mdf"
    Uint16                              x25InactTimer;
#line 282 "mibinx25.mdf"
    Uint16                              x25IfMtu;
#line 287 "mibinx25.mdf"
    char                                x3CustomPfNotUsed[ MAX_X3_PROF_STR_LEN ];
#line 293 "mibinx25.mdf"
    char                                x25Rpoa[ MAX_X25_RPOA_LEN + 1 ];
#line 298 "mibinx25.mdf"
    char                                x25Cug[ MAX_X25_CUG_LEN + 1 ];
#line 303 "mibinx25.mdf"
    char                                x25Nui[ MAX_X25_NUI_LEN + 1 ];
#line 308 "mibinx25.mdf"
    Byte                                x3CustomParam[ MAX_X3_PARAM + 1 ];
#line 314 "mibinx25.mdf"
    char                                padBanner[ MAX_PAD_BANNER_LEN + 1 ];
#line 319 "mibinx25.mdf"
    char                                padPrompt[ MAX_PAD_PROMPT_LEN + 1 ];
#line 325 "mibinx25.mdf"
    char                                padNuiPrompt[ MAX_PAD_NUI_PROMPT_LEN + 1 ];
#line 330 "mibinx25.mdf"
    char                                padNuiPwPrompt[ MAX_PAD_NUI_PW_PROMPT_LEN + 1 ];
#line 335 "mibinx25.mdf"
    char                                padAlias1[ MAX_PAD_ALIAS_LEN + 1 ];
#line 340 "mibinx25.mdf"
    char                                padAlias2[ MAX_PAD_ALIAS_LEN + 1 ];
#line 345 "mibinx25.mdf"
    char                                padAlias3[ MAX_PAD_ALIAS_LEN + 1 ];
#line 350 "mibinx25.mdf"
#if ( MDF_X25_DIAG == FYES )
    Boolean                             padDiagDisp;
#endif /* ( MDF_X25_DIAG == FYES ) */
#line 356 "mibinx25.mdf"
#if ( MDF_X25_DIAG == FYES )
    char                                padDiagListen[ MAX_X25_NAME_LEN + 1 ];
#endif /* ( MDF_X25_DIAG == FYES ) */
#line 362 "mibinx25.mdf"
#if ( MDF_X25_DIAG == FYES )
    char                                padDiagPw[ MAX_PAD_DEFAULT_PW_LEN + 1 ];
#endif /* ( MDF_X25_DIAG == FYES ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
X25Options;
#line 424 "mibinx25.mdf"

# endif /* (( ! defined( MIBINX25_H ) ) && ( MDF_X25B == FYES )) */

