    /*
     * Notice: file generated by MIBMAKE from mibstat.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibstat.mdf
     */
/*
 * $Id: mibstat.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */


#if ! defined( MIBSTAT_H )
#define MIBSTAT_H

#include "mibgen.h"
#include "mibaddr.h"
#include "mibsdsl.h"
#include "mibadslcap.h"
#include "mibdmtaw.h"


    /*
     *  Structures and enums used by the CLI status display
     */

extern const char* const		mibProfT1LineStat;

extern const char* const		mibProfDS3LineStat;

extern const MibFieldEnumParams		windowPositionParams;

extern const MibFieldEnumParams		windowSelectionParams;

extern const MibFieldEnumParams		listSelectionParams;

extern const MibFieldEnumParams		lineStatusOptionParams;

extern const char* const		mibProfSwanLineStat;

extern const char* const		mibProfSdslLineStat;

extern const char* const		mibProfCadslLineStat;

extern const char* const		mibProfDadslLineStat;

extern const char* const		mibProfBriLineStat;

extern const char* const		mibProfUds3LineStat;

extern const char* const		mibProfDs3AtmLineStat;

extern const char* const		mibProfVdslLineStat;


    /*
     * StatusWindowPosition:
     *
     * The screen postitions that a selectable status window can occupy.
     *
     *  STAT_WNDW_POSN_TOP The upper right portion of the status screen.
     *
     *  STAT_WNDW_POSN_BOTTOM The lower right portion of the status screen.
     *
     *  STAT_WNDW_POSN_LEFT The left portion of the status screen.
     *
     *  STAT_WNDW_NUM_POSNS
     */
typedef enum StatusWindowPosition {
    STAT_WNDW_POSN_TOP,
    STAT_WNDW_POSN_BOTTOM,
    STAT_WNDW_POSN_LEFT,
    STAT_WNDW_NUM_POSNS
} StatusWindowPosition;


static __inline__ Bool
validStatusWindowPosition (int x)
{
    switch (x) {
    case STAT_WNDW_POSN_TOP:
    case STAT_WNDW_POSN_BOTTOM:
    case STAT_WNDW_POSN_LEFT:
    case STAT_WNDW_NUM_POSNS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * StatusWindowSelection:
     *
     * The display options for the configurable status windows.
     *
     *  STAT_WNDW_GENERAL Provides general information and statistics for the
     *                                  system.
     *
     *  STAT_WNDW_LOG Displays saved system event log entries.
     *
     *  STAT_WNDW_LINE Shows the status of system telephony interfaces.
     *
     *  STAT_WNDW_NUM_SLNS
     */
typedef enum StatusWindowSelection {
    STAT_WNDW_GENERAL,
    STAT_WNDW_LOG,
    STAT_WNDW_LINE,
    STAT_WNDW_NUM_SLNS
} StatusWindowSelection;


static __inline__ Bool
validStatusWindowSelection (int x)
{
    switch (x) {
    case STAT_WNDW_GENERAL:
    case STAT_WNDW_LOG:
    case STAT_WNDW_LINE:
    case STAT_WNDW_NUM_SLNS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * ListWindowSelection:
     *
     * The display options for the configurable list window.
     *
     *  LIST_WNDW_SESSION Displays current system CLI sessions.
     *
     *  LIST_WNDW_CONNECTION Displays current system WAN sessions.
     *
     *  LIST_WNDW_NUM_SLNS
     */
typedef enum ListWindowSelection {
    LIST_WNDW_SESSION,
    LIST_WNDW_CONNECTION,
    LIST_WNDW_NUM_SLNS
} ListWindowSelection;


static __inline__ Bool
validListWindowSelection (int x)
{
    switch (x) {
    case LIST_WNDW_SESSION:
    case LIST_WNDW_CONNECTION:
    case LIST_WNDW_NUM_SLNS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * LineStatusOption:
     *
     * The display options for the line status window.
     *
     *  LINE_STAT_ENABLED Only the status of enabled lines will be displayed.
     *
     *  LINE_STAT_ALL The status of all lines will be displayed.
     *
     *  LINE_STAT_NUM_POSNS
     */
typedef enum LineStatusOption {
    LINE_STAT_ENABLED,
    LINE_STAT_ALL,
    LINE_STAT_NUM_POSNS
} LineStatusOption;


static __inline__ Bool
validLineStatusOption (int x)
{
    switch (x) {
    case LINE_STAT_ENABLED:
    case LINE_STAT_ALL:
    case LINE_STAT_NUM_POSNS:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * T1LineState:
     *
     * The various states that a T1 line can be in.
     *
     *  LS_T1_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_T1_DISABLED Line disabled.
     *
     *  LS_LOSS_OF_SYNC Red-alarm state, plus or minus.
     *
     *  LS_YELLOW_ALARM Yellow-alarm state.
     *
     *  LS_AIS_RECEIVE Receiving keep-alive signal.
     *
     *  LS_NO_D_CHANNEL D-Channel failure.
     *
     *  LS_ACTIVE Multipoint established.
     *
     *  LS_NT_ACTIVE NT Multipoint established.
     *
     *  LS_TE_ACTIVE TE Multipoint established.
     *
     *  LS_MAINTENANCE In maintenance state.
     *
     *  LS_T1_NUMBER_OF_STATES
     */

#if ( NETIF & ( T1 | E1 ) )

typedef enum T1LineState {
    LS_T1_DOES_NOT_EXIST,
    LS_T1_DISABLED,
    LS_LOSS_OF_SYNC,
    LS_YELLOW_ALARM,
    LS_AIS_RECEIVE,
    LS_NO_D_CHANNEL,
    LS_ACTIVE,
    LS_NT_ACTIVE,
    LS_TE_ACTIVE,
#if ( MDF_T1_PRI_LINE_QUIESCE == FYES )
    LS_MAINTENANCE,
#endif /* ( MDF_T1_PRI_LINE_QUIESCE == FYES ) */
    LS_T1_NUMBER_OF_STATES
} T1LineState;

#endif /* ( NETIF & ( T1 | E1 ) ) */

#if ( NETIF & ( T1 | E1 ) )



static __inline__ Bool
validT1LineState (int x)
{
    switch (x) {
    case LS_T1_DOES_NOT_EXIST:
    case LS_T1_DISABLED:
    case LS_LOSS_OF_SYNC:
    case LS_YELLOW_ALARM:
    case LS_AIS_RECEIVE:
    case LS_NO_D_CHANNEL:
    case LS_ACTIVE:
    case LS_NT_ACTIVE:
    case LS_TE_ACTIVE:
#if ( MDF_T1_PRI_LINE_QUIESCE == FYES )
    case LS_MAINTENANCE:
#endif /* ( MDF_T1_PRI_LINE_QUIESCE == FYES ) */
    case LS_T1_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & ( T1 | E1 ) ) */

    /*
     * DS0ChannelState:
     *
     * The various states of a single B-Channel.
     *
     *  BS_UNAVAILABLE Not available
     *
     *  BS_UNUSED Not in use
     *
     *  BS_OUT_OF_SERVICE Out of service
     *
     *  BS_NAILED_UP Nailed up
     *
     *  BS_HELD On hold
     *
     *  BS_OFF_HOOK Off hook
     *
     *  BS_IDLE Idle
     *
     *  BS_CLEAR_PENDING Clear pending (for T1 only)
     *
     *  BS_DIALING Dialing
     *
     *  BS_RINGING Ringing
     *
     *  BS_CONNECTED Connected
     *
     *  BS_SIGNALING Channel is a D-Channel used for signalling
     *
     *  BS_CUT_THROUGH Channel is a drop and insert source / destination
     *
     *  BS_CURRENT_D Channel is a current D-Channel (NFAS signalling)
     *
     *  BS_BACKUP_D Channel is a backup D-Channel (NFAS signalling)
     *
     *  BS_MAINTENANCE Maintenance state
     *
     *  BS_SPC_UP Semi Permanent Circuit Up
     *
     *  BS_DISABLED Disabled
     *
     *  BS_DIALING_NET2NET Dialing NET2NET
     *
     *  BS_RINGING_NET2NET Ringing NET2NET
     *
     *  BS_CONNECTED_NET2NET Connected NET2NET
     *
     *  BS_DIALING_DTPT Dialing DTPT
     *
     *  BS_CONNECTED_DTPT Connected DTPT
     *
     *  BS_NUMBER_OF_STATES
     */
typedef enum DS0ChannelState {
    BS_UNAVAILABLE,
    BS_UNUSED,
    BS_OUT_OF_SERVICE,
#if ( MDF_NAILED_CHANS == FYES )
    BS_NAILED_UP,
#endif /* ( MDF_NAILED_CHANS == FYES ) */
#if ( MDF_POTS == FYES )
    BS_HELD,
#endif /* ( MDF_POTS == FYES ) */
#if ( MDF_SS7GW_NMI == FYES )
    BS_OFF_HOOK,
#endif /* ( MDF_SS7GW_NMI == FYES ) */
    BS_IDLE,
    BS_CLEAR_PENDING,
    BS_DIALING,
    BS_RINGING,
    BS_CONNECTED,
    BS_SIGNALING,
    BS_CUT_THROUGH,
    BS_CURRENT_D,
    BS_BACKUP_D,
    BS_MAINTENANCE,
#if ( MDF_AUSTRALIAN_SPC == FYES )
    BS_SPC_UP,
#endif /* ( MDF_AUSTRALIAN_SPC == FYES ) */
    BS_DISABLED,
#if ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES )
    BS_DIALING_NET2NET,
#endif /* ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES ) */
#if ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES )
    BS_RINGING_NET2NET,
#endif /* ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES ) */
#if ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES )
    BS_CONNECTED_NET2NET,
#endif /* ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES ) */
#if ( MDF_T_ONLINE == FYES )
    BS_DIALING_DTPT,
#endif /* ( MDF_T_ONLINE == FYES ) */
#if ( MDF_T_ONLINE == FYES )
    BS_CONNECTED_DTPT,
#endif /* ( MDF_T_ONLINE == FYES ) */
    BS_NUMBER_OF_STATES
} DS0ChannelState;


static __inline__ Bool
validDS0ChannelState (int x)
{
    switch (x) {
    case BS_UNAVAILABLE:
    case BS_UNUSED:
    case BS_OUT_OF_SERVICE:
#if ( MDF_NAILED_CHANS == FYES )
    case BS_NAILED_UP:
#endif /* ( MDF_NAILED_CHANS == FYES ) */
#if ( MDF_POTS == FYES )
    case BS_HELD:
#endif /* ( MDF_POTS == FYES ) */
#if ( MDF_SS7GW_NMI == FYES )
    case BS_OFF_HOOK:
#endif /* ( MDF_SS7GW_NMI == FYES ) */
    case BS_IDLE:
    case BS_CLEAR_PENDING:
    case BS_DIALING:
    case BS_RINGING:
    case BS_CONNECTED:
    case BS_SIGNALING:
    case BS_CUT_THROUGH:
    case BS_CURRENT_D:
    case BS_BACKUP_D:
    case BS_MAINTENANCE:
#if ( MDF_AUSTRALIAN_SPC == FYES )
    case BS_SPC_UP:
#endif /* ( MDF_AUSTRALIAN_SPC == FYES ) */
    case BS_DISABLED:
#if ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES )
    case BS_DIALING_NET2NET:
#endif /* ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES ) */
#if ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES )
    case BS_RINGING_NET2NET:
#endif /* ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES ) */
#if ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES )
    case BS_CONNECTED_NET2NET:
#endif /* ( MDF_T_ONLINE == FYES || MDF_NET_2_NET_ROUT == FYES ) */
#if ( MDF_T_ONLINE == FYES )
    case BS_DIALING_DTPT:
#endif /* ( MDF_T_ONLINE == FYES ) */
#if ( MDF_T_ONLINE == FYES )
    case BS_CONNECTED_DTPT:
#endif /* ( MDF_T_ONLINE == FYES ) */
    case BS_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * HChannelState:
     *
     * The various states of our XDSL Hyper Channels
     *
     *  HS_DOWN Not available
     *
     *  HS_UP Available
     *
     *  HS_IDLE Idle
     *
     *  HS_CLEAR Clearing
     *
     *  HS_DIALING Dialing
     *
     *  HS_RINGING Ringing
     *
     *  HS_CONNECTED Connected
     *
     *  HS_TEST Testing
     *
     *  HS_DISABLED Disabled
     *
     *  HS_NUMBER_OF_STATES
     */
typedef enum HChannelState {
    HS_DOWN,
    HS_UP,
    HS_IDLE,
    HS_CLEAR,
    HS_DIALING,
    HS_RINGING,
    HS_CONNECTED,
    HS_TEST,
    HS_DISABLED,
    HS_NUMBER_OF_STATES
} HChannelState;


static __inline__ Bool
validHChannelState (int x)
{
    switch (x) {
    case HS_DOWN:
    case HS_UP:
    case HS_IDLE:
    case HS_CLEAR:
    case HS_DIALING:
    case HS_RINGING:
    case HS_CONNECTED:
    case HS_TEST:
    case HS_DISABLED:
    case HS_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * T1NetworkInterfaceState:
     *
     * Stores status of a single T1 Line.
     *
     *  physicalAddress Identifies the T1 Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  ds0ChannelState The state of each individual channel.
     *
     *  channelErrorCount The number of errors experienced by each channel.
     *
     *  lossOfCarrier Indicates a loss of carrier on the line.
     *
     *  lossOfSync Indicates a loss of synchronization on the line.
     *
     *  aisReceive Indicates far end is sending Alarm Indication Signal.
     *
     *  yellowReceive Indicates recieving far end loss of frame(a.k.a. Yellow
     *                                  Alarm).
     *
     *  berReceive Indicates bit error rate threshold reached.
     *
     *  carrierEstablished Indicates no error conditions..
     *
     *  networkLoopback Indicates line looped back out to network
     */

#if ( NETIF & ( T1 | E1 ) )

typedef struct lineStateProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physicalAddress;
#endif /* ( PLATFORM & TNT ) */
    T1LineState                         lineState;
    DS0ChannelState                     ds0ChannelState[ GEN_B_CHANNELS_PER_DSL ];
    Word                                channelErrorCount[ GEN_B_CHANNELS_PER_DSL ];
    Boolean                             lossOfCarrier;
    Boolean                             lossOfSync;
    Boolean                             aisReceive;
    Boolean                             yellowReceive;
    Boolean                             berReceive;
    Boolean                             carrierEstablished;
#if ( PLATFORM & TNT )
    Boolean                             networkLoopback;
#endif /* ( PLATFORM & TNT ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
T1NetworkInterfaceState;

#endif /* ( NETIF & ( T1 | E1 ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_T1_STAT_INDEX_FIELD	1


    /*
     * DS2LineState:
     *
     * The various states that a DS2 line can be in.
     *
     *  LS_DS2_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_DS2_DISABLED Line disabled.
     *
     *  LS_DS2_LOSS_OF_SYNC Red-alarm state, plus or minus.
     *
     *  LS_DS2_YELLOW_ALARM Yellow-alarm state.
     *
     *  LS_DS2_AIS_RECEIVE Receiving keep-alive signal.
     *
     *  LS_DS2_ACTIVE Multipoint established.
     *
     *  LS_DS2_NUMBER_OF_STATES
     */

#if ( NETIF & CDS3 )

typedef enum DS2LineState {
    LS_DS2_DOES_NOT_EXIST,
    LS_DS2_DISABLED,
    LS_DS2_LOSS_OF_SYNC,
    LS_DS2_YELLOW_ALARM,
    LS_DS2_AIS_RECEIVE,
    LS_DS2_ACTIVE,
    LS_DS2_NUMBER_OF_STATES
} DS2LineState;

#endif /* ( NETIF & CDS3 ) */

#if ( NETIF & CDS3 )



static __inline__ Bool
validDS2LineState (int x)
{
    switch (x) {
    case LS_DS2_DOES_NOT_EXIST:
    case LS_DS2_DISABLED:
    case LS_DS2_LOSS_OF_SYNC:
    case LS_DS2_YELLOW_ALARM:
    case LS_DS2_AIS_RECEIVE:
    case LS_DS2_ACTIVE:
    case LS_DS2_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & CDS3 ) */

    /*
     * DS3LineState:
     *
     * The various states that a DS3 line can be in.
     *
     *  LS_DS3_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_DS3_DISABLED Line disabled.
     *
     *  LS_DS3_LOSS_OF_SYNC Red-alarm state, plus or minus.
     *
     *  LS_DS3_YELLOW_ALARM Yellow-alarm state.
     *
     *  LS_DS3_AIS_RECEIVE Receiving keep-alive signal.
     *
     *  LS_DS3_IDLE_RECEIVE Receiving idle signal.
     *
     *  LS_DS3_WRONG_FRAME The other side is configured for a different DS3
     *                                  application.
     *
     *  LS_DS3_ACTIVE Multipoint established.
     *
     *  LS_DS3_NUMBER_OF_STATES
     */

#if ( NETIF & ( CDS3 | RDS3 ) )

typedef enum DS3LineState {
    LS_DS3_DOES_NOT_EXIST,
    LS_DS3_DISABLED,
    LS_DS3_LOSS_OF_SYNC,
    LS_DS3_YELLOW_ALARM,
    LS_DS3_AIS_RECEIVE,
    LS_DS3_IDLE_RECEIVE,
    LS_DS3_WRONG_FRAME,
    LS_DS3_ACTIVE,
    LS_DS3_NUMBER_OF_STATES
} DS3LineState;

#endif /* ( NETIF & ( CDS3 | RDS3 ) ) */

#if ( NETIF & ( CDS3 | RDS3 ) )



static __inline__ Bool
validDS3LineState (int x)
{
    switch (x) {
    case LS_DS3_DOES_NOT_EXIST:
    case LS_DS3_DISABLED:
    case LS_DS3_LOSS_OF_SYNC:
    case LS_DS3_YELLOW_ALARM:
    case LS_DS3_AIS_RECEIVE:
    case LS_DS3_IDLE_RECEIVE:
    case LS_DS3_WRONG_FRAME:
    case LS_DS3_ACTIVE:
    case LS_DS3_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & ( CDS3 | RDS3 ) ) */

    /*
     * DS3NetworkInterfaceState:
     *
     * Stores status of a single DS3 Line.
     *
     *  physicalAddress Identifies the T1 Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  ds2LineState The state of the DS2s that make up the DS3.
     */

#if ( NETIF & ( CDS3 | RDS3 ) )

typedef struct ds3LineStateProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physicalAddress;
#endif /* ( PLATFORM & TNT ) */
    DS3LineState                        lineState;
#if ( NETIF & CDS3 )
    DS2LineState                        ds2LineState[ DS3_NUM_DS2_CHANNELS ];
#endif /* ( NETIF & CDS3 ) */
}
#if ( USERIF & CLI )
__PACK__
#endif
DS3NetworkInterfaceState;

#endif /* ( NETIF & ( CDS3 | RDS3 ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_DS3_STAT_INDEX_FIELD	1


    /*
     * SwanLineState:
     *
     * The various states that a Swan line can be in.
     *
     *  LS_SWAN_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_SWAN_DISABLED Line disabled.
     *
     *  LS_SWAN_ACTIVE Multipoint established.
     *
     *  LS_SWAN_NUMBER_OF_STATES
     */

#if ( NETIF & SWAN )

typedef enum SwanLineState {
    LS_SWAN_DOES_NOT_EXIST,
    LS_SWAN_DISABLED,
    LS_SWAN_ACTIVE,
    LS_SWAN_NUMBER_OF_STATES
} SwanLineState;

#endif /* ( NETIF & SWAN ) */

#if ( NETIF & SWAN )



static __inline__ Bool
validSwanLineState (int x)
{
    switch (x) {
    case LS_SWAN_DOES_NOT_EXIST:
    case LS_SWAN_DISABLED:
    case LS_SWAN_ACTIVE:
    case LS_SWAN_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & SWAN ) */

    /*
     * SwanLineStatus:
     *
     * Stores status of a single Swan Line.
     *
     *  physAddr Identifies the Swan Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  errorCount The number of errors experienced by the line.
     */

#if ( NETIF & SWAN )

typedef struct swanLineStatusProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    SwanLineState                       lineState;
    Word                                errorCount;
}
#if ( USERIF & CLI )
__PACK__
#endif
SwanLineStatus;

#endif /* ( NETIF & SWAN ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_SWAN_STAT_INDEX_FIELD	1


    /*
     * SdslLineState:
     *
     * The various states that a Sdsl line can be in.
     *
     *  LS_SDSL_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_SDSL_DISABLED Line disabled.
     *
     *  LS_SDSL_ACTIVE Multipoint established.
     *
     *  LS_SDSL_NUMBER_OF_STATES
     */

#if ( NETIF & ( XDSL_IF | XDSL_VOICE ) )

typedef enum SdslLineState {
    LS_SDSL_DOES_NOT_EXIST,
    LS_SDSL_DISABLED,
    LS_SDSL_ACTIVE,
    LS_SDSL_NUMBER_OF_STATES
} SdslLineState;

#endif /* ( NETIF & ( XDSL_IF | XDSL_VOICE ) ) */

#if ( NETIF & ( XDSL_IF | XDSL_VOICE ) )



static __inline__ Bool
validSdslLineState (int x)
{
    switch (x) {
    case LS_SDSL_DOES_NOT_EXIST:
    case LS_SDSL_DISABLED:
    case LS_SDSL_ACTIVE:
    case LS_SDSL_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & ( XDSL_IF | XDSL_VOICE ) ) */

    /*
     * SdslLineStatus:
     *
     * Stores status of a single Sdsl Line.
     *
     *  physAddr Identifies the Sdsl Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  errorCount The number of errors experienced by the line.
     *
     *  physicalStatus Sdsl physical layer status parameters.
     *
     *  physicalStatistic Sdsl physical layer statistical parameters.
     */

#if ( NETIF & ( XDSL_IF | XDSL_VOICE ) )

typedef struct sdslLineStatusProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    SdslLineState                       lineState;
    Word                                errorCount;
    MibProfSdslStatus                   physicalStatus;
    MibProfSdslStatistic                physicalStatistic;
}
#if ( USERIF & CLI )
__PACK__
#endif
SdslLineStatus;

#endif /* ( NETIF & ( XDSL_IF | XDSL_VOICE ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_SDSL_STAT_INDEX_FIELD	1


    /*
     * CadslLineState:
     *
     * The various states that a Cadsl line can be in.
     *
     *  LS_CADSL_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_CADSL_DISABLED Line disabled.
     *
     *  LS_CADSL_ACTIVE Multipoint established.
     *
     *  LS_CADSL_NUMBER_OF_STATES
     */

#if ( NETIF & ( XDSL_IF ) )

typedef enum CadslLineState {
    LS_CADSL_DOES_NOT_EXIST,
    LS_CADSL_DISABLED,
    LS_CADSL_ACTIVE,
    LS_CADSL_NUMBER_OF_STATES
} CadslLineState;

#endif /* ( NETIF & ( XDSL_IF ) ) */

#if ( NETIF & ( XDSL_IF ) )



static __inline__ Bool
validCadslLineState (int x)
{
    switch (x) {
    case LS_CADSL_DOES_NOT_EXIST:
    case LS_CADSL_DISABLED:
    case LS_CADSL_ACTIVE:
    case LS_CADSL_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & ( XDSL_IF ) ) */

    /*
     * CadslLineStatus:
     *
     * Stores status of a single Cadsl Line.
     *
     *  physAddr Identifies the Cadsl Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  errorCount The number of errors experienced by the line.
     *
     *  physicalStatus AdslCap physical layer status parameters.
     *
     *  physicalStatistic AdslCap physical layer statistical parameters.
     */

#if ( NETIF & ( XDSL_IF ) )

typedef struct cadslLineStatusProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    CadslLineState                      lineState;
    Word                                errorCount;
    MibProfAdslCapStatus                physicalStatus;
    MibProfAdslCapStatistic             physicalStatistic;
}
#if ( USERIF & CLI )
__PACK__
#endif
CadslLineStatus;

#endif /* ( NETIF & ( XDSL_IF ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_CADSL_STAT_INDEX_FIELD	1


    /*
     * DadslLineState:
     *
     * The various states that a Dadsl line can be in.
     *
     *  LS_DADSL_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_DADSL_DISABLED Line disabled.
     *
     *  LS_DADSL_ACTIVE Multipoint established.
     *
     *  LS_DADSL_NUMBER_OF_STATES
     */

#if ( NETIF & ( XDSL_IF ) )

typedef enum DadslLineState {
    LS_DADSL_DOES_NOT_EXIST,
    LS_DADSL_DISABLED,
    LS_DADSL_ACTIVE,
    LS_DADSL_NUMBER_OF_STATES
} DadslLineState;

#endif /* ( NETIF & ( XDSL_IF ) ) */

#if ( NETIF & ( XDSL_IF ) )



static __inline__ Bool
validDadslLineState (int x)
{
    switch (x) {
    case LS_DADSL_DOES_NOT_EXIST:
    case LS_DADSL_DISABLED:
    case LS_DADSL_ACTIVE:
    case LS_DADSL_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & ( XDSL_IF ) ) */

    /*
     * DadslLineStatus:
     *
     * Stores status of a single Dadsl Line.
     *
     *  physAddr Identifies the Dadsl Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  errorCount The number of errors experienced by the line.
     *
     *  physicalStatus AdslDmt physical layer status parameters.
     *
     *  physicalStatistic AdslDmt physical layer statistical parameters.
     */

#if ( NETIF & ( XDSL_IF ) )

typedef struct dadslLineStatusProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    DadslLineState                      lineState;
    Word                                errorCount;
    MibProfAdslDmtAwStatus              physicalStatus;
    MibProfAdslDmtAwStatistic           physicalStatistic;
}
#if ( USERIF & CLI )
__PACK__
#endif
DadslLineStatus;

#endif /* ( NETIF & ( XDSL_IF ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_DADSL_STAT_INDEX_FIELD	1


    /*
     * Uds3LineState:
     *
     * The various states that a Uds3 line can be in.
     *
     *  LS_UDS3_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_UDS3_DISABLED Line disabled.
     *
     *  LS_UDS3_LOSS_OF_SIGNAL Near end loss of singal.
     *
     *  LS_UDS3_LOSS_OF_FRAME Near end loss of frame (a.k.a., Red-alarm).
     *
     *  LS_UDS3_YELLOW_RECEIVE Receiving far end loss of frame (a.k.a. Yellow
     *                                  Alarm).
     *
     *  LS_UDS3_AIS_RECEIVE Receiving Alarm Indication Signal.
     *
     *  LS_UDS3_ACTIVE Multipoint established.
     *
     *  LS_UDS3_NUMBER_OF_STATES
     */

#if ( NETIF & ( UDS3 ) )

typedef enum Uds3LineState {
    LS_UDS3_DOES_NOT_EXIST,
    LS_UDS3_DISABLED,
    LS_UDS3_LOSS_OF_SIGNAL,
    LS_UDS3_LOSS_OF_FRAME,
    LS_UDS3_YELLOW_RECEIVE,
    LS_UDS3_AIS_RECEIVE,
    LS_UDS3_ACTIVE,
    LS_UDS3_NUMBER_OF_STATES
} Uds3LineState;

#endif /* ( NETIF & ( UDS3 ) ) */

#if ( NETIF & ( UDS3 ) )



static __inline__ Bool
validUds3LineState (int x)
{
    switch (x) {
    case LS_UDS3_DOES_NOT_EXIST:
    case LS_UDS3_DISABLED:
    case LS_UDS3_LOSS_OF_SIGNAL:
    case LS_UDS3_LOSS_OF_FRAME:
    case LS_UDS3_YELLOW_RECEIVE:
    case LS_UDS3_AIS_RECEIVE:
    case LS_UDS3_ACTIVE:
    case LS_UDS3_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & ( UDS3 ) ) */

    /*
     * Uds3LineStatus:
     *
     * Stores status of a single Uds3 Line.
     *
     *  physAddr Identifies the Uds3 Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  FBitErrorCount The number of F-bit or M-bit errors experienced by the
     *                                  line.
     *
     *  PBitErrorCount The number of P-bit errors experienced by the line.
     *
     *  CPBitErrorCount The number of C-bit parity errors experienced by the
     *                                  line.
     *
     *  FEBErrorCount The number of far-end block errors experienced by the
     *                                  line.
     *
     *  BPVErrorCount The number of bipolar violation errors experienced by the
     *                                  line.
     *
     *  lossOfSignal Indicates a loss of signal on the line.
     *
     *  lossOfFrame Indicates a loss of frame on the line (a.k.a. Red Alarm).
     *
     *  yellowReceive Indicates receiving far end loss of frame (a.k.a. Yellow
     *                                  Alarm).
     *
     *  aisReceive Indicates far end is sending Alarm Indication Signal.
     */

#if ( NETIF & ( UDS3 ) )

typedef struct uds3LineStatusProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    Uds3LineState                       lineState;
    Word                                FBitErrorCount;
    Word                                PBitErrorCount;
    Word                                CPBitErrorCount;
    Word                                FEBErrorCount;
    Word                                BPVErrorCount;
    Boolean                             lossOfSignal;
    Boolean                             lossOfFrame;
    Boolean                             yellowReceive;
    Boolean                             aisReceive;
}
#if ( USERIF & CLI )
__PACK__
#endif
Uds3LineStatus;

#endif /* ( NETIF & ( UDS3 ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_UDS3_STAT_INDEX_FIELD	1


    /*
     * VdslLineStatus:
     *
     * Stores status of a single Vdsl Line.
     *
     *  physAddr Identifies the Vdsl Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  hChannelState The state of each individual channel.
     *
     *  channelErrorCount The number of errors experienced by each channel.
     *
     *  physicalStatus Sdsl physical layer status parameters.
     *
     *  physicalStatistic Sdsl physical layer statistical parameters.
     */

#if ( NETIF & ( XDSL_VOICE ) )

typedef struct vdslLineStatusProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    SdslLineState                       lineState;
    HChannelState                       hChannelState[ VDSL_H_CHANNELS_PER_DSL ];
    Word                                channelErrorCount[ VDSL_H_CHANNELS_PER_DSL ];
    MibProfSdslStatus                   physicalStatus;
    MibProfSdslStatistic                physicalStatistic;
}
#if ( USERIF & CLI )
__PACK__
#endif
VdslLineStatus;

#endif /* ( NETIF & ( XDSL_VOICE ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_VDSL_STAT_INDEX_FIELD	1


    /*
     * BRILineState:
     *
     * The various states that a BRI line / ISDN DSL can be in.
     *
     *  LS_BRI_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_BRI_DISABLED Line disabled.
     *
     *  LS_NO_PHYSICAL No physical link.
     *
     *  LS_NO_LOGICAL Logical link failure.
     *
     *  LS_NO_MGMT Layer 2 established but management entities not initialized.
     *
     *  LS_POINT_TO_POINT Point to point established.
     *
     *  LS_MULTIPOINT_1 Multipoint established.
     *
     *  LS_MULTIPOINT_2 Multipoint established.
     *
     *  LS_BRI_NUMBER_OF_STATES
     */

#if ( NETIF & ( BRI ) ) && ( PLATFORM & ( TNT ) )

typedef enum BRILineState {
    LS_BRI_DOES_NOT_EXIST,
    LS_BRI_DISABLED,
    LS_NO_PHYSICAL,
    LS_NO_LOGICAL,
    LS_NO_MGMT,
    LS_POINT_TO_POINT,
    LS_MULTIPOINT_1,
    LS_MULTIPOINT_2,
    LS_BRI_NUMBER_OF_STATES
} BRILineState;

#endif /* ( NETIF & ( BRI ) ) && ( PLATFORM & ( TNT ) ) */

#if ( NETIF & ( BRI ) ) && ( PLATFORM & ( TNT ) )



static __inline__ Bool
validBRILineState (int x)
{
    switch (x) {
    case LS_BRI_DOES_NOT_EXIST:
    case LS_BRI_DISABLED:
    case LS_NO_PHYSICAL:
    case LS_NO_LOGICAL:
    case LS_NO_MGMT:
    case LS_POINT_TO_POINT:
    case LS_MULTIPOINT_1:
    case LS_MULTIPOINT_2:
    case LS_BRI_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( NETIF & ( BRI ) ) && ( PLATFORM & ( TNT ) ) */

    /*
     * BRINetworkInterfaceState:
     *
     * Stores status of a single BRI Line.
     *
     *  physAddr Identifies the BRI Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  ds0ChannelState The state of each individual channel.
     *
     *  channelErrorCount The number of errors experienced by each channel.
     */

#if ( NETIF & ( BRI ) ) && ( PLATFORM & ( TNT ) )

typedef struct briLineStateProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    BRILineState                        lineState;
    DS0ChannelState                     ds0ChannelState[ BRI_B_CHANNELS_PER_DSL ];
    Word                                channelErrorCount[ BRI_B_CHANNELS_PER_DSL ];
}
#if ( USERIF & CLI )
__PACK__
#endif
BRINetworkInterfaceState;

#endif /* ( NETIF & ( BRI ) ) && ( PLATFORM & ( TNT ) ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_BRI_STAT_INDEX_FIELD	1


    /*
     * Ds3AtmLineState:
     *
     * The various states that a Ds3Atm line can be in.
     *
     *  LS_DS3_ATM_DOES_NOT_EXIST Link is not physically stuffed on board.
     *
     *  LS_DS3_ATM_DISABLED Line disabled.
     *
     *  LS_DS3_ATM_LOSS_OF_SIGNAL Near end loss of singal.
     *
     *  LS_DS3_ATM_LOSS_OF_FRAME Near end loss of frame (a.k.a., Red-alarm).
     *
     *  LS_DS3_ATM_YELLOW_RECEIVE Receiving far end loss of frame (a.k.a.
     *                                  Yellow Alarm).
     *
     *  LS_DS3_ATM_AIS_RECEIVE Receiving Alarm Indication Signal.
     *
     *  LS_DS3_ATM_ACTIVE Multipoint established.
     *
     *  LS_DS3_ATM_NUMBER_OF_STATES
     */

#if ( MDF_ATM )

typedef enum Ds3AtmLineState {
    LS_DS3_ATM_DOES_NOT_EXIST,
    LS_DS3_ATM_DISABLED,
    LS_DS3_ATM_LOSS_OF_SIGNAL,
    LS_DS3_ATM_LOSS_OF_FRAME,
    LS_DS3_ATM_YELLOW_RECEIVE,
    LS_DS3_ATM_AIS_RECEIVE,
    LS_DS3_ATM_ACTIVE,
    LS_DS3_ATM_NUMBER_OF_STATES
} Ds3AtmLineState;

#endif /* ( MDF_ATM ) */

#if ( MDF_ATM )



static __inline__ Bool
validDs3AtmLineState (int x)
{
    switch (x) {
    case LS_DS3_ATM_DOES_NOT_EXIST:
    case LS_DS3_ATM_DISABLED:
    case LS_DS3_ATM_LOSS_OF_SIGNAL:
    case LS_DS3_ATM_LOSS_OF_FRAME:
    case LS_DS3_ATM_YELLOW_RECEIVE:
    case LS_DS3_ATM_AIS_RECEIVE:
    case LS_DS3_ATM_ACTIVE:
    case LS_DS3_ATM_NUMBER_OF_STATES:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( MDF_ATM ) */

    /*
     * Ds3AtmLineStatus:
     *
     * Stores status of a single Ds3Atm Line.
     *
     *  physAddr Identifies the Ds3Atm Line within the TNT system.
     *
     *  lineState The overall state of the line.
     *
     *  FBitErrorCount The number of F-bit or M-bit errors experienced by the
     *                                  line.
     *
     *  PBitErrorCount The number of P-bit errors experienced by the line.
     *
     *  CPBitErrorCount The number of C-bit parity errors experienced by the
     *                                  line.
     *
     *  FEBErrorCount The number of far-end block errors experienced by the
     *                                  line.
     *
     *  BPVErrorCount The number of bipolar violation errors experienced by the
     *                                  line.
     *
     *  lossOfSignal Indicates a loss of signal on the line.
     *
     *  lossOfFrame Indicates a loss of frame on the line (a.k.a. Red Alarm).
     *
     *  yellowReceive Indicates receiving far end loss of frame (a.k.a. Yellow
     *                                  Alarm).
     *
     *  aisReceive Indicates far end is sending Alarm Indication Signal.
     */

#if ( MDF_ATM )

typedef struct ds3AtmLineStatusProfile {
#if ( PLATFORM & TNT )
    PhysicalAddress                     physAddr;
#endif /* ( PLATFORM & TNT ) */
    Ds3AtmLineState                     lineState;
    Word                                FBitErrorCount;
    Word                                PBitErrorCount;
    Word                                CPBitErrorCount;
    Word                                FEBErrorCount;
    Word                                BPVErrorCount;
    Boolean                             lossOfSignal;
    Boolean                             lossOfFrame;
    Boolean                             yellowReceive;
    Boolean                             aisReceive;
}
#if ( USERIF & CLI )
__PACK__
#endif
Ds3AtmLineStatus;

#endif /* ( MDF_ATM ) */

 	/* The field ID of the Index Field for this profile. */
#define	MIB_DS3_ATM_STAT_INDEX_FIELD	1


#endif /* MIBSTAT_H */

