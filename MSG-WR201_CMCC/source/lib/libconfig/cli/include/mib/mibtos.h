    /*
     * Notice: file generated by MIBMAKE from mibtos.mdf
     * DO NOT EDIT THIS FILE!!!  Edit mibtos.mdf
     */
#line 3 "mibtos.mdf"
/*
 *
 * $Id: mibtos.h,v 1.1.1.1 2011/08/17 11:11:56 brwang Exp $
 *
 *      Copyright (c) 1995 UTT Technologies, Inc.
 *      All rights reserved.
 *      Use of copyright notice does not imply publication.
 *
 *
 *                      CONFIDENTIAL INFORMATION
 *                      ------------------------
 *      This Document contains Confidential Information or Trade Secrets,
 *      or both, which are the property of UTT Technologies, Inc.
 *      This document may not be copied, reproduced, reduced to any
 *      electronic medium or machine readable form or otherwise duplicated
 *      and the information herein may not be used, disseminated or
 *      otherwise disclosed, except with the prior written consent of
 *      UTT Technologies, Inc.
 */

    /*
     * Contains IP Type of Service related parameters
     */
#line 29 "mibtos.mdf"

#if ( ( !defined( MIBTOS_H ) ) && ( IPTOS == FYES ) )
# define MIBTOS_H


    /* IP Type of service definition */
extern const MibFieldComplexParams	mibProfIpTosParams;

extern ConstPtr
mibFactoryTosProfile( MibProfileType	mibType,
		       Uint32		info );

extern const char* const		       mibProfIpTos;
extern const MibFieldEnumParams                tosPriParams;
extern const MibFieldEnumParams                tosParams;
extern const MibFieldEnumParams                tosFlow;


    /*
     * TosPri:
     *
     *
     *  TOS_PRI_NORMAL Normal priority.
     *
     *  TOS_PRI_ONE Priority level 1.
     *
     *  TOS_PRI_TWO Priority level 2.
     *
     *  TOS_PRI_THREE Priority level 3.
     *
     *  TOS_PRI_FOUR Priority level 4.
     *
     *  TOS_PRI_FIVE Priority level 5.
     *
     *  TOS_PRI_SIX Priority level 6.
     *
     *  TOS_PRI_SEVEN Priority level 7.
     */
typedef enum TosPri {
#line 65 "mibtos.mdf"
    TOS_PRI_NORMAL = 0,
#line 68 "mibtos.mdf"
    TOS_PRI_ONE = 0x20,
#line 71 "mibtos.mdf"
    TOS_PRI_TWO = 0x40,
#line 74 "mibtos.mdf"
    TOS_PRI_THREE = 0x60,
#line 77 "mibtos.mdf"
    TOS_PRI_FOUR = 0x80,
#line 80 "mibtos.mdf"
    TOS_PRI_FIVE = 0xa0,
#line 83 "mibtos.mdf"
    TOS_PRI_SIX = 0xc0,
#line 86 "mibtos.mdf"
    TOS_PRI_SEVEN = 0xe0
} TosPri;


static __inline__ Bool
validTosPri (int x)
{
    switch (x) {
#line 65 "mibtos.mdf"
    case TOS_PRI_NORMAL:
#line 68 "mibtos.mdf"
    case TOS_PRI_ONE:
#line 71 "mibtos.mdf"
    case TOS_PRI_TWO:
#line 74 "mibtos.mdf"
    case TOS_PRI_THREE:
#line 77 "mibtos.mdf"
    case TOS_PRI_FOUR:
#line 80 "mibtos.mdf"
    case TOS_PRI_FIVE:
#line 83 "mibtos.mdf"
    case TOS_PRI_SIX:
#line 86 "mibtos.mdf"
    case TOS_PRI_SEVEN:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * Tos:
     *
     *
     *  TOS_BYTE_NORMAL Normal.
     *
     *  TOS_BYTE_COST Minimize monetary cost.
     *
     *  TOS_BYTE_RELIABILITY Maximize reliability.
     *
     *  TOS_BYTE_THROUGHPUT Maximize throughput.
     *
     *  TOS_BYTE_LATENCY Minimize delay.
     */
typedef enum Tos {
#line 93 "mibtos.mdf"
    TOS_BYTE_NORMAL = 0,
#line 96 "mibtos.mdf"
    TOS_BYTE_COST = 0x02,
#line 99 "mibtos.mdf"
    TOS_BYTE_RELIABILITY = 0x04,
#line 102 "mibtos.mdf"
    TOS_BYTE_THROUGHPUT = 0x08,
#line 105 "mibtos.mdf"
    TOS_BYTE_LATENCY = 0x10
} Tos;


static __inline__ Bool
validTos (int x)
{
    switch (x) {
#line 93 "mibtos.mdf"
    case TOS_BYTE_NORMAL:
#line 96 "mibtos.mdf"
    case TOS_BYTE_COST:
#line 99 "mibtos.mdf"
    case TOS_BYTE_RELIABILITY:
#line 102 "mibtos.mdf"
    case TOS_BYTE_THROUGHPUT:
#line 105 "mibtos.mdf"
    case TOS_BYTE_LATENCY:
        return TRUE;
    default:
        return FALSE;
    }
}

    /*
     * TosFlow:
     *
     *
     *  TOS_APPLYTO_INCOMING Tag incoming traffic.
     *
     *  TOS_APPLYTO_OUTGOING Tag outgoing traffic.
     *
     *  TOS_APPLYTO_BOTH Tag both incoming and outgoing traffic.
     */

#if ( IPTOS == FYES )

typedef enum TosFlow {
#line 114 "mibtos.mdf"
    TOS_APPLYTO_INCOMING = 0x400,
#line 117 "mibtos.mdf"
    TOS_APPLYTO_OUTGOING = 0x800,
#line 120 "mibtos.mdf"
    TOS_APPLYTO_BOTH = 0xC00
} TosFlow;

#endif /* ( IPTOS == FYES ) */

#if ( IPTOS == FYES )



static __inline__ Bool
validTosFlow (int x)
{
    switch (x) {
#line 114 "mibtos.mdf"
    case TOS_APPLYTO_INCOMING:
#line 117 "mibtos.mdf"
    case TOS_APPLYTO_OUTGOING:
#line 120 "mibtos.mdf"
    case TOS_APPLYTO_BOTH:
        return TRUE;
    default:
        return FALSE;
    }
}

#endif /* ( IPTOS == FYES ) */

    /*
     * MibProfIpTos:
     *
     * A profile to store IP type of service related parameters. profile is
     * stored in the connection profile.
     *
     *  tosActive Activate type of service for this connection.
     *
     *  precedence Tag the precedence bits (priority bits) in the TOS octet of
     *                                  IP datagram header with this value when
     *                                  match occurs.
     *
     *  tos Tag the type of service field in the TOS octet of IP datagram
     *                                  header with this value when match
     *                                  occurs.
     *
     *  direction Define how the type-of-service applies to data flow for this
     *                                  connection.
     */

#if ( IPTOS == FYES )

typedef struct mibProfIpTos {
#line 159 "mibtos.mdf"
    Bool                                tosActive;
#line 163 "mibtos.mdf"
    TosPri                              precedence;
#line 168 "mibtos.mdf"
    Tos                                 tos;
#line 174 "mibtos.mdf"
    TosFlow                             direction;
}
#if ( USERIF & CLI )
__PACK__
#endif
MibProfIpTos;

#endif /* ( IPTOS == FYES ) */
#line 227 "mibtos.mdf"

#endif /* ((! defined( MIBTOS_H )) && (IPTOS == FYES) ) */

