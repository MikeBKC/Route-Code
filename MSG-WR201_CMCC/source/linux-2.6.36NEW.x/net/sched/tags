!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CTTUPLE	cls_flow.c	214;"	d	file:
CTTUPLE	cls_flow.c	223;"	d	file:
DEFAULT_HASH_SIZE	cls_tcindex.c	24;"	d	file:
DP	sch_gred.c	/^	u32      	DP;		\/* the drop pramaters *\/$/;"	m	struct:gred_sched_data	file:
DPs	sch_gred.c	/^	u32 		DPs;$/;"	m	struct:gred_sched	file:
EM_TEXT_PRIV	em_text.c	31;"	d	file:
ESFQ_HEAD	sch_esfq.c	74;"	d	file:
ESFQ_TAIL	sch_esfq.c	75;"	d	file:
FMASK	sch_teql.c	74;"	d	file:
GACT_TAB_MASK	act_gact.c	26;"	d	file:
GRED_DEF_PRIO	sch_gred.c	29;"	d	file:
GRED_RIO_MODE	sch_gred.c	/^	GRED_RIO_MODE,$/;"	e	enum:__anon1	file:
GRED_VQ_MASK	sch_gred.c	30;"	d	file:
GRED_WRED_MODE	sch_gred.c	/^	GRED_WRED_MODE = 1,$/;"	e	enum:__anon1	file:
HFSC_FSC	sch_hfsc.c	/^	HFSC_FSC = 0x2,$/;"	e	enum:hfsc_class_flags	file:
HFSC_RSC	sch_hfsc.c	/^	HFSC_RSC = 0x1,$/;"	e	enum:hfsc_class_flags	file:
HFSC_USC	sch_hfsc.c	/^	HFSC_USC = 0x4$/;"	e	enum:hfsc_class_flags	file:
HTB_CANT_SEND	sch_htb.c	/^	HTB_CANT_SEND,		\/* class can't send and can't borrow *\/$/;"	e	enum:htb_cmode	file:
HTB_CAN_SEND	sch_htb.c	/^	HTB_CAN_SEND		\/* class can send *\/$/;"	e	enum:htb_cmode	file:
HTB_DIRECT	sch_htb.c	188;"	d	file:
HTB_MAY_BORROW	sch_htb.c	/^	HTB_MAY_BORROW,		\/* class can't send but may borrow *\/$/;"	e	enum:htb_cmode	file:
HTB_VER	sch_htb.c	57;"	d	file:
HTB_WARN_TOOMANYEVENTS	sch_htb.c	159;"	d	file:
HTSIZE	cls_fw.c	32;"	d	file:
HTTP_HEAD_GET	sch_prio.c	/^    HTTP_HEAD_GET,$/;"	e	enum:HTTP_HEAD_INFO	file:
HTTP_HEAD_INFO	sch_prio.c	/^enum HTTP_HEAD_INFO{$/;"	g	file:
HTTP_HEAD_POST	sch_prio.c	/^    HTTP_HEAD_POST$/;"	e	enum:HTTP_HEAD_INFO	file:
HT_INFINITY	sch_hfsc.c	190;"	d	file:
IPT_TAB_MASK	act_ipt.c	31;"	d	file:
ISM_MASK	sch_hfsc.c	393;"	d	file:
ISM_SHIFT	sch_hfsc.c	390;"	d	file:
L2T	act_police.c	25;"	d	file:
L2T	sch_cbq.c	178;"	d	file:
L2T	sch_tbf.c	118;"	d	file:
L2T_P	act_police.c	26;"	d	file:
L2T_P	sch_tbf.c	119;"	d	file:
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_datalen)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_dev)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_loadavg_0)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_loadavg_1)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_loadavg_2)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_maclen)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_mark)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_pktlen)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_pkttype)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_priority)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_protocol)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_random)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_rtclassid)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_rtiif)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_ack_bl)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_alloc)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_bound_if)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_err_qlen)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_family)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_fwd_alloc)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_hash)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_lingertime)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_max_ack_bl)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_omem_alloc)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_prio)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_proto)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_rcv_qlen)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_rcvbuf)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_rcvlowat)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_rcvtimeo)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_refcnt)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_reuse)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_rmem_alloc)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_route_caps)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_sendmsg_off)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_shutdown)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_snd_qlen)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_sndbuf)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_sndtimeo)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_state)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_type)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_wmem_alloc)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_wmem_queued)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_sk_write_pend)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_tcindex)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(int_vlan_tag)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(var_dev)$/;"	f
META_COLLECTOR	em_meta.c	/^META_COLLECTOR(var_sk_bound_if)$/;"	f
META_COLLECTOR	em_meta.c	105;"	d	file:
META_FUNC	em_meta.c	488;"	d	file:
META_ID	em_meta.c	487;"	d	file:
MIRRED_TAB_MASK	act_mirred.c	32;"	d	file:
NAT_TAB_MASK	act_nat.c	32;"	d	file:
NEXT_SLAVE	sch_teql.c	72;"	d	file:
NO_DEFAULT_INDEX	sch_dsmark.c	36;"	d	file:
PEDIT_TAB_MASK	act_pedit.c	26;"	d	file:
PERFECT_HASH_THRESHOLD	cls_tcindex.c	23;"	d	file:
PFIFO_FAST_BANDS	sch_generic.c	430;"	d	file:
POL_TAB_MASK	act_police.c	28;"	d	file:
PRIV	cls_tcindex.c	27;"	d	file:
P_tab	sch_tbf.c	/^	struct qdisc_rate_table	*P_tab;$/;"	m	struct:tbf_sched_data	typeref:struct:tbf_sched_data::qdisc_rate_table	file:
ROUTE4_APPLY_RESULT	cls_route.c	116;"	d	file:
ROUTE4_FAILURE	cls_route.c	64;"	d	file:
RSVP_APPLY_RESULT	cls_rsvp.h	125;"	d
RSVP_DST_LEN	cls_rsvp.c	23;"	d	file:
RSVP_DST_LEN	cls_rsvp6.c	23;"	d	file:
RSVP_ID	cls_rsvp.c	24;"	d	file:
RSVP_ID	cls_rsvp6.c	24;"	d	file:
RSVP_OPS	cls_rsvp.c	25;"	d	file:
RSVP_OPS	cls_rsvp.h	/^static struct tcf_proto_ops RSVP_OPS = {$/;"	v	typeref:struct:tcf_proto_ops
RSVP_OPS	cls_rsvp6.c	25;"	d	file:
R_tab	sch_cbq.c	/^	struct qdisc_rate_table	*R_tab;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::qdisc_rate_table	file:
R_tab	sch_tbf.c	/^	struct qdisc_rate_table	*R_tab;$/;"	m	struct:tbf_sched_data	typeref:struct:tbf_sched_data::qdisc_rate_table	file:
SFQ_DEPTH	sch_sfq.c	79;"	d	file:
SFQ_HASH_DIVISOR	sch_sfq.c	80;"	d	file:
SIMP_MAX_DATA	act_simple.c	38;"	d	file:
SIMP_TAB_MASK	act_simple.c	27;"	d	file:
SKBEDIT_TAB_MASK	act_skbedit.c	31;"	d	file:
SKIP_NONLOCAL	em_meta.c	272;"	d	file:
SM_MASK	sch_hfsc.c	392;"	d	file:
SM_SHIFT	sch_hfsc.c	389;"	d	file:
TCA_ACT_SIMP	act_simple.c	22;"	d	file:
TCF_EM_CMP	em_cmp.c	/^MODULE_ALIAS_TCF_EMATCH(TCF_EM_CMP);$/;"	v
TCF_EM_META	em_meta.c	/^MODULE_ALIAS_TCF_EMATCH(TCF_EM_META);$/;"	v
TCF_EM_NBYTE	em_nbyte.c	/^MODULE_ALIAS_TCF_EMATCH(TCF_EM_NBYTE);$/;"	v
TCF_EM_TEXT	em_text.c	/^MODULE_ALIAS_TCF_EMATCH(TCF_EM_TEXT);$/;"	v
TCF_EM_U32	em_u32.c	/^MODULE_ALIAS_TCF_EMATCH(TCF_EM_U32);$/;"	v
VCC2FLOW	sch_atm.c	41;"	d	file:
VERSION	sch_netem.c	27;"	d	file:
__acquires	sch_prio.c	/^    __acquires(RCU)$/;"	f
__meta_ops	em_meta.c	/^static struct meta_ops __meta_ops[TCF_META_TYPE_MAX+1][TCF_META_ID_MAX+1] = {$/;"	v	typeref:struct:meta_ops	file:
__meta_type_ops	em_meta.c	/^static struct meta_type_ops __meta_type_ops[TCF_META_TYPE_MAX+1] = {$/;"	v	typeref:struct:meta_type_ops	file:
__netdev_watchdog_up	sch_generic.c	/^void __netdev_watchdog_up(struct net_device *dev)$/;"	f
__qdisc_run	sch_generic.c	/^void __qdisc_run(struct Qdisc *q)$/;"	f
__read_mostly	cls_api.c	/^static struct tcf_proto_ops *tcf_proto_base __read_mostly;$/;"	v	typeref:struct:tcf_proto_base	file:
__read_mostly	cls_basic.c	/^static struct tcf_proto_ops cls_basic_ops __read_mostly = {$/;"	v	typeref:struct:cls_basic_ops	file:
__read_mostly	cls_cgroup.c	/^static struct tcf_proto_ops cls_cgroup_ops __read_mostly = {$/;"	v	typeref:struct:cls_cgroup_ops	file:
__read_mostly	cls_flow.c	/^static struct tcf_proto_ops cls_flow_ops __read_mostly = {$/;"	v	typeref:struct:cls_flow_ops	file:
__read_mostly	cls_fw.c	/^static struct tcf_proto_ops cls_fw_ops __read_mostly = {$/;"	v	typeref:struct:cls_fw_ops	file:
__read_mostly	cls_route.c	/^static struct tcf_proto_ops cls_route4_ops __read_mostly = {$/;"	v	typeref:struct:cls_route4_ops	file:
__read_mostly	cls_tcindex.c	/^static struct tcf_proto_ops cls_tcindex_ops __read_mostly = {$/;"	v	typeref:struct:cls_tcindex_ops	file:
__read_mostly	cls_u32.c	/^static struct tcf_proto_ops cls_u32_ops __read_mostly = {$/;"	v	typeref:struct:cls_u32_ops	file:
__read_mostly	sch_atm.c	/^static struct Qdisc_ops atm_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:atm_qdisc_ops	file:
__read_mostly	sch_blackhole.c	/^static struct Qdisc_ops blackhole_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:blackhole_qdisc_ops	file:
__read_mostly	sch_cbq.c	/^static struct Qdisc_ops cbq_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:cbq_qdisc_ops	file:
__read_mostly	sch_drr.c	/^static struct Qdisc_ops drr_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:drr_qdisc_ops	file:
__read_mostly	sch_dsmark.c	/^static struct Qdisc_ops dsmark_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:dsmark_qdisc_ops	file:
__read_mostly	sch_fifo.c	/^struct Qdisc_ops bfifo_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:bfifo_qdisc_ops
__read_mostly	sch_fifo.c	/^struct Qdisc_ops pfifo_head_drop_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:pfifo_head_drop_qdisc_ops
__read_mostly	sch_fifo.c	/^struct Qdisc_ops pfifo_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:pfifo_qdisc_ops
__read_mostly	sch_generic.c	/^static struct Qdisc_ops noqueue_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:noqueue_qdisc_ops	file:
__read_mostly	sch_generic.c	/^struct Qdisc_ops noop_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:noop_qdisc_ops
__read_mostly	sch_generic.c	/^struct Qdisc_ops pfifo_fast_ops __read_mostly = {$/;"	v	typeref:struct:pfifo_fast_ops
__read_mostly	sch_gred.c	/^static struct Qdisc_ops gred_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:gred_qdisc_ops	file:
__read_mostly	sch_hfsc.c	/^static struct Qdisc_ops hfsc_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:hfsc_qdisc_ops	file:
__read_mostly	sch_htb.c	/^static int htb_hysteresis __read_mostly = 0; \/* whether to use mode hysteresis for speedup *\/$/;"	v	file:
__read_mostly	sch_htb.c	/^static struct Qdisc_ops htb_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:htb_qdisc_ops	file:
__read_mostly	sch_ingress.c	/^static struct Qdisc_ops ingress_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:ingress_qdisc_ops	file:
__read_mostly	sch_mq.c	/^struct Qdisc_ops mq_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:mq_qdisc_ops
__read_mostly	sch_multiq.c	/^static struct Qdisc_ops multiq_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:multiq_qdisc_ops	file:
__read_mostly	sch_netem.c	/^static struct Qdisc_ops netem_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:netem_qdisc_ops	file:
__read_mostly	sch_netem.c	/^static struct Qdisc_ops tfifo_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:tfifo_qdisc_ops	file:
__read_mostly	sch_prio.c	/^static struct Qdisc_ops prio_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:prio_qdisc_ops	file:
__read_mostly	sch_red.c	/^static struct Qdisc_ops red_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:red_qdisc_ops	file:
__read_mostly	sch_sfq.c	/^static struct Qdisc_ops sfq_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:sfq_qdisc_ops	file:
__read_mostly	sch_tbf.c	/^static struct Qdisc_ops tbf_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:tbf_qdisc_ops	file:
__read_mostly	sch_utt.c	/^static struct Qdisc_ops sfq_qdisc_ops __read_mostly = {$/;"	v	typeref:struct:sfq_qdisc_ops	file:
__releases	sch_prio.c	/^    __releases(RCU)$/;"	f
__tcf_em_tree_match	ematch.c	/^EXPORT_SYMBOL(__tcf_em_tree_match);$/;"	v
__tcf_em_tree_match	ematch.c	/^int __tcf_em_tree_match(struct sk_buff *skb, struct tcf_ematch_tree *tree,$/;"	f
__tcindex_delete	cls_tcindex.c	/^__tcindex_delete(struct tcf_proto *tp, unsigned long arg, int lock)$/;"	f	file:
__teql_resolve	sch_teql.c	/^__teql_resolve(struct sk_buff *skb, struct sk_buff *skb_res, struct net_device *dev)$/;"	f	file:
act_base	act_api.c	/^static struct tc_action_ops *act_base = NULL;$/;"	v	typeref:struct:tc_action_ops	file:
act_gact_ops	act_gact.c	/^static struct tc_action_ops act_gact_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
act_get_notify	act_api.c	/^act_get_notify(struct net *net, u32 pid, struct nlmsghdr *n,$/;"	f	file:
act_ipt_ops	act_ipt.c	/^static struct tc_action_ops act_ipt_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
act_mirred_ops	act_mirred.c	/^static struct tc_action_ops act_mirred_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
act_nat_ops	act_nat.c	/^static struct tc_action_ops act_nat_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
act_pedit_ops	act_pedit.c	/^static struct tc_action_ops act_pedit_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
act_police_ops	act_police.c	/^static struct tc_action_ops act_police_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
act_simp_ops	act_simple.c	/^static struct tc_action_ops act_simp_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
act_skbedit_ops	act_skbedit.c	/^static struct tc_action_ops act_skbedit_ops = {$/;"	v	typeref:struct:tc_action_ops	file:
action	act_police.c	/^	int			action;$/;"	m	struct:tc_police_compat	file:
active	sch_cbq.c	/^	struct cbq_class	*active[TC_CBQ_MAXPRIO+1];	\/* List of all classes$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::cbq_class	file:
active	sch_drr.c	/^	struct list_head		active;$/;"	m	struct:drr_sched	typeref:struct:drr_sched::list_head	file:
activemask	sch_cbq.c	/^	unsigned		activemask;$/;"	m	struct:cbq_sched_data	file:
addend	cls_flow.c	/^	u32			addend;$/;"	m	struct:flow_filter	file:
addr_fold	cls_flow.c	/^static inline u32 addr_fold(void *addr)$/;"	f	file:
alist	sch_drr.c	/^	struct list_head		alist;$/;"	m	struct:drr_class	typeref:struct:drr_class::list_head	file:
alloc_defdata	act_simple.c	/^static int alloc_defdata(struct tcf_defact *d, char *defdata)$/;"	f	file:
alloc_hash	cls_tcindex.c	/^	int alloc_hash;		\/* allocated size *\/$/;"	m	struct:tcindex_data	file:
allot	sch_cbq.c	/^	long			allot;$/;"	m	struct:cbq_class	file:
allot	sch_esfq.c	/^	short		*allot;			\/* Current allotment per slot *\/$/;"	m	struct:esfq_sched_data	file:
allot	sch_sfq.c	/^	short		allot[SFQ_DEPTH];	\/* Current allotment per slot *\/$/;"	m	struct:sfq_sched_data	file:
apply_extras	em_meta.c	/^	void	(*apply_extras)(struct meta_value *, struct meta_obj *);$/;"	m	struct:meta_type_ops	file:
atm_class_ops	sch_atm.c	/^static const struct Qdisc_class_ops atm_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
atm_exit	sch_atm.c	/^static void __exit atm_exit(void)$/;"	f	file:
atm_flow_data	sch_atm.c	/^struct atm_flow_data {$/;"	s	file:
atm_init	sch_atm.c	/^static int __init atm_init(void)$/;"	f	file:
atm_policy	sch_atm.c	/^static const struct nla_policy atm_policy[TCA_ATM_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
atm_qdisc_data	sch_atm.c	/^struct atm_qdisc_data {$/;"	s	file:
atm_tc_bind_filter	sch_atm.c	/^static unsigned long atm_tc_bind_filter(struct Qdisc *sch,$/;"	f	file:
atm_tc_change	sch_atm.c	/^static int atm_tc_change(struct Qdisc *sch, u32 classid, u32 parent,$/;"	f	file:
atm_tc_delete	sch_atm.c	/^static int atm_tc_delete(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
atm_tc_dequeue	sch_atm.c	/^static struct sk_buff *atm_tc_dequeue(struct Qdisc *sch)$/;"	f	file:
atm_tc_destroy	sch_atm.c	/^static void atm_tc_destroy(struct Qdisc *sch)$/;"	f	file:
atm_tc_drop	sch_atm.c	/^static unsigned int atm_tc_drop(struct Qdisc *sch)$/;"	f	file:
atm_tc_dump	sch_atm.c	/^static int atm_tc_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
atm_tc_dump_class	sch_atm.c	/^static int atm_tc_dump_class(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
atm_tc_dump_class_stats	sch_atm.c	/^atm_tc_dump_class_stats(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
atm_tc_enqueue	sch_atm.c	/^static int atm_tc_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
atm_tc_find_tcf	sch_atm.c	/^static struct tcf_proto **atm_tc_find_tcf(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
atm_tc_get	sch_atm.c	/^static unsigned long atm_tc_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
atm_tc_graft	sch_atm.c	/^static int atm_tc_graft(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
atm_tc_init	sch_atm.c	/^static int atm_tc_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
atm_tc_leaf	sch_atm.c	/^static struct Qdisc *atm_tc_leaf(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
atm_tc_peek	sch_atm.c	/^static struct sk_buff *atm_tc_peek(struct Qdisc *sch)$/;"	f	file:
atm_tc_put	sch_atm.c	/^static void atm_tc_put(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
atm_tc_reset	sch_atm.c	/^static void atm_tc_reset(struct Qdisc *sch)$/;"	f	file:
atm_tc_walk	sch_atm.c	/^static void atm_tc_walk(struct Qdisc *sch, struct qdisc_walker *walker)$/;"	f	file:
attach_default_qdiscs	sch_generic.c	/^static void attach_default_qdiscs(struct net_device *dev)$/;"	f	file:
attach_one_default_qdisc	sch_generic.c	/^static void attach_one_default_qdisc(struct net_device *dev,$/;"	f	file:
avgidle	sch_cbq.c	/^	long			avgidle;$/;"	m	struct:cbq_class	file:
avpkt	sch_cbq.c	/^	u32			avpkt;$/;"	m	struct:cbq_class	file:
backlog	sch_gred.c	/^	u32		backlog;	\/* bytes on the virtualQ *\/$/;"	m	struct:gred_sched_data	file:
band2list	sch_generic.c	/^static inline struct sk_buff_head *band2list(struct pfifo_fast_priv *priv,$/;"	f	file:
bands	sch_multiq.c	/^	u16 bands;$/;"	m	struct:multiq_sched_data	file:
bands	sch_prio.c	/^	int bands;$/;"	m	struct:prio_sched_data	file:
baseclass	cls_flow.c	/^	u32			baseclass;$/;"	m	struct:flow_filter	file:
basic_change	cls_basic.c	/^static int basic_change(struct tcf_proto *tp, unsigned long base, u32 handle,$/;"	f	file:
basic_classify	cls_basic.c	/^static int basic_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f	file:
basic_delete	cls_basic.c	/^static int basic_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f	file:
basic_delete_filter	cls_basic.c	/^static inline void basic_delete_filter(struct tcf_proto *tp,$/;"	f	file:
basic_destroy	cls_basic.c	/^static void basic_destroy(struct tcf_proto *tp)$/;"	f	file:
basic_dump	cls_basic.c	/^static int basic_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f	file:
basic_ext_map	cls_basic.c	/^static const struct tcf_ext_map basic_ext_map = {$/;"	v	typeref:struct:tcf_ext_map	file:
basic_filter	cls_basic.c	/^struct basic_filter$/;"	s	file:
basic_get	cls_basic.c	/^static unsigned long basic_get(struct tcf_proto *tp, u32 handle)$/;"	f	file:
basic_head	cls_basic.c	/^struct basic_head$/;"	s	file:
basic_init	cls_basic.c	/^static int basic_init(struct tcf_proto *tp)$/;"	f	file:
basic_policy	cls_basic.c	/^static const struct nla_policy basic_policy[TCA_BASIC_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
basic_put	cls_basic.c	/^static void basic_put(struct tcf_proto *tp, unsigned long f)$/;"	f	file:
basic_set_parms	cls_basic.c	/^static inline int basic_set_parms(struct tcf_proto *tp, struct basic_filter *f,$/;"	f	file:
basic_walk	cls_basic.c	/^static void basic_walk(struct tcf_proto *tp, struct tcf_walker *arg)$/;"	f	file:
bfifo_enqueue	sch_fifo.c	/^static int bfifo_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
bfifo_qdisc_ops	sch_fifo.c	/^EXPORT_SYMBOL(bfifo_qdisc_ops);$/;"	v
bitmap	sch_generic.c	/^	u32 bitmap;$/;"	m	struct:pfifo_fast_priv	file:
bitmap2band	sch_generic.c	/^static const int bitmap2band[] = {-1, 0, 1, 0, 2, 0, 1, 0};$/;"	v	file:
bkt	cls_route.c	/^	struct route4_bucket	*bkt;$/;"	m	struct:route4_filter	typeref:struct:route4_filter::route4_bucket	file:
blackhole_dequeue	sch_blackhole.c	/^static struct sk_buff *blackhole_dequeue(struct Qdisc *sch)$/;"	f	file:
blackhole_enqueue	sch_blackhole.c	/^static int blackhole_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
blackhole_module_exit	sch_blackhole.c	/^static void __exit blackhole_module_exit(void)$/;"	f	file:
blackhole_module_init	sch_blackhole.c	/^static int __init blackhole_module_init(void)$/;"	f	file:
borrow	sch_cbq.c	/^	struct cbq_class	*borrow;	\/* NULL if class is bandwidth limited;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
bstats	sch_atm.c	/^	struct gnet_stats_basic_packed	bstats;$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::gnet_stats_basic_packed	file:
bstats	sch_cbq.c	/^	struct gnet_stats_basic_packed bstats;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::gnet_stats_basic_packed	file:
bstats	sch_drr.c	/^	struct gnet_stats_basic_packed		bstats;$/;"	m	struct:drr_class	typeref:struct:drr_class::gnet_stats_basic_packed	file:
bstats	sch_hfsc.c	/^	struct gnet_stats_basic_packed bstats;$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::gnet_stats_basic_packed	file:
bstats	sch_htb.c	/^	struct gnet_stats_basic_packed bstats;$/;"	m	struct:htb_class	typeref:struct:htb_class::gnet_stats_basic_packed	file:
buffer	sch_htb.c	/^	long buffer, cbuffer;	\/* token bucket depth\/rate *\/$/;"	m	struct:htb_class	file:
buffer	sch_tbf.c	/^	u32		buffer;		\/* Token bucket depth\/rate: MUST BE >= MTU\/B *\/$/;"	m	struct:tbf_sched_data	file:
burst	act_police.c	/^	u32			burst;$/;"	m	struct:tc_police_compat	file:
bytesin	sch_gred.c	/^	u32		bytesin;	\/* bytes seen on virtualQ so far*\/$/;"	m	struct:gred_sched_data	file:
cb	cls_api.c	/^	struct netlink_callback *cb;$/;"	m	struct:tcf_dump_args	typeref:struct:tcf_dump_args::netlink_callback	file:
cb	sch_api.c	/^	struct netlink_callback *cb;$/;"	m	struct:qdisc_dump_args	typeref:struct:qdisc_dump_args::netlink_callback	file:
cbq_activate_class	sch_cbq.c	/^static __inline__ void cbq_activate_class(struct cbq_class *cl)$/;"	f	file:
cbq_addprio	sch_cbq.c	/^static void cbq_addprio(struct cbq_sched_data *q, struct cbq_class *cl)$/;"	f	file:
cbq_adjust_levels	sch_cbq.c	/^static void cbq_adjust_levels(struct cbq_class *this)$/;"	f	file:
cbq_bind_filter	sch_cbq.c	/^static unsigned long cbq_bind_filter(struct Qdisc *sch, unsigned long parent,$/;"	f	file:
cbq_change_class	sch_cbq.c	/^cbq_change_class(struct Qdisc *sch, u32 classid, u32 parentid, struct nlattr **tca,$/;"	f	file:
cbq_change_defmap	sch_cbq.c	/^static void cbq_change_defmap(struct cbq_class *cl, u32 splitid, u32 def, u32 mask)$/;"	f	file:
cbq_class	sch_cbq.c	/^struct cbq_class$/;"	s	file:
cbq_class_lookup	sch_cbq.c	/^cbq_class_lookup(struct cbq_sched_data *q, u32 classid)$/;"	f	file:
cbq_class_ops	sch_cbq.c	/^static const struct Qdisc_class_ops cbq_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
cbq_classify	sch_cbq.c	/^cbq_classify(struct sk_buff *skb, struct Qdisc *sch, int *qerr)$/;"	f	file:
cbq_deactivate_class	sch_cbq.c	/^static void cbq_deactivate_class(struct cbq_class *this)$/;"	f	file:
cbq_delete	sch_cbq.c	/^static int cbq_delete(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
cbq_dequeue	sch_cbq.c	/^cbq_dequeue(struct Qdisc *sch)$/;"	f	file:
cbq_dequeue_1	sch_cbq.c	/^cbq_dequeue_1(struct Qdisc *sch)$/;"	f	file:
cbq_dequeue_prio	sch_cbq.c	/^cbq_dequeue_prio(struct Qdisc *sch, int prio)$/;"	f	file:
cbq_destroy	sch_cbq.c	/^cbq_destroy(struct Qdisc* sch)$/;"	f	file:
cbq_destroy_class	sch_cbq.c	/^static void cbq_destroy_class(struct Qdisc *sch, struct cbq_class *cl)$/;"	f	file:
cbq_drop	sch_cbq.c	/^static unsigned int cbq_drop(struct Qdisc* sch)$/;"	f	file:
cbq_dump	sch_cbq.c	/^static int cbq_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
cbq_dump_attr	sch_cbq.c	/^static int cbq_dump_attr(struct sk_buff *skb, struct cbq_class *cl)$/;"	f	file:
cbq_dump_class	sch_cbq.c	/^cbq_dump_class(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
cbq_dump_class_stats	sch_cbq.c	/^cbq_dump_class_stats(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
cbq_dump_fopt	sch_cbq.c	/^static __inline__ int cbq_dump_fopt(struct sk_buff *skb, struct cbq_class *cl)$/;"	f	file:
cbq_dump_lss	sch_cbq.c	/^static __inline__ int cbq_dump_lss(struct sk_buff *skb, struct cbq_class *cl)$/;"	f	file:
cbq_dump_ovl	sch_cbq.c	/^static __inline__ int cbq_dump_ovl(struct sk_buff *skb, struct cbq_class *cl)$/;"	f	file:
cbq_dump_police	sch_cbq.c	/^static __inline__ int cbq_dump_police(struct sk_buff *skb, struct cbq_class *cl)$/;"	f	file:
cbq_dump_rate	sch_cbq.c	/^static __inline__ int cbq_dump_rate(struct sk_buff *skb, struct cbq_class *cl)$/;"	f	file:
cbq_dump_stats	sch_cbq.c	/^cbq_dump_stats(struct Qdisc *sch, struct gnet_dump *d)$/;"	f	file:
cbq_dump_wrr	sch_cbq.c	/^static __inline__ int cbq_dump_wrr(struct sk_buff *skb, struct cbq_class *cl)$/;"	f	file:
cbq_enqueue	sch_cbq.c	/^cbq_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
cbq_find_tcf	sch_cbq.c	/^static struct tcf_proto **cbq_find_tcf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
cbq_get	sch_cbq.c	/^static unsigned long cbq_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
cbq_graft	sch_cbq.c	/^static int cbq_graft(struct Qdisc *sch, unsigned long arg, struct Qdisc *new,$/;"	f	file:
cbq_init	sch_cbq.c	/^static int cbq_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
cbq_leaf	sch_cbq.c	/^cbq_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
cbq_link_class	sch_cbq.c	/^static void cbq_link_class(struct cbq_class *this)$/;"	f	file:
cbq_mark_toplevel	sch_cbq.c	/^cbq_mark_toplevel(struct cbq_sched_data *q, struct cbq_class *cl)$/;"	f	file:
cbq_module_exit	sch_cbq.c	/^static void __exit cbq_module_exit(void)$/;"	f	file:
cbq_module_init	sch_cbq.c	/^static int __init cbq_module_init(void)$/;"	f	file:
cbq_normalize_quanta	sch_cbq.c	/^static void cbq_normalize_quanta(struct cbq_sched_data *q, int prio)$/;"	f	file:
cbq_ovl_classic	sch_cbq.c	/^static void cbq_ovl_classic(struct cbq_class *cl)$/;"	f	file:
cbq_ovl_delay	sch_cbq.c	/^static void cbq_ovl_delay(struct cbq_class *cl)$/;"	f	file:
cbq_ovl_drop	sch_cbq.c	/^static void cbq_ovl_drop(struct cbq_class *cl)$/;"	f	file:
cbq_ovl_lowprio	sch_cbq.c	/^static void cbq_ovl_lowprio(struct cbq_class *cl)$/;"	f	file:
cbq_ovl_rclassic	sch_cbq.c	/^static void cbq_ovl_rclassic(struct cbq_class *cl)$/;"	f	file:
cbq_policy	sch_cbq.c	/^static const struct nla_policy cbq_policy[TCA_CBQ_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
cbq_put	sch_cbq.c	/^static void cbq_put(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
cbq_qlen_notify	sch_cbq.c	/^static void cbq_qlen_notify(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
cbq_reclassify	sch_cbq.c	/^cbq_reclassify(struct sk_buff *skb, struct cbq_class *this)$/;"	f	file:
cbq_reset	sch_cbq.c	/^cbq_reset(struct Qdisc* sch)$/;"	f	file:
cbq_reshape_fail	sch_cbq.c	/^static int cbq_reshape_fail(struct sk_buff *skb, struct Qdisc *child)$/;"	f	file:
cbq_rmprio	sch_cbq.c	/^static void cbq_rmprio(struct cbq_sched_data *q, struct cbq_class *cl)$/;"	f	file:
cbq_sched_data	sch_cbq.c	/^struct cbq_sched_data$/;"	s	file:
cbq_set_fopt	sch_cbq.c	/^static int cbq_set_fopt(struct cbq_class *cl, struct tc_cbq_fopt *fopt)$/;"	f	file:
cbq_set_lss	sch_cbq.c	/^static int cbq_set_lss(struct cbq_class *cl, struct tc_cbq_lssopt *lss)$/;"	f	file:
cbq_set_overlimit	sch_cbq.c	/^static int cbq_set_overlimit(struct cbq_class *cl, struct tc_cbq_ovl *ovl)$/;"	f	file:
cbq_set_police	sch_cbq.c	/^static int cbq_set_police(struct cbq_class *cl, struct tc_cbq_police *p)$/;"	f	file:
cbq_set_wrr	sch_cbq.c	/^static int cbq_set_wrr(struct cbq_class *cl, struct tc_cbq_wrropt *wrr)$/;"	f	file:
cbq_sync_defmap	sch_cbq.c	/^static void cbq_sync_defmap(struct cbq_class *cl)$/;"	f	file:
cbq_unbind_filter	sch_cbq.c	/^static void cbq_unbind_filter(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
cbq_undelay	sch_cbq.c	/^static enum hrtimer_restart cbq_undelay(struct hrtimer *timer)$/;"	f	file:
cbq_undelay_prio	sch_cbq.c	/^static psched_tdiff_t cbq_undelay_prio(struct cbq_sched_data *q, int prio,$/;"	f	file:
cbq_under_limit	sch_cbq.c	/^cbq_under_limit(struct cbq_class *cl)$/;"	f	file:
cbq_unlink_class	sch_cbq.c	/^static void cbq_unlink_class(struct cbq_class *this)$/;"	f	file:
cbq_update	sch_cbq.c	/^cbq_update(struct cbq_sched_data *q)$/;"	f	file:
cbq_update_toplevel	sch_cbq.c	/^cbq_update_toplevel(struct cbq_sched_data *q, struct cbq_class *cl,$/;"	f	file:
cbq_walk	sch_cbq.c	/^static void cbq_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
cbuffer	sch_htb.c	/^	long buffer, cbuffer;	\/* token bucket depth\/rate *\/$/;"	m	struct:htb_class	file:
ceil	sch_htb.c	/^	struct qdisc_rate_table *ceil;	\/* ceiling rate (limits borrows too) *\/$/;"	m	struct:htb_class	typeref:struct:htb_class::qdisc_rate_table	file:
cf_node	sch_hfsc.c	/^	struct rb_node cf_node;		\/* parent's cf_heap member *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::rb_node	file:
cf_tree	sch_hfsc.c	/^	struct rb_root cf_tree;		\/* active children sorted by cl_f *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::rb_root	file:
cftree_insert	sch_hfsc.c	/^cftree_insert(struct hfsc_class *cl)$/;"	f	file:
cftree_remove	sch_hfsc.c	/^cftree_remove(struct hfsc_class *cl)$/;"	f	file:
cftree_update	sch_hfsc.c	/^cftree_update(struct hfsc_class *cl)$/;"	f	file:
cgroup_ext_map	cls_cgroup.c	/^static const struct tcf_ext_map cgroup_ext_map = {$/;"	v	typeref:struct:tcf_ext_map	file:
cgroup_policy	cls_cgroup.c	/^static const struct nla_policy cgroup_policy[TCA_CGROUP_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
cgrp_cls_state	cls_cgroup.c	/^static inline struct cgroup_cls_state *cgrp_cls_state(struct cgroup *cgrp)$/;"	f	file:
cgrp_create	cls_cgroup.c	/^static struct cgroup_subsys_state *cgrp_create(struct cgroup_subsys *ss,$/;"	f	file:
cgrp_destroy	cls_cgroup.c	/^static void cgrp_destroy(struct cgroup_subsys *ss, struct cgroup *cgrp)$/;"	f	file:
cgrp_populate	cls_cgroup.c	/^static int cgrp_populate(struct cgroup_subsys *ss, struct cgroup *cgrp)$/;"	f	file:
change	em_meta.c	/^	int	(*change)(struct meta_value *, struct nlattr *);$/;"	m	struct:meta_type_ops	file:
check_loop	sch_api.c	/^static int check_loop(struct Qdisc *q, struct Qdisc *p, int depth)$/;"	f	file:
check_loop_arg	sch_api.c	/^struct check_loop_arg$/;"	s	file:
check_loop_fn	sch_api.c	/^check_loop_fn(struct Qdisc *q, unsigned long cl, struct qdisc_walker *w)$/;"	f	file:
children	sch_cbq.c	/^	struct cbq_class	*children;	\/* Pointer to children chain *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
children	sch_hfsc.c	/^	struct list_head children;	\/* child classes *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::list_head	file:
children	sch_htb.c	/^	unsigned int children;$/;"	m	struct:htb_class	file:
cl_cfmin	sch_hfsc.c	/^	u64	cl_cfmin;		\/* earliest children's fit-time (used$/;"	m	struct:hfsc_class	file:
cl_common	sch_hfsc.c	/^	struct Qdisc_class_common cl_common;$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::Qdisc_class_common	file:
cl_cumul	sch_hfsc.c	/^	u64	cl_cumul;		\/* cumulative work in bytes done by$/;"	m	struct:hfsc_class	file:
cl_cvtmax	sch_hfsc.c	/^	u64	cl_cvtmax;		\/* max child's vt in the last period *\/$/;"	m	struct:hfsc_class	file:
cl_cvtmin	sch_hfsc.c	/^	u64	cl_cvtmin;		\/* minimal virtual time among the$/;"	m	struct:hfsc_class	file:
cl_cvtoff	sch_hfsc.c	/^	u64	cl_cvtoff;		\/* cumulative cvtmax of all periods *\/$/;"	m	struct:hfsc_class	file:
cl_d	sch_hfsc.c	/^	u64 	cl_d;			\/* deadline*\/$/;"	m	struct:hfsc_class	file:
cl_deadline	sch_hfsc.c	/^	struct runtime_sc cl_deadline;	\/* deadline curve *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::runtime_sc	file:
cl_e	sch_hfsc.c	/^	u64 	cl_e;			\/* eligible time *\/$/;"	m	struct:hfsc_class	file:
cl_eligible	sch_hfsc.c	/^	struct runtime_sc cl_eligible;	\/* eligible curve *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::runtime_sc	file:
cl_f	sch_hfsc.c	/^	u64	cl_f;			\/* time when this class will fit for$/;"	m	struct:hfsc_class	file:
cl_flags	sch_hfsc.c	/^	unsigned long	cl_flags;	\/* which curves are valid *\/$/;"	m	struct:hfsc_class	file:
cl_fsc	sch_hfsc.c	/^	struct internal_sc cl_fsc;	\/* internal fair service curve *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::internal_sc	file:
cl_myf	sch_hfsc.c	/^	u64	cl_myf;			\/* my fit-time (calculated from this$/;"	m	struct:hfsc_class	file:
cl_myfadj	sch_hfsc.c	/^	u64	cl_myfadj;		\/* my fit-time adjustment (to cancel$/;"	m	struct:hfsc_class	file:
cl_nactive	sch_hfsc.c	/^	unsigned long	cl_nactive;	\/* number of active children *\/$/;"	m	struct:hfsc_class	file:
cl_parent	sch_hfsc.c	/^	struct hfsc_class *cl_parent;	\/* parent class *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::hfsc_class	file:
cl_parentperiod	sch_hfsc.c	/^	unsigned long	cl_parentperiod;\/* parent's vt period sequence number*\/$/;"	m	struct:hfsc_class	file:
cl_pcvtoff	sch_hfsc.c	/^	u64	cl_pcvtoff;		\/* parent's cvtoff at initialization$/;"	m	struct:hfsc_class	file:
cl_rsc	sch_hfsc.c	/^	struct internal_sc cl_rsc;	\/* internal real-time service curve *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::internal_sc	file:
cl_total	sch_hfsc.c	/^	u64	cl_total;		\/* total work in bytes *\/$/;"	m	struct:hfsc_class	file:
cl_ulimit	sch_hfsc.c	/^	struct runtime_sc cl_ulimit;	\/* upperlimit curve *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::runtime_sc	file:
cl_usc	sch_hfsc.c	/^	struct internal_sc cl_usc;	\/* internal upperlimit service curve *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::internal_sc	file:
cl_virtual	sch_hfsc.c	/^	struct runtime_sc cl_virtual;	\/* virtual curve *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::runtime_sc	file:
cl_vt	sch_hfsc.c	/^	u64	cl_vt;			\/* virtual time *\/$/;"	m	struct:hfsc_class	file:
cl_vtadj	sch_hfsc.c	/^	u64	cl_vtadj;		\/* intra-period cumulative vt$/;"	m	struct:hfsc_class	file:
cl_vtoff	sch_hfsc.c	/^	u64	cl_vtoff;		\/* inter-period cumulative vt offset *\/$/;"	m	struct:hfsc_class	file:
cl_vtperiod	sch_hfsc.c	/^	unsigned long	cl_vtperiod;	\/* vt period sequence number *\/$/;"	m	struct:hfsc_class	file:
classid	sch_atm.c	/^	u32			classid;	\/* x:y type ID *\/$/;"	m	struct:atm_flow_data	file:
cleanup_a	act_api.c	/^static void cleanup_a(struct tc_action *act)$/;"	f	file:
clhash	sch_cbq.c	/^	struct Qdisc_class_hash	clhash;			\/* Hash table of all classes *\/$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::Qdisc_class_hash	file:
clhash	sch_drr.c	/^	struct Qdisc_class_hash		clhash;$/;"	m	struct:drr_sched	typeref:struct:drr_sched::Qdisc_class_hash	file:
clhash	sch_hfsc.c	/^	struct Qdisc_class_hash clhash;		\/* class hash *\/$/;"	m	struct:hfsc_sched	typeref:struct:hfsc_sched::Qdisc_class_hash	file:
clhash	sch_htb.c	/^	struct Qdisc_class_hash clhash;$/;"	m	struct:htb_sched	typeref:struct:htb_sched::Qdisc_class_hash	file:
cls_cgroup_change	cls_cgroup.c	/^static int cls_cgroup_change(struct tcf_proto *tp, unsigned long base,$/;"	f	file:
cls_cgroup_classify	cls_cgroup.c	/^static int cls_cgroup_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f	file:
cls_cgroup_delete	cls_cgroup.c	/^static int cls_cgroup_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f	file:
cls_cgroup_destroy	cls_cgroup.c	/^static void cls_cgroup_destroy(struct tcf_proto *tp)$/;"	f	file:
cls_cgroup_dump	cls_cgroup.c	/^static int cls_cgroup_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f	file:
cls_cgroup_get	cls_cgroup.c	/^static unsigned long cls_cgroup_get(struct tcf_proto *tp, u32 handle)$/;"	f	file:
cls_cgroup_head	cls_cgroup.c	/^struct cls_cgroup_head$/;"	s	file:
cls_cgroup_init	cls_cgroup.c	/^static int cls_cgroup_init(struct tcf_proto *tp)$/;"	f	file:
cls_cgroup_put	cls_cgroup.c	/^static void cls_cgroup_put(struct tcf_proto *tp, unsigned long f)$/;"	f	file:
cls_cgroup_walk	cls_cgroup.c	/^static void cls_cgroup_walk(struct tcf_proto *tp, struct tcf_walker *arg)$/;"	f	file:
cls_flow_exit	cls_flow.c	/^module_exit(cls_flow_exit);$/;"	v
cls_flow_exit	cls_flow.c	/^static void __exit cls_flow_exit(void)$/;"	f	file:
cls_flow_init	cls_flow.c	/^module_init(cls_flow_init);$/;"	v
cls_flow_init	cls_flow.c	/^static int __init cls_flow_init(void)$/;"	f	file:
cmode	sch_htb.c	/^	enum htb_cmode cmode;	\/* current mode of the class *\/$/;"	m	struct:htb_class	typeref:enum:htb_class::htb_cmode	file:
cmp_needs_transformation	em_cmp.c	/^static inline int cmp_needs_transformation(struct tcf_em_cmp *cmp)$/;"	f	file:
common	sch_cbq.c	/^	struct Qdisc_class_common common;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::Qdisc_class_common	file:
common	sch_drr.c	/^	struct Qdisc_class_common	common;$/;"	m	struct:drr_class	typeref:struct:drr_class::Qdisc_class_common	file:
common	sch_htb.c	/^	struct Qdisc_class_common common;$/;"	m	struct:htb_class	typeref:struct:htb_class::Qdisc_class_common	file:
compare	em_meta.c	/^	int	(*compare)(struct meta_obj *, struct meta_obj *);$/;"	m	struct:meta_type_ops	file:
config	em_text.c	/^	struct ts_config	*config;$/;"	m	struct:text_match	typeref:struct:text_match::ts_config	file:
corrupt	sch_netem.c	/^	u32 corrupt;$/;"	m	struct:netem_sched_data	file:
corrupt_cor	sch_netem.c	/^	} delay_cor, loss_cor, dup_cor, reorder_cor, corrupt_cor;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::crndstate	file:
counter	sch_netem.c	/^	u32 counter;$/;"	m	struct:netem_sched_data	file:
cpriority	sch_cbq.c	/^	unsigned char		cpriority;	\/* Effective priority *\/$/;"	m	struct:cbq_class	file:
create_a	act_api.c	/^static struct tc_action *create_a(int i)$/;"	f	file:
crndstate	sch_netem.c	/^	struct crndstate {$/;"	s	struct:netem_sched_data	file:
ctokens	sch_htb.c	/^	long tokens, ctokens;	\/* current number of tokens *\/$/;"	m	struct:htb_class	file:
ctorigdst	sch_esfq.c	/^	u32	ctorigdst;	\/* original destination from conntrack *\/$/;"	m	struct:esfq_packet_info	file:
ctorigsrc	sch_esfq.c	/^	u32	ctorigsrc;	\/* original source from conntrack *\/$/;"	m	struct:esfq_packet_info	file:
ctrepldst	sch_esfq.c	/^	u32	ctrepldst;	\/* reply destination from conntrack *\/$/;"	m	struct:esfq_packet_info	file:
ctreplsrc	sch_esfq.c	/^	u32	ctreplsrc;	\/* reply source from conntrack *\/$/;"	m	struct:esfq_packet_info	file:
curband	sch_multiq.c	/^	u16 curband;$/;"	m	struct:multiq_sched_data	file:
d2dx	sch_hfsc.c	/^d2dx(u32 d)$/;"	f	file:
decUserFlowStatusQuoteCnt	utt_qos_misc.c	/^EXPORT_SYMBOL(decUserFlowStatusQuoteCnt);$/;"	v
decUserFlowStatusQuoteCnt	utt_qos_misc.c	/^void decUserFlowStatusQuoteCnt(struct smart_hash_node *hashNode)$/;"	f
def	sch_gred.c	/^	u32 		def;$/;"	m	struct:gred_sched	file:
default_index	sch_dsmark.c	/^	u32			default_index;	\/* index range is 0...0xffff *\/$/;"	m	struct:dsmark_qdisc_data	file:
defaults	sch_cbq.c	/^	struct cbq_class 	*defaults[TC_PRIO_MAX+1];$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
defcls	sch_hfsc.c	/^	u16	defcls;				\/* default class id *\/$/;"	m	struct:hfsc_sched	file:
defcls	sch_htb.c	/^	int defcls;		\/* class where unclassified flows go to *\/$/;"	m	struct:htb_sched	file:
deficit	sch_cbq.c	/^	long			deficit;	\/* Saved deficit for WRR *\/$/;"	m	struct:cbq_class	file:
deficit	sch_drr.c	/^	u32				deficit;$/;"	m	struct:drr_class	file:
deficit	sch_htb.c	/^			int deficit[TC_HTB_MAXDEPTH];$/;"	m	struct:htb_class::__anon2::htb_class_leaf	file:
defmap	sch_cbq.c	/^	u32			defmap;$/;"	m	struct:cbq_class	file:
delay_cor	sch_netem.c	/^	} delay_cor, loss_cor, dup_cor, reorder_cor, corrupt_cor;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::crndstate	file:
delay_dist	sch_netem.c	/^	} *delay_dist;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::disttable	file:
delay_timer	sch_cbq.c	/^	struct hrtimer		delay_timer;$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::hrtimer	file:
delayed	sch_cbq.c	/^	unsigned char		delayed;$/;"	m	struct:cbq_class	file:
dep	sch_esfq.c	/^	struct esfq_head	*dep;		\/* Linked list of slots, indexed by depth *\/$/;"	m	struct:esfq_sched_data	typeref:struct:esfq_sched_data::esfq_head	file:
dep	sch_sfq.c	/^	struct sfq_head	dep[SFQ_DEPTH*2];	\/* Linked list of slots, indexed by depth *\/$/;"	m	struct:sfq_sched_data	typeref:struct:sfq_sched_data::sfq_head	file:
depth	sch_api.c	/^	int			depth;$/;"	m	struct:check_loop_arg	file:
depth	sch_esfq.c	/^	unsigned	depth;$/;"	m	struct:esfq_sched_data	file:
dequeue_skb	sch_generic.c	/^static inline struct sk_buff *dequeue_skb(struct Qdisc *q)$/;"	f	file:
destroy	em_meta.c	/^	void	(*destroy)(struct meta_value *);$/;"	m	struct:meta_type_ops	file:
dev	sch_teql.c	/^	struct net_device *dev;$/;"	m	struct:teql_master	typeref:struct:teql_master::net_device	file:
dev_activate	sch_generic.c	/^void dev_activate(struct net_device *dev)$/;"	f
dev_deactivate	sch_generic.c	/^void dev_deactivate(struct net_device *dev)$/;"	f
dev_deactivate_queue	sch_generic.c	/^static void dev_deactivate_queue(struct net_device *dev,$/;"	f	file:
dev_graft_qdisc	sch_generic.c	/^struct Qdisc *dev_graft_qdisc(struct netdev_queue *dev_queue,$/;"	f
dev_init_scheduler	sch_generic.c	/^void dev_init_scheduler(struct net_device *dev)$/;"	f
dev_init_scheduler_queue	sch_generic.c	/^static void dev_init_scheduler_queue(struct net_device *dev,$/;"	f	file:
dev_requeue_skb	sch_generic.c	/^static inline int dev_requeue_skb(struct sk_buff *skb, struct Qdisc *q)$/;"	f	file:
dev_shutdown	sch_generic.c	/^void dev_shutdown(struct net_device *dev)$/;"	f
dev_trans_start	sch_generic.c	/^EXPORT_SYMBOL(dev_trans_start);$/;"	v
dev_trans_start	sch_generic.c	/^unsigned long dev_trans_start(struct net_device *dev)$/;"	f
dev_watchdog	sch_generic.c	/^static void dev_watchdog(unsigned long arg)$/;"	f	file:
dev_watchdog_down	sch_generic.c	/^static void dev_watchdog_down(struct net_device *dev)$/;"	f	file:
dev_watchdog_up	sch_generic.c	/^static void dev_watchdog_up(struct net_device *dev)$/;"	f	file:
direct_pkts	sch_htb.c	/^	long direct_pkts;$/;"	m	struct:htb_sched	file:
direct_qlen	sch_htb.c	/^	int direct_qlen;	\/* max qlen of above *\/$/;"	m	struct:htb_sched	file:
direct_queue	sch_htb.c	/^	struct sk_buff_head direct_queue;$/;"	m	struct:htb_sched	typeref:struct:htb_sched::sk_buff_head	file:
disttable	sch_netem.c	/^	struct disttable {$/;"	s	struct:netem_sched_data	file:
divisor	cls_flow.c	/^	u32			divisor;$/;"	m	struct:flow_filter	file:
divisor	cls_u32.c	/^	unsigned		divisor;$/;"	m	struct:tc_u_hnode	file:
dlist	sch_hfsc.c	/^	struct list_head dlist;		\/* drop list member *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::list_head	file:
dpi	cls_rsvp.h	/^	struct tc_rsvp_gpi 	dpi;$/;"	m	struct:rsvp_session	typeref:struct:rsvp_session::tc_rsvp_gpi
drop_list	sch_htb.c	/^			struct list_head drop_list;$/;"	m	struct:htb_class::__anon2::htb_class_leaf	typeref:struct:htb_class::__anon2::htb_class_leaf::list_head	file:
droplist	sch_hfsc.c	/^	struct list_head droplist;		\/* active leaf class list (for$/;"	m	struct:hfsc_sched	typeref:struct:hfsc_sched::list_head	file:
drops	sch_htb.c	/^	struct list_head drops[TC_HTB_NUMPRIO];\/* active leaves (for drops) *\/$/;"	m	struct:htb_sched	typeref:struct:htb_sched::list_head	file:
drr_bind_tcf	sch_drr.c	/^static unsigned long drr_bind_tcf(struct Qdisc *sch, unsigned long parent,$/;"	f	file:
drr_change_class	sch_drr.c	/^static int drr_change_class(struct Qdisc *sch, u32 classid, u32 parentid,$/;"	f	file:
drr_class	sch_drr.c	/^struct drr_class {$/;"	s	file:
drr_class_leaf	sch_drr.c	/^static struct Qdisc *drr_class_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
drr_class_ops	sch_drr.c	/^static const struct Qdisc_class_ops drr_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
drr_classify	sch_drr.c	/^static struct drr_class *drr_classify(struct sk_buff *skb, struct Qdisc *sch,$/;"	f	file:
drr_delete_class	sch_drr.c	/^static int drr_delete_class(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
drr_dequeue	sch_drr.c	/^static struct sk_buff *drr_dequeue(struct Qdisc *sch)$/;"	f	file:
drr_destroy_class	sch_drr.c	/^static void drr_destroy_class(struct Qdisc *sch, struct drr_class *cl)$/;"	f	file:
drr_destroy_qdisc	sch_drr.c	/^static void drr_destroy_qdisc(struct Qdisc *sch)$/;"	f	file:
drr_drop	sch_drr.c	/^static unsigned int drr_drop(struct Qdisc *sch)$/;"	f	file:
drr_dump_class	sch_drr.c	/^static int drr_dump_class(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
drr_dump_class_stats	sch_drr.c	/^static int drr_dump_class_stats(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
drr_enqueue	sch_drr.c	/^static int drr_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
drr_exit	sch_drr.c	/^module_exit(drr_exit);$/;"	v
drr_exit	sch_drr.c	/^static void __exit drr_exit(void)$/;"	f	file:
drr_find_class	sch_drr.c	/^static struct drr_class *drr_find_class(struct Qdisc *sch, u32 classid)$/;"	f	file:
drr_get_class	sch_drr.c	/^static unsigned long drr_get_class(struct Qdisc *sch, u32 classid)$/;"	f	file:
drr_graft_class	sch_drr.c	/^static int drr_graft_class(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
drr_init	sch_drr.c	/^module_init(drr_init);$/;"	v
drr_init	sch_drr.c	/^static int __init drr_init(void)$/;"	f	file:
drr_init_qdisc	sch_drr.c	/^static int drr_init_qdisc(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
drr_policy	sch_drr.c	/^static const struct nla_policy drr_policy[TCA_DRR_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
drr_purge_queue	sch_drr.c	/^static void drr_purge_queue(struct drr_class *cl)$/;"	f	file:
drr_put_class	sch_drr.c	/^static void drr_put_class(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
drr_qlen_notify	sch_drr.c	/^static void drr_qlen_notify(struct Qdisc *csh, unsigned long arg)$/;"	f	file:
drr_reset_qdisc	sch_drr.c	/^static void drr_reset_qdisc(struct Qdisc *sch)$/;"	f	file:
drr_sched	sch_drr.c	/^struct drr_sched {$/;"	s	file:
drr_tcf_chain	sch_drr.c	/^static struct tcf_proto **drr_tcf_chain(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
drr_unbind_tcf	sch_drr.c	/^static void drr_unbind_tcf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
drr_walk	sch_drr.c	/^static void drr_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
dsmark_bind_filter	sch_dsmark.c	/^static unsigned long dsmark_bind_filter(struct Qdisc *sch,$/;"	f	file:
dsmark_change	sch_dsmark.c	/^static int dsmark_change(struct Qdisc *sch, u32 classid, u32 parent,$/;"	f	file:
dsmark_class_ops	sch_dsmark.c	/^static const struct Qdisc_class_ops dsmark_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
dsmark_delete	sch_dsmark.c	/^static int dsmark_delete(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
dsmark_dequeue	sch_dsmark.c	/^static struct sk_buff *dsmark_dequeue(struct Qdisc *sch)$/;"	f	file:
dsmark_destroy	sch_dsmark.c	/^static void dsmark_destroy(struct Qdisc *sch)$/;"	f	file:
dsmark_drop	sch_dsmark.c	/^static unsigned int dsmark_drop(struct Qdisc *sch)$/;"	f	file:
dsmark_dump	sch_dsmark.c	/^static int dsmark_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
dsmark_dump_class	sch_dsmark.c	/^static int dsmark_dump_class(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
dsmark_enqueue	sch_dsmark.c	/^static int dsmark_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
dsmark_find_tcf	sch_dsmark.c	/^static inline struct tcf_proto **dsmark_find_tcf(struct Qdisc *sch,$/;"	f	file:
dsmark_get	sch_dsmark.c	/^static unsigned long dsmark_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
dsmark_graft	sch_dsmark.c	/^static int dsmark_graft(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
dsmark_init	sch_dsmark.c	/^static int dsmark_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
dsmark_leaf	sch_dsmark.c	/^static struct Qdisc *dsmark_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
dsmark_module_exit	sch_dsmark.c	/^static void __exit dsmark_module_exit(void)$/;"	f	file:
dsmark_module_init	sch_dsmark.c	/^static int __init dsmark_module_init(void)$/;"	f	file:
dsmark_peek	sch_dsmark.c	/^static struct sk_buff *dsmark_peek(struct Qdisc *sch)$/;"	f	file:
dsmark_policy	sch_dsmark.c	/^static const struct nla_policy dsmark_policy[TCA_DSMARK_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
dsmark_put	sch_dsmark.c	/^static void dsmark_put(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
dsmark_qdisc_data	sch_dsmark.c	/^struct dsmark_qdisc_data {$/;"	s	file:
dsmark_reset	sch_dsmark.c	/^static void dsmark_reset(struct Qdisc *sch)$/;"	f	file:
dsmark_valid_index	sch_dsmark.c	/^static inline int dsmark_valid_index(struct dsmark_qdisc_data *p, u16 index)$/;"	f	file:
dsmark_walk	sch_dsmark.c	/^static void dsmark_walk(struct Qdisc *sch, struct qdisc_walker *walker)$/;"	f	file:
dst	cls_rsvp.h	/^	__be32			dst[RSVP_DST_LEN];$/;"	m	struct:rsvp_session
dst	sch_esfq.c	/^	u32	dst;		\/* destination from packet header *\/$/;"	m	struct:esfq_packet_info	file:
dump	em_meta.c	/^	int	(*dump)(struct sk_buff *, struct meta_value *, int);$/;"	m	struct:meta_type_ops	file:
dup_cor	sch_netem.c	/^	} delay_cor, loss_cor, dup_cor, reorder_cor, corrupt_cor;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::crndstate	file:
duplicate	sch_netem.c	/^	u32 duplicate;$/;"	m	struct:netem_sched_data	file:
dx	sch_hfsc.c	/^	u64	dx;	\/* the x-projection of the 1st segment *\/$/;"	m	struct:internal_sc	file:
dx	sch_hfsc.c	/^	u64	dx;	\/* the x-projection of the 1st segment *\/$/;"	m	struct:runtime_sc	file:
dx2d	sch_hfsc.c	/^dx2d(u64 dx)$/;"	f	file:
dy	sch_hfsc.c	/^	u64	dy;	\/* the y-projection of the 1st segment *\/$/;"	m	struct:internal_sc	file:
dy	sch_hfsc.c	/^	u64	dy;	\/* the y-projection of the 1st segment *\/$/;"	m	struct:runtime_sc	file:
el_node	sch_hfsc.c	/^	struct rb_node el_node;		\/* qdisc's eligible tree member *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::rb_node	file:
eligible	sch_hfsc.c	/^	struct rb_root eligible;		\/* eligible tree *\/$/;"	m	struct:hfsc_sched	typeref:struct:hfsc_sched::rb_root	file:
eltree_get_mindl	sch_hfsc.c	/^eltree_get_mindl(struct hfsc_sched *q, u64 cur_time)$/;"	f	file:
eltree_get_minel	sch_hfsc.c	/^eltree_get_minel(struct hfsc_sched *q)$/;"	f	file:
eltree_insert	sch_hfsc.c	/^eltree_insert(struct hfsc_class *cl)$/;"	f	file:
eltree_remove	sch_hfsc.c	/^eltree_remove(struct hfsc_class *cl)$/;"	f	file:
eltree_update	sch_hfsc.c	/^eltree_update(struct hfsc_class *cl)$/;"	f	file:
em_cmp_match	em_cmp.c	/^static int em_cmp_match(struct sk_buff *skb, struct tcf_ematch *em,$/;"	f	file:
em_cmp_ops	em_cmp.c	/^static struct tcf_ematch_ops em_cmp_ops = {$/;"	v	typeref:struct:tcf_ematch_ops	file:
em_meta_change	em_meta.c	/^static int em_meta_change(struct tcf_proto *tp, void *data, int len,$/;"	f	file:
em_meta_destroy	em_meta.c	/^static void em_meta_destroy(struct tcf_proto *tp, struct tcf_ematch *m)$/;"	f	file:
em_meta_dump	em_meta.c	/^static int em_meta_dump(struct sk_buff *skb, struct tcf_ematch *em)$/;"	f	file:
em_meta_match	em_meta.c	/^static int em_meta_match(struct sk_buff *skb, struct tcf_ematch *m,$/;"	f	file:
em_meta_ops	em_meta.c	/^static struct tcf_ematch_ops em_meta_ops = {$/;"	v	typeref:struct:tcf_ematch_ops	file:
em_nbyte_change	em_nbyte.c	/^static int em_nbyte_change(struct tcf_proto *tp, void *data, int data_len,$/;"	f	file:
em_nbyte_match	em_nbyte.c	/^static int em_nbyte_match(struct sk_buff *skb, struct tcf_ematch *em,$/;"	f	file:
em_nbyte_ops	em_nbyte.c	/^static struct tcf_ematch_ops em_nbyte_ops = {$/;"	v	typeref:struct:tcf_ematch_ops	file:
em_policy	ematch.c	/^static const struct nla_policy em_policy[TCA_EMATCH_TREE_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
em_text_change	em_text.c	/^static int em_text_change(struct tcf_proto *tp, void *data, int len,$/;"	f	file:
em_text_destroy	em_text.c	/^static void em_text_destroy(struct tcf_proto *tp, struct tcf_ematch *m)$/;"	f	file:
em_text_dump	em_text.c	/^static int em_text_dump(struct sk_buff *skb, struct tcf_ematch *m)$/;"	f	file:
em_text_match	em_text.c	/^static int em_text_match(struct sk_buff *skb, struct tcf_ematch *m,$/;"	f	file:
em_text_ops	em_text.c	/^static struct tcf_ematch_ops em_text_ops = {$/;"	v	typeref:struct:tcf_ematch_ops	file:
em_u32_match	em_u32.c	/^static int em_u32_match(struct sk_buff *skb, struct tcf_ematch *em,$/;"	f	file:
em_u32_ops	em_u32.c	/^static struct tcf_ematch_ops em_u32_ops = {$/;"	v	typeref:struct:tcf_ematch_ops	file:
ematches	cls_basic.c	/^	struct tcf_ematch_tree	ematches;$/;"	m	struct:basic_filter	typeref:struct:basic_filter::tcf_ematch_tree	file:
ematches	cls_cgroup.c	/^	struct tcf_ematch_tree	ematches;$/;"	m	struct:cls_cgroup_head	typeref:struct:cls_cgroup_head::tcf_ematch_tree	file:
ematches	cls_flow.c	/^	struct tcf_ematch_tree	ematches;$/;"	m	struct:flow_filter	typeref:struct:flow_filter::tcf_ematch_tree	file:
esfq_change	sch_esfq.c	/^static int esfq_change(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
esfq_check_hash	sch_esfq.c	/^static unsigned int esfq_check_hash(unsigned int kind)$/;"	f	file:
esfq_dec	sch_esfq.c	/^static inline void esfq_dec(struct esfq_sched_data *q, esfq_index x)$/;"	f	file:
esfq_dequeue	sch_esfq.c	/^static struct sk_buff *esfq_dequeue(struct Qdisc* sch)$/;"	f	file:
esfq_destroy	sch_esfq.c	/^static void esfq_destroy(struct Qdisc *sch)$/;"	f	file:
esfq_drop	sch_esfq.c	/^static unsigned int esfq_drop(struct Qdisc *sch)$/;"	f	file:
esfq_dump	sch_esfq.c	/^static int esfq_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
esfq_enqueue	sch_esfq.c	/^static int esfq_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
esfq_hash	sch_esfq.c	/^static unsigned esfq_hash(struct esfq_sched_data *q, struct sk_buff *skb)$/;"	f	file:
esfq_head	sch_esfq.c	/^struct esfq_head$/;"	s	file:
esfq_inc	sch_esfq.c	/^static inline void esfq_inc(struct esfq_sched_data *q, esfq_index x)$/;"	f	file:
esfq_index	sch_esfq.c	/^typedef unsigned int esfq_index;$/;"	t	file:
esfq_init	sch_esfq.c	/^static int esfq_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
esfq_jhash_1word	sch_esfq.c	/^static __inline__ unsigned esfq_jhash_1word(struct esfq_sched_data *q,u32 a)$/;"	f	file:
esfq_jhash_2words	sch_esfq.c	/^static __inline__ unsigned esfq_jhash_2words(struct esfq_sched_data *q, u32 a, u32 b)$/;"	f	file:
esfq_jhash_3words	sch_esfq.c	/^static __inline__ unsigned esfq_jhash_3words(struct esfq_sched_data *q, u32 a, u32 b, u32 c)$/;"	f	file:
esfq_link	sch_esfq.c	/^static inline void esfq_link(struct esfq_sched_data *q, esfq_index x)$/;"	f	file:
esfq_module_exit	sch_esfq.c	/^static void __exit esfq_module_exit(void)$/;"	f	file:
esfq_module_init	sch_esfq.c	/^static int __init esfq_module_init(void)$/;"	f	file:
esfq_packet_info	sch_esfq.c	/^struct esfq_packet_info$/;"	s	file:
esfq_peek	sch_esfq.c	/^static struct sk_buff *esfq_peek(struct Qdisc* sch)$/;"	f	file:
esfq_perturbation	sch_esfq.c	/^static void esfq_perturbation(unsigned long arg)$/;"	f	file:
esfq_q_dequeue	sch_esfq.c	/^static struct sk_buff *esfq_q_dequeue(struct esfq_sched_data *q)$/;"	f	file:
esfq_q_destroy	sch_esfq.c	/^static void esfq_q_destroy(struct esfq_sched_data *q)$/;"	f	file:
esfq_q_enqueue	sch_esfq.c	/^static void esfq_q_enqueue(struct sk_buff *skb, struct esfq_sched_data *q, unsigned int end)$/;"	f	file:
esfq_q_init	sch_esfq.c	/^static int esfq_q_init(struct esfq_sched_data *q, struct nlattr *opt)$/;"	f	file:
esfq_qdisc_ops	sch_esfq.c	/^static struct Qdisc_ops esfq_qdisc_ops =$/;"	v	typeref:struct:Qdisc_ops	file:
esfq_reset	sch_esfq.c	/^static void esfq_reset(struct Qdisc* sch)$/;"	f	file:
esfq_sched_data	sch_esfq.c	/^struct esfq_sched_data$/;"	s	file:
ewma_log	sch_cbq.c	/^	unsigned char		ewma_log;	\/* time constant for idle time calculation *\/$/;"	m	struct:cbq_class	file:
excess	sch_atm.c	/^	struct atm_flow_data	*excess;	\/* flow for excess traffic;$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::atm_flow_data	file:
exit_basic	cls_basic.c	/^static void __exit exit_basic(void)$/;"	f	file:
exit_cgroup_cls	cls_cgroup.c	/^module_exit(exit_cgroup_cls);$/;"	v
exit_cgroup_cls	cls_cgroup.c	/^static void __exit exit_cgroup_cls(void)$/;"	f	file:
exit_em_cmp	em_cmp.c	/^module_exit(exit_em_cmp);$/;"	v
exit_em_cmp	em_cmp.c	/^static void __exit exit_em_cmp(void)$/;"	f	file:
exit_em_meta	em_meta.c	/^module_exit(exit_em_meta);$/;"	v
exit_em_meta	em_meta.c	/^static void __exit exit_em_meta(void)$/;"	f	file:
exit_em_nbyte	em_nbyte.c	/^module_exit(exit_em_nbyte);$/;"	v
exit_em_nbyte	em_nbyte.c	/^static void __exit exit_em_nbyte(void)$/;"	f	file:
exit_em_text	em_text.c	/^module_exit(exit_em_text);$/;"	v
exit_em_text	em_text.c	/^static void __exit exit_em_text(void)$/;"	f	file:
exit_em_u32	em_u32.c	/^module_exit(exit_em_u32);$/;"	v
exit_em_u32	em_u32.c	/^static void __exit exit_em_u32(void)$/;"	f	file:
exit_fw	cls_fw.c	/^static void __exit exit_fw(void)$/;"	f	file:
exit_route4	cls_route.c	/^static void __exit exit_route4(void)$/;"	f	file:
exit_rsvp	cls_rsvp.h	/^static void __exit exit_rsvp(void)$/;"	f
exit_tcindex	cls_tcindex.c	/^static void __exit exit_tcindex(void)$/;"	f	file:
exit_u32	cls_u32.c	/^static void __exit exit_u32(void)$/;"	f	file:
exts	cls_basic.c	/^	struct tcf_exts		exts;$/;"	m	struct:basic_filter	typeref:struct:basic_filter::tcf_exts	file:
exts	cls_cgroup.c	/^	struct tcf_exts		exts;$/;"	m	struct:cls_cgroup_head	typeref:struct:cls_cgroup_head::tcf_exts	file:
exts	cls_flow.c	/^	struct tcf_exts		exts;$/;"	m	struct:flow_filter	typeref:struct:flow_filter::tcf_exts	file:
exts	cls_fw.c	/^	struct tcf_exts		exts;$/;"	m	struct:fw_filter	typeref:struct:fw_filter::tcf_exts	file:
exts	cls_route.c	/^	struct tcf_exts		exts;$/;"	m	struct:route4_filter	typeref:struct:route4_filter::tcf_exts	file:
exts	cls_rsvp.h	/^	struct tcf_exts		exts;$/;"	m	struct:rsvp_filter	typeref:struct:rsvp_filter::tcf_exts
exts	cls_tcindex.c	/^	struct tcf_exts		exts;$/;"	m	struct:tcindex_filter_result	typeref:struct:tcindex_filter_result::tcf_exts	file:
exts	cls_u32.c	/^	struct tcf_exts		exts;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tcf_exts	file:
fall_through	cls_tcindex.c	/^	int fall_through;	\/* 0: only classify if explicit match *\/$/;"	m	struct:tcindex_data	file:
fastmap	cls_route.c	/^	struct route4_fastmap	fastmap[16];$/;"	m	struct:route4_head	typeref:struct:route4_head::route4_fastmap	file:
feed	sch_htb.c	/^			struct rb_root feed[TC_HTB_NUMPRIO];	\/* feed trees *\/$/;"	m	struct:htb_class::__anon2::htb_class_inner	typeref:struct:htb_class::__anon2::htb_class_inner::rb_root	file:
fifo_create_dflt	sch_fifo.c	/^EXPORT_SYMBOL(fifo_create_dflt);$/;"	v
fifo_create_dflt	sch_fifo.c	/^struct Qdisc *fifo_create_dflt(struct Qdisc *sch, struct Qdisc_ops *ops,$/;"	f
fifo_dump	sch_fifo.c	/^static int fifo_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
fifo_init	sch_fifo.c	/^static int fifo_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
fifo_sched_data	sch_fifo.c	/^struct fifo_sched_data$/;"	s	file:
fifo_sched_data	sch_netem.c	/^struct fifo_sched_data {$/;"	s	file:
fifo_set_limit	sch_fifo.c	/^EXPORT_SYMBOL(fifo_set_limit);$/;"	v
fifo_set_limit	sch_fifo.c	/^int fifo_set_limit(struct Qdisc *q, unsigned int limit)$/;"	f
filter	cls_route.c	/^	struct route4_filter	*filter;$/;"	m	struct:route4_fastmap	typeref:struct:route4_fastmap::route4_filter	file:
filter_cnt	sch_drr.c	/^	unsigned int			filter_cnt;$/;"	m	struct:drr_class	file:
filter_cnt	sch_hfsc.c	/^	unsigned int	filter_cnt;	\/* filter count *\/$/;"	m	struct:hfsc_class	file:
filter_cnt	sch_htb.c	/^	int filter_cnt;$/;"	m	struct:htb_class	file:
filter_list	sch_atm.c	/^	struct tcf_proto	*filter_list;$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::tcf_proto	file:
filter_list	sch_cbq.c	/^	struct tcf_proto	*filter_list;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::tcf_proto	file:
filter_list	sch_drr.c	/^	struct tcf_proto		*filter_list;$/;"	m	struct:drr_sched	typeref:struct:drr_sched::tcf_proto	file:
filter_list	sch_dsmark.c	/^	struct tcf_proto	*filter_list;$/;"	m	struct:dsmark_qdisc_data	typeref:struct:dsmark_qdisc_data::tcf_proto	file:
filter_list	sch_hfsc.c	/^	struct tcf_proto *filter_list;	\/* filter list *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::tcf_proto	file:
filter_list	sch_htb.c	/^	struct tcf_proto *filter_list;$/;"	m	struct:htb_class	typeref:struct:htb_class::tcf_proto	file:
filter_list	sch_htb.c	/^	struct tcf_proto *filter_list;$/;"	m	struct:htb_sched	typeref:struct:htb_sched::tcf_proto	file:
filter_list	sch_ingress.c	/^	struct tcf_proto	*filter_list;$/;"	m	struct:ingress_qdisc_data	typeref:struct:ingress_qdisc_data::tcf_proto	file:
filter_list	sch_multiq.c	/^	struct tcf_proto *filter_list;$/;"	m	struct:multiq_sched_data	typeref:struct:multiq_sched_data::tcf_proto	file:
filter_list	sch_prio.c	/^	struct tcf_proto *filter_list;$/;"	m	struct:prio_sched_data	typeref:struct:prio_sched_data::tcf_proto	file:
filter_list	sch_sfq.c	/^	struct tcf_proto *filter_list;$/;"	m	struct:sfq_sched_data	typeref:struct:sfq_sched_data::tcf_proto	file:
filters	cls_flow.c	/^	struct list_head	filters;$/;"	m	struct:flow_head	typeref:struct:flow_head::list_head	file:
filters	sch_cbq.c	/^	int			filters;$/;"	m	struct:cbq_class	file:
findNextFlowSNode	sch_prio.c	/^struct netFlowStatus* findNextFlowSNode(struct seq_file *seq)$/;"	f
find_dump_kind	act_api.c	/^find_dump_kind(const struct nlmsghdr *n)$/;"	f	file:
find_pattern2	sch_generic.c	/^static int find_pattern2(const char *data, size_t dlen,$/;"	f	file:
fixed_loadavg	em_meta.c	/^static inline unsigned long fixed_loadavg(int load)$/;"	f	file:
flags	sch_gred.c	/^	unsigned long	flags;$/;"	m	struct:gred_sched	file:
flags	sch_red.c	/^	unsigned char		flags;$/;"	m	struct:red_sched_data	file:
flist	cls_basic.c	/^	struct list_head	flist;$/;"	m	struct:basic_head	typeref:struct:basic_head::list_head	file:
flowS_net_exit	sch_prio.c	/^static void __net_exit flowS_net_exit(struct net *net)$/;"	f	file:
flowS_net_init	sch_prio.c	/^static int __net_init flowS_net_init(struct net *net)$/;"	f	file:
flowS_net_ops	sch_prio.c	/^static struct pernet_operations flowS_net_ops = {$/;"	v	typeref:struct:pernet_operations	file:
flowS_priv	sch_prio.c	/^struct flowS_priv{$/;"	s	file:
flowS_seq_fops	sch_prio.c	/^static const struct file_operations flowS_seq_fops = {$/;"	v	typeref:struct:file_operations	file:
flowS_seq_next	sch_prio.c	/^void *flowS_seq_next(struct seq_file *seq, void *v, loff_t *pos)$/;"	f
flowS_seq_open	sch_prio.c	/^static int flowS_seq_open(struct inode *inode, struct file *file)$/;"	f	file:
flowS_seq_ops	sch_prio.c	/^static const struct seq_operations flowS_seq_ops = {$/;"	v	typeref:struct:seq_operations	file:
flowS_seq_show	sch_prio.c	/^static int flowS_seq_show(struct seq_file *seq, void *v)$/;"	f	file:
flow_change	cls_flow.c	/^static int flow_change(struct tcf_proto *tp, unsigned long base,$/;"	f	file:
flow_classify	cls_flow.c	/^static int flow_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f	file:
flow_delete	cls_flow.c	/^static int flow_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f	file:
flow_destroy	cls_flow.c	/^static void flow_destroy(struct tcf_proto *tp)$/;"	f	file:
flow_destroy_filter	cls_flow.c	/^static void flow_destroy_filter(struct tcf_proto *tp, struct flow_filter *f)$/;"	f	file:
flow_dump	cls_flow.c	/^static int flow_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f	file:
flow_ext_map	cls_flow.c	/^static const struct tcf_ext_map flow_ext_map = {$/;"	v	typeref:struct:tcf_ext_map	file:
flow_filter	cls_flow.c	/^struct flow_filter {$/;"	s	file:
flow_get	cls_flow.c	/^static unsigned long flow_get(struct tcf_proto *tp, u32 handle)$/;"	f	file:
flow_get_dst	cls_flow.c	/^static u32 flow_get_dst(struct sk_buff *skb)$/;"	f	file:
flow_get_iif	cls_flow.c	/^static u32 flow_get_iif(const struct sk_buff *skb)$/;"	f	file:
flow_get_mark	cls_flow.c	/^static u32 flow_get_mark(const struct sk_buff *skb)$/;"	f	file:
flow_get_nfct	cls_flow.c	/^static u32 flow_get_nfct(const struct sk_buff *skb)$/;"	f	file:
flow_get_nfct_dst	cls_flow.c	/^static u32 flow_get_nfct_dst(struct sk_buff *skb)$/;"	f	file:
flow_get_nfct_proto_dst	cls_flow.c	/^static u32 flow_get_nfct_proto_dst(struct sk_buff *skb)$/;"	f	file:
flow_get_nfct_proto_src	cls_flow.c	/^static u32 flow_get_nfct_proto_src(struct sk_buff *skb)$/;"	f	file:
flow_get_nfct_src	cls_flow.c	/^static u32 flow_get_nfct_src(struct sk_buff *skb)$/;"	f	file:
flow_get_priority	cls_flow.c	/^static u32 flow_get_priority(const struct sk_buff *skb)$/;"	f	file:
flow_get_proto	cls_flow.c	/^static u32 flow_get_proto(struct sk_buff *skb)$/;"	f	file:
flow_get_proto_dst	cls_flow.c	/^static u32 flow_get_proto_dst(struct sk_buff *skb)$/;"	f	file:
flow_get_proto_src	cls_flow.c	/^static u32 flow_get_proto_src(struct sk_buff *skb)$/;"	f	file:
flow_get_rtclassid	cls_flow.c	/^static u32 flow_get_rtclassid(const struct sk_buff *skb)$/;"	f	file:
flow_get_skgid	cls_flow.c	/^static u32 flow_get_skgid(const struct sk_buff *skb)$/;"	f	file:
flow_get_skuid	cls_flow.c	/^static u32 flow_get_skuid(const struct sk_buff *skb)$/;"	f	file:
flow_get_src	cls_flow.c	/^static u32 flow_get_src(struct sk_buff *skb)$/;"	f	file:
flow_get_vlan_tag	cls_flow.c	/^static u32 flow_get_vlan_tag(const struct sk_buff *skb)$/;"	f	file:
flow_head	cls_flow.c	/^struct flow_head {$/;"	s	file:
flow_init	cls_flow.c	/^static int flow_init(struct tcf_proto *tp)$/;"	f	file:
flow_key_get	cls_flow.c	/^static u32 flow_key_get(struct sk_buff *skb, int key)$/;"	f	file:
flow_perturbation	cls_flow.c	/^static void flow_perturbation(unsigned long arg)$/;"	f	file:
flow_policy	cls_flow.c	/^static const struct nla_policy flow_policy[TCA_FLOW_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
flow_put	cls_flow.c	/^static void flow_put(struct tcf_proto *tp, unsigned long f)$/;"	f	file:
flow_walk	cls_flow.c	/^static void flow_walk(struct tcf_proto *tp, struct tcf_walker *arg)$/;"	f	file:
flows	sch_atm.c	/^	struct list_head	flows;		\/* NB: "link" is also on this$/;"	m	struct:atm_qdisc_data	typeref:struct:atm_qdisc_data::list_head	file:
from_hash	cls_route.c	/^static inline u32 from_hash(u32 id)$/;"	f	file:
from_layer	em_text.c	/^	u8			from_layer;$/;"	m	struct:text_match	file:
from_offset	em_text.c	/^	u16			from_offset;$/;"	m	struct:text_match	file:
fshift	cls_u32.c	/^	u8			fshift;$/;"	m	struct:tc_u_knode	file:
fw_change	cls_fw.c	/^static int fw_change(struct tcf_proto *tp, unsigned long base,$/;"	f	file:
fw_change_attrs	cls_fw.c	/^fw_change_attrs(struct tcf_proto *tp, struct fw_filter *f,$/;"	f	file:
fw_classify	cls_fw.c	/^static int fw_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f	file:
fw_delete	cls_fw.c	/^static int fw_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f	file:
fw_delete_filter	cls_fw.c	/^fw_delete_filter(struct tcf_proto *tp, struct fw_filter *f)$/;"	f	file:
fw_destroy	cls_fw.c	/^static void fw_destroy(struct tcf_proto *tp)$/;"	f	file:
fw_dump	cls_fw.c	/^static int fw_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f	file:
fw_ext_map	cls_fw.c	/^static const struct tcf_ext_map fw_ext_map = {$/;"	v	typeref:struct:tcf_ext_map	file:
fw_filter	cls_fw.c	/^struct fw_filter$/;"	s	file:
fw_get	cls_fw.c	/^static unsigned long fw_get(struct tcf_proto *tp, u32 handle)$/;"	f	file:
fw_hash	cls_fw.c	/^static __inline__ int fw_hash(u32 handle)$/;"	f	file:
fw_head	cls_fw.c	/^struct fw_head$/;"	s	file:
fw_init	cls_fw.c	/^static int fw_init(struct tcf_proto *tp)$/;"	f	file:
fw_policy	cls_fw.c	/^static const struct nla_policy fw_policy[TCA_FW_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
fw_put	cls_fw.c	/^static void fw_put(struct tcf_proto *tp, unsigned long f)$/;"	f	file:
fw_walk	cls_fw.c	/^static void fw_walk(struct tcf_proto *tp, struct tcf_walker *arg)$/;"	f	file:
g_rand	act_gact.c	/^typedef int (*g_rand)(struct tcf_gact *gact);$/;"	t	file:
gact_cleanup_module	act_gact.c	/^module_exit(gact_cleanup_module);$/;"	v
gact_cleanup_module	act_gact.c	/^static void __exit gact_cleanup_module(void)$/;"	f	file:
gact_determ	act_gact.c	/^static int gact_determ(struct tcf_gact *gact)$/;"	f	file:
gact_hash_info	act_gact.c	/^static struct tcf_hashinfo gact_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
gact_idx_gen	act_gact.c	/^static u32 gact_idx_gen;$/;"	v	file:
gact_init_module	act_gact.c	/^module_init(gact_init_module);$/;"	v
gact_init_module	act_gact.c	/^static int __init gact_init_module(void)$/;"	f	file:
gact_net_rand	act_gact.c	/^static int gact_net_rand(struct tcf_gact *gact)$/;"	f	file:
gact_policy	act_gact.c	/^static const struct nla_policy gact_policy[TCA_GACT_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
gact_rand	act_gact.c	/^static g_rand gact_rand[MAX_RAND]= { NULL, gact_net_rand, gact_determ };$/;"	v	file:
gap	sch_netem.c	/^	u32 gap;$/;"	m	struct:netem_sched_data	file:
gen_handle	cls_rsvp.h	/^static unsigned gen_handle(struct tcf_proto *tp, unsigned salt)$/;"	f
gen_new_htid	cls_u32.c	/^static u32 gen_new_htid(struct tc_u_common *tp_c)$/;"	f	file:
gen_new_kid	cls_u32.c	/^static u32 gen_new_kid(struct tc_u_hnode *ht, u32 handle)$/;"	f	file:
gen_tunnel	cls_rsvp.h	/^static u32 gen_tunnel(struct rsvp_head *data)$/;"	f
get	em_meta.c	/^	void		(*get)(struct sk_buff *, struct tcf_pkt_info *,$/;"	m	struct:meta_ops	file:
get_correlation	sch_netem.c	/^static void get_correlation(struct Qdisc *sch, const struct nlattr *attr)$/;"	f	file:
get_corrupt	sch_netem.c	/^static void get_corrupt(struct Qdisc *sch, const struct nlattr *attr)$/;"	f	file:
get_crandom	sch_netem.c	/^static u32 get_crandom(struct crndstate *state)$/;"	f	file:
get_dist_table	sch_netem.c	/^static int get_dist_table(struct Qdisc *sch, const struct nlattr *attr)$/;"	f	file:
get_reorder	sch_netem.c	/^static void get_reorder(struct Qdisc *sch, const struct nlattr *attr)$/;"	f	file:
gred_backlog	sch_gred.c	/^static inline unsigned int gred_backlog(struct gred_sched *table,$/;"	f	file:
gred_change	sch_gred.c	/^static int gred_change(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
gred_change_table_def	sch_gred.c	/^static inline int gred_change_table_def(struct Qdisc *sch, struct nlattr *dps)$/;"	f	file:
gred_change_vq	sch_gred.c	/^static inline int gred_change_vq(struct Qdisc *sch, int dp,$/;"	f	file:
gred_dequeue	sch_gred.c	/^static struct sk_buff *gred_dequeue(struct Qdisc* sch)$/;"	f	file:
gred_destroy	sch_gred.c	/^static void gred_destroy(struct Qdisc *sch)$/;"	f	file:
gred_destroy_vq	sch_gred.c	/^static inline void gred_destroy_vq(struct gred_sched_data *q)$/;"	f	file:
gred_disable_rio_mode	sch_gred.c	/^static inline void gred_disable_rio_mode(struct gred_sched *table)$/;"	f	file:
gred_disable_wred_mode	sch_gred.c	/^static inline void gred_disable_wred_mode(struct gred_sched *table)$/;"	f	file:
gred_drop	sch_gred.c	/^static unsigned int gred_drop(struct Qdisc* sch)$/;"	f	file:
gred_dump	sch_gred.c	/^static int gred_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
gred_enable_rio_mode	sch_gred.c	/^static inline void gred_enable_rio_mode(struct gred_sched *table)$/;"	f	file:
gred_enable_wred_mode	sch_gred.c	/^static inline void gred_enable_wred_mode(struct gred_sched *table)$/;"	f	file:
gred_enqueue	sch_gred.c	/^static int gred_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
gred_init	sch_gred.c	/^static int gred_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
gred_load_wred_set	sch_gred.c	/^static inline void gred_load_wred_set(struct gred_sched *table,$/;"	f	file:
gred_module_exit	sch_gred.c	/^static void __exit gred_module_exit(void)$/;"	f	file:
gred_module_init	sch_gred.c	/^static int __init gred_module_init(void)$/;"	f	file:
gred_policy	sch_gred.c	/^static const struct nla_policy gred_policy[TCA_GRED_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
gred_reset	sch_gred.c	/^static void gred_reset(struct Qdisc* sch)$/;"	f	file:
gred_rio_mode	sch_gred.c	/^static inline int gred_rio_mode(struct gred_sched *table)$/;"	f	file:
gred_sched	sch_gred.c	/^struct gred_sched$/;"	s	file:
gred_sched_data	sch_gred.c	/^struct gred_sched_data$/;"	s	file:
gred_store_wred_set	sch_gred.c	/^static inline void gred_store_wred_set(struct gred_sched *table,$/;"	f	file:
gred_use_ecn	sch_gred.c	/^static inline int gred_use_ecn(struct gred_sched *t)$/;"	f	file:
gred_use_harddrop	sch_gred.c	/^static inline int gred_use_harddrop(struct gred_sched *t)$/;"	f	file:
gred_wred_mode	sch_gred.c	/^static inline int gred_wred_mode(struct gred_sched *table)$/;"	f	file:
gred_wred_mode_check	sch_gred.c	/^static inline int gred_wred_mode_check(struct Qdisc *sch)$/;"	f	file:
h	cls_tcindex.c	/^	struct tcindex_filter **h; \/* imperfect hash; only used if !perfect;$/;"	m	struct:tcindex_data	typeref:struct:tcindex_data::tcindex_filter	file:
handle	cls_basic.c	/^	u32			handle;$/;"	m	struct:basic_filter	file:
handle	cls_cgroup.c	/^	u32			handle;$/;"	m	struct:cls_cgroup_head	file:
handle	cls_flow.c	/^	u32			handle;$/;"	m	struct:flow_filter	file:
handle	cls_route.c	/^	u32			handle;$/;"	m	struct:route4_filter	file:
handle	cls_rsvp.h	/^	u32			handle;$/;"	m	struct:rsvp_filter
handle	cls_u32.c	/^	u32			handle;$/;"	m	struct:tc_u_hnode	file:
handle	cls_u32.c	/^	u32			handle;$/;"	m	struct:tc_u_knode	file:
handle_dev_cpu_collision	sch_generic.c	/^static inline int handle_dev_cpu_collision(struct sk_buff *skb,$/;"	f	file:
has_ports	cls_flow.c	/^static int has_ports(u8 protocol)$/;"	f	file:
hash	cls_tcindex.c	/^	int hash;		\/* hash table size; 0 if undefined *\/$/;"	m	struct:tcindex_data	file:
hash	sch_esfq.c	/^	unsigned short	*hash;			\/* Hash value indexed by slots *\/$/;"	m	struct:esfq_sched_data	file:
hash	sch_sfq.c	/^	unsigned short	hash[SFQ_DEPTH];	\/* Hash value indexed by slots *\/$/;"	m	struct:sfq_sched_data	file:
hash_divisor	sch_esfq.c	/^	unsigned	hash_divisor;$/;"	m	struct:esfq_sched_data	file:
hash_dst	cls_rsvp.h	/^static __inline__ unsigned hash_dst(__be32 *dst, u8 protocol, u8 tunnelid)$/;"	f
hash_kind	sch_esfq.c	/^	unsigned	hash_kind;$/;"	m	struct:esfq_sched_data	file:
hash_src	cls_rsvp.h	/^static __inline__ unsigned hash_src(__be32 *src)$/;"	f
hashrnd	cls_flow.c	/^	u32			hashrnd;$/;"	m	struct:flow_filter	file:
hdr	em_meta.c	/^	struct tcf_meta_val	hdr;$/;"	m	struct:meta_value	typeref:struct:meta_value::tcf_meta_val	file:
hdr	em_nbyte.c	/^	struct tcf_em_nbyte	hdr;$/;"	m	struct:nbyte_data	typeref:struct:nbyte_data::tcf_em_nbyte	file:
hdr	sch_atm.c	/^	unsigned char		hdr[0];		\/* header data; MUST BE LAST *\/$/;"	m	struct:atm_flow_data	file:
hdr_len	sch_atm.c	/^	int			hdr_len;$/;"	m	struct:atm_flow_data	file:
hfsc_adjust_levels	sch_hfsc.c	/^hfsc_adjust_levels(struct hfsc_class *cl)$/;"	f	file:
hfsc_bind_tcf	sch_hfsc.c	/^hfsc_bind_tcf(struct Qdisc *sch, unsigned long parent, u32 classid)$/;"	f	file:
hfsc_change_class	sch_hfsc.c	/^hfsc_change_class(struct Qdisc *sch, u32 classid, u32 parentid,$/;"	f	file:
hfsc_change_fsc	sch_hfsc.c	/^hfsc_change_fsc(struct hfsc_class *cl, struct tc_service_curve *fsc)$/;"	f	file:
hfsc_change_qdisc	sch_hfsc.c	/^hfsc_change_qdisc(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
hfsc_change_rsc	sch_hfsc.c	/^hfsc_change_rsc(struct hfsc_class *cl, struct tc_service_curve *rsc,$/;"	f	file:
hfsc_change_usc	sch_hfsc.c	/^hfsc_change_usc(struct hfsc_class *cl, struct tc_service_curve *usc,$/;"	f	file:
hfsc_class	sch_hfsc.c	/^struct hfsc_class$/;"	s	file:
hfsc_class_flags	sch_hfsc.c	/^enum hfsc_class_flags$/;"	g	file:
hfsc_class_leaf	sch_hfsc.c	/^hfsc_class_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
hfsc_class_ops	sch_hfsc.c	/^static const struct Qdisc_class_ops hfsc_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
hfsc_classify	sch_hfsc.c	/^hfsc_classify(struct sk_buff *skb, struct Qdisc *sch, int *qerr)$/;"	f	file:
hfsc_cleanup	sch_hfsc.c	/^hfsc_cleanup(void)$/;"	f	file:
hfsc_cleanup	sch_hfsc.c	/^module_exit(hfsc_cleanup);$/;"	v
hfsc_delete_class	sch_hfsc.c	/^hfsc_delete_class(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
hfsc_dequeue	sch_hfsc.c	/^hfsc_dequeue(struct Qdisc *sch)$/;"	f	file:
hfsc_destroy_class	sch_hfsc.c	/^hfsc_destroy_class(struct Qdisc *sch, struct hfsc_class *cl)$/;"	f	file:
hfsc_destroy_qdisc	sch_hfsc.c	/^hfsc_destroy_qdisc(struct Qdisc *sch)$/;"	f	file:
hfsc_drop	sch_hfsc.c	/^hfsc_drop(struct Qdisc *sch)$/;"	f	file:
hfsc_dump_class	sch_hfsc.c	/^hfsc_dump_class(struct Qdisc *sch, unsigned long arg, struct sk_buff *skb,$/;"	f	file:
hfsc_dump_class_stats	sch_hfsc.c	/^hfsc_dump_class_stats(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
hfsc_dump_curves	sch_hfsc.c	/^hfsc_dump_curves(struct sk_buff *skb, struct hfsc_class *cl)$/;"	f	file:
hfsc_dump_qdisc	sch_hfsc.c	/^hfsc_dump_qdisc(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
hfsc_dump_sc	sch_hfsc.c	/^hfsc_dump_sc(struct sk_buff *skb, int attr, struct internal_sc *sc)$/;"	f	file:
hfsc_enqueue	sch_hfsc.c	/^hfsc_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
hfsc_find_class	sch_hfsc.c	/^hfsc_find_class(u32 classid, struct Qdisc *sch)$/;"	f	file:
hfsc_get_class	sch_hfsc.c	/^hfsc_get_class(struct Qdisc *sch, u32 classid)$/;"	f	file:
hfsc_graft_class	sch_hfsc.c	/^hfsc_graft_class(struct Qdisc *sch, unsigned long arg, struct Qdisc *new,$/;"	f	file:
hfsc_init	sch_hfsc.c	/^hfsc_init(void)$/;"	f	file:
hfsc_init	sch_hfsc.c	/^module_init(hfsc_init);$/;"	v
hfsc_init_qdisc	sch_hfsc.c	/^hfsc_init_qdisc(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
hfsc_policy	sch_hfsc.c	/^static const struct nla_policy hfsc_policy[TCA_HFSC_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
hfsc_purge_queue	sch_hfsc.c	/^hfsc_purge_queue(struct Qdisc *sch, struct hfsc_class *cl)$/;"	f	file:
hfsc_put_class	sch_hfsc.c	/^hfsc_put_class(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
hfsc_qlen_notify	sch_hfsc.c	/^hfsc_qlen_notify(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
hfsc_reset_class	sch_hfsc.c	/^hfsc_reset_class(struct hfsc_class *cl)$/;"	f	file:
hfsc_reset_qdisc	sch_hfsc.c	/^hfsc_reset_qdisc(struct Qdisc *sch)$/;"	f	file:
hfsc_sched	sch_hfsc.c	/^struct hfsc_sched$/;"	s	file:
hfsc_schedule_watchdog	sch_hfsc.c	/^hfsc_schedule_watchdog(struct Qdisc *sch)$/;"	f	file:
hfsc_tcf_chain	sch_hfsc.c	/^hfsc_tcf_chain(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
hfsc_unbind_tcf	sch_hfsc.c	/^hfsc_unbind_tcf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
hfsc_walk	sch_hfsc.c	/^hfsc_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
hgenerator	cls_basic.c	/^	u32			hgenerator;$/;"	m	struct:basic_head	file:
hgenerator	cls_rsvp.h	/^	u32			hgenerator;$/;"	m	struct:rsvp_head
hgenerator	cls_u32.c	/^	u32			hgenerator;$/;"	m	struct:tc_u_common	file:
hgenerator	sch_cbq.c	/^	u32			hgenerator;$/;"	m	struct:cbq_sched_data	file:
hlist	cls_u32.c	/^	struct tc_u_hnode	*hlist;$/;"	m	struct:tc_u_common	typeref:struct:tc_u_common::tc_u_hnode	file:
ht	cls_fw.c	/^	struct fw_filter *ht[HTSIZE];$/;"	m	struct:fw_head	typeref:struct:fw_head::fw_filter	file:
ht	cls_route.c	/^	struct route4_filter	*ht[16+16+1];$/;"	m	struct:route4_bucket	typeref:struct:route4_bucket::route4_filter	file:
ht	cls_rsvp.h	/^	struct rsvp_filter	*ht[16+1];$/;"	m	struct:rsvp_session	typeref:struct:rsvp_session::rsvp_filter
ht	cls_rsvp.h	/^	struct rsvp_session	*ht[256];$/;"	m	struct:rsvp_head	typeref:struct:rsvp_head::rsvp_session
ht	cls_u32.c	/^	struct tc_u_knode	*ht[1];$/;"	m	struct:tc_u_hnode	typeref:struct:tc_u_hnode::tc_u_knode	file:
ht	sch_esfq.c	/^	esfq_index	*ht;			\/* Hash table *\/$/;"	m	struct:esfq_sched_data	file:
ht	sch_sfq.c	/^	sfq_index	ht[SFQ_HASH_DIVISOR];	\/* Hash table *\/$/;"	m	struct:sfq_sched_data	file:
ht_down	cls_u32.c	/^	struct tc_u_hnode	*ht_down;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tc_u_hnode	file:
ht_up	cls_u32.c	/^	struct tc_u_hnode	*ht_up;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tc_u_hnode	file:
htb_accnt_ctokens	sch_htb.c	/^static inline void htb_accnt_ctokens(struct htb_class *cl, int bytes, long diff)$/;"	f	file:
htb_accnt_tokens	sch_htb.c	/^static inline void htb_accnt_tokens(struct htb_class *cl, int bytes, long diff)$/;"	f	file:
htb_activate	sch_htb.c	/^static inline void htb_activate(struct htb_sched *q, struct htb_class *cl)$/;"	f	file:
htb_activate_prios	sch_htb.c	/^static void htb_activate_prios(struct htb_sched *q, struct htb_class *cl)$/;"	f	file:
htb_add_class_to_row	sch_htb.c	/^static inline void htb_add_class_to_row(struct htb_sched *q,$/;"	f	file:
htb_add_to_id_tree	sch_htb.c	/^static void htb_add_to_id_tree(struct rb_root *root,$/;"	f	file:
htb_add_to_wait_tree	sch_htb.c	/^static void htb_add_to_wait_tree(struct htb_sched *q,$/;"	f	file:
htb_bind_filter	sch_htb.c	/^static unsigned long htb_bind_filter(struct Qdisc *sch, unsigned long parent,$/;"	f	file:
htb_change_class	sch_htb.c	/^static int htb_change_class(struct Qdisc *sch, u32 classid,$/;"	f	file:
htb_change_class_mode	sch_htb.c	/^htb_change_class_mode(struct htb_sched *q, struct htb_class *cl, long *diff)$/;"	f	file:
htb_charge_class	sch_htb.c	/^static void htb_charge_class(struct htb_sched *q, struct htb_class *cl,$/;"	f	file:
htb_class	sch_htb.c	/^struct htb_class {$/;"	s	file:
htb_class_inner	sch_htb.c	/^		struct htb_class_inner {$/;"	s	union:htb_class::__anon2	file:
htb_class_leaf	sch_htb.c	/^		struct htb_class_leaf {$/;"	s	union:htb_class::__anon2	file:
htb_class_mode	sch_htb.c	/^htb_class_mode(struct htb_class *cl, long *diff)$/;"	f	file:
htb_class_ops	sch_htb.c	/^static const struct Qdisc_class_ops htb_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
htb_classify	sch_htb.c	/^static struct htb_class *htb_classify(struct sk_buff *skb, struct Qdisc *sch,$/;"	f	file:
htb_cmode	sch_htb.c	/^enum htb_cmode {$/;"	g	file:
htb_deactivate	sch_htb.c	/^static inline void htb_deactivate(struct htb_sched *q, struct htb_class *cl)$/;"	f	file:
htb_deactivate_prios	sch_htb.c	/^static void htb_deactivate_prios(struct htb_sched *q, struct htb_class *cl)$/;"	f	file:
htb_delete	sch_htb.c	/^static int htb_delete(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
htb_dequeue	sch_htb.c	/^static struct sk_buff *htb_dequeue(struct Qdisc *sch)$/;"	f	file:
htb_dequeue_tree	sch_htb.c	/^static struct sk_buff *htb_dequeue_tree(struct htb_sched *q, int prio,$/;"	f	file:
htb_destroy	sch_htb.c	/^static void htb_destroy(struct Qdisc *sch)$/;"	f	file:
htb_destroy_class	sch_htb.c	/^static void htb_destroy_class(struct Qdisc *sch, struct htb_class *cl)$/;"	f	file:
htb_do_events	sch_htb.c	/^static psched_time_t htb_do_events(struct htb_sched *q, int level,$/;"	f	file:
htb_drop	sch_htb.c	/^static unsigned int htb_drop(struct Qdisc *sch)$/;"	f	file:
htb_dump	sch_htb.c	/^static int htb_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
htb_dump_class	sch_htb.c	/^static int htb_dump_class(struct Qdisc *sch, unsigned long arg,$/;"	f	file:
htb_dump_class_stats	sch_htb.c	/^htb_dump_class_stats(struct Qdisc *sch, unsigned long arg, struct gnet_dump *d)$/;"	f	file:
htb_enqueue	sch_htb.c	/^static int htb_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
htb_find	sch_htb.c	/^static inline struct htb_class *htb_find(u32 handle, struct Qdisc *sch)$/;"	f	file:
htb_find_tcf	sch_htb.c	/^static struct tcf_proto **htb_find_tcf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
htb_get	sch_htb.c	/^static unsigned long htb_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
htb_graft	sch_htb.c	/^static int htb_graft(struct Qdisc *sch, unsigned long arg, struct Qdisc *new,$/;"	f	file:
htb_hiwater	sch_htb.c	/^static inline long htb_hiwater(const struct htb_class *cl)$/;"	f	file:
htb_id_find_next_upper	sch_htb.c	/^static struct rb_node *htb_id_find_next_upper(int prio, struct rb_node *n,$/;"	f	file:
htb_init	sch_htb.c	/^static int htb_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
htb_leaf	sch_htb.c	/^static struct Qdisc *htb_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
htb_lookup_leaf	sch_htb.c	/^static struct htb_class *htb_lookup_leaf(struct rb_root *tree, int prio,$/;"	f	file:
htb_lowater	sch_htb.c	/^static inline long htb_lowater(const struct htb_class *cl)$/;"	f	file:
htb_module_exit	sch_htb.c	/^static void __exit htb_module_exit(void)$/;"	f	file:
htb_module_init	sch_htb.c	/^static int __init htb_module_init(void)$/;"	f	file:
htb_next_rb_node	sch_htb.c	/^static inline void htb_next_rb_node(struct rb_node **n)$/;"	f	file:
htb_parent_last_child	sch_htb.c	/^static inline int htb_parent_last_child(struct htb_class *cl)$/;"	f	file:
htb_parent_to_leaf	sch_htb.c	/^static void htb_parent_to_leaf(struct htb_sched *q, struct htb_class *cl,$/;"	f	file:
htb_policy	sch_htb.c	/^static const struct nla_policy htb_policy[TCA_HTB_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
htb_put	sch_htb.c	/^static void htb_put(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
htb_qlen_notify	sch_htb.c	/^static void htb_qlen_notify(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
htb_remove_class_from_row	sch_htb.c	/^static inline void htb_remove_class_from_row(struct htb_sched *q,$/;"	f	file:
htb_reset	sch_htb.c	/^static void htb_reset(struct Qdisc *sch)$/;"	f	file:
htb_safe_rb_erase	sch_htb.c	/^static void htb_safe_rb_erase(struct rb_node *rb, struct rb_root *root)$/;"	f	file:
htb_sched	sch_htb.c	/^struct htb_sched {$/;"	s	file:
htb_unbind_filter	sch_htb.c	/^static void htb_unbind_filter(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
htb_walk	sch_htb.c	/^static void htb_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
htb_work_func	sch_htb.c	/^static void htb_work_func(struct work_struct *work)$/;"	f	file:
httpResponseHead	sch_generic.c	/^int httpResponseHead[] = {$/;"	v
id	cls_fw.c	/^	u32			id;$/;"	m	struct:fw_filter	file:
id	cls_route.c	/^	u32			id;$/;"	m	struct:route4_fastmap	file:
id	cls_route.c	/^	u32			id;$/;"	m	struct:route4_filter	file:
iif	cls_route.c	/^	int			iif;$/;"	m	struct:route4_fastmap	file:
iif	cls_route.c	/^	int			iif;$/;"	m	struct:route4_filter	file:
indev	cls_fw.c	/^	char			indev[IFNAMSIZ];$/;"	m	struct:fw_filter	file:
indev	cls_u32.c	/^	char                     indev[IFNAMSIZ];$/;"	m	struct:tc_u_knode	file:
index	act_police.c	/^	u32			index;$/;"	m	struct:tc_police_compat	file:
index	sch_prio.c	/^    int index;$/;"	m	struct:flowS_priv	file:
indices	sch_dsmark.c	/^	u16			indices;$/;"	m	struct:dsmark_qdisc_data	file:
ingress_bind_filter	sch_ingress.c	/^static unsigned long ingress_bind_filter(struct Qdisc *sch,$/;"	f	file:
ingress_class_ops	sch_ingress.c	/^static const struct Qdisc_class_ops ingress_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
ingress_destroy	sch_ingress.c	/^static void ingress_destroy(struct Qdisc *sch)$/;"	f	file:
ingress_dump	sch_ingress.c	/^static int ingress_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
ingress_enqueue	sch_ingress.c	/^static int ingress_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
ingress_find_tcf	sch_ingress.c	/^static struct tcf_proto **ingress_find_tcf(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
ingress_get	sch_ingress.c	/^static unsigned long ingress_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
ingress_leaf	sch_ingress.c	/^static struct Qdisc *ingress_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
ingress_module_exit	sch_ingress.c	/^static void __exit ingress_module_exit(void)$/;"	f	file:
ingress_module_init	sch_ingress.c	/^static int __init ingress_module_init(void)$/;"	f	file:
ingress_put	sch_ingress.c	/^static void ingress_put(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
ingress_qdisc_data	sch_ingress.c	/^struct ingress_qdisc_data {$/;"	s	file:
ingress_walk	sch_ingress.c	/^static void ingress_walk(struct Qdisc *sch, struct qdisc_walker *walker)$/;"	f	file:
init_basic	cls_basic.c	/^static int __init init_basic(void)$/;"	f	file:
init_cgroup_cls	cls_cgroup.c	/^module_init(init_cgroup_cls);$/;"	v
init_cgroup_cls	cls_cgroup.c	/^static int __init init_cgroup_cls(void)$/;"	f	file:
init_crandom	sch_netem.c	/^static void init_crandom(struct crndstate *state, unsigned long rho)$/;"	f	file:
init_ed	sch_hfsc.c	/^init_ed(struct hfsc_class *cl, unsigned int next_len)$/;"	f	file:
init_em_cmp	em_cmp.c	/^module_init(init_em_cmp);$/;"	v
init_em_cmp	em_cmp.c	/^static int __init init_em_cmp(void)$/;"	f	file:
init_em_meta	em_meta.c	/^module_init(init_em_meta);$/;"	v
init_em_meta	em_meta.c	/^static int __init init_em_meta(void)$/;"	f	file:
init_em_nbyte	em_nbyte.c	/^module_init(init_em_nbyte);$/;"	v
init_em_nbyte	em_nbyte.c	/^static int __init init_em_nbyte(void)$/;"	f	file:
init_em_text	em_text.c	/^module_init(init_em_text);$/;"	v
init_em_text	em_text.c	/^static int __init init_em_text(void)$/;"	f	file:
init_em_u32	em_u32.c	/^module_init(init_em_u32);$/;"	v
init_em_u32	em_u32.c	/^static int __init init_em_u32(void)$/;"	f	file:
init_fw	cls_fw.c	/^static int __init init_fw(void)$/;"	f	file:
init_route4	cls_route.c	/^static int __init init_route4(void)$/;"	f	file:
init_rsvp	cls_rsvp.h	/^static int __init init_rsvp(void)$/;"	f
init_tcindex	cls_tcindex.c	/^static int __init init_tcindex(void)$/;"	f	file:
init_u32	cls_u32.c	/^static int __init init_u32(void)$/;"	f	file:
init_vf	sch_hfsc.c	/^init_vf(struct hfsc_class *cl, unsigned int len)$/;"	f	file:
inner	sch_htb.c	/^		} inner;$/;"	m	union:htb_class::__anon2	typeref:struct:htb_class::__anon2::htb_class_inner	file:
int_dev	em_meta.c	/^static inline int int_dev(struct net_device *dev, struct meta_obj *dst)$/;"	f	file:
internal_sc	sch_hfsc.c	/^struct internal_sc$/;"	s	file:
ipt_cleanup_module	act_ipt.c	/^module_exit(ipt_cleanup_module);$/;"	v
ipt_cleanup_module	act_ipt.c	/^static void __exit ipt_cleanup_module(void)$/;"	f	file:
ipt_destroy_target	act_ipt.c	/^static void ipt_destroy_target(struct ipt_entry_target *t)$/;"	f	file:
ipt_hash_info	act_ipt.c	/^static struct tcf_hashinfo ipt_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
ipt_idx_gen	act_ipt.c	/^static u32 ipt_idx_gen;$/;"	v	file:
ipt_init_module	act_ipt.c	/^module_init(ipt_init_module);$/;"	v
ipt_init_module	act_ipt.c	/^static int __init ipt_init_module(void)$/;"	f	file:
ipt_init_target	act_ipt.c	/^static int ipt_init_target(struct ipt_entry_target *t, char *table, unsigned int hook)$/;"	f	file:
ipt_policy	act_ipt.c	/^static const struct nla_policy ipt_policy[TCA_IPT_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
ism1	sch_hfsc.c	/^	u64	ism1;	\/* scaled inverse-slope of the 1st segment *\/$/;"	m	struct:internal_sc	file:
ism1	sch_hfsc.c	/^	u64	ism1;	\/* scaled inverse-slope of the 1st segment *\/$/;"	m	struct:runtime_sc	file:
ism2	sch_hfsc.c	/^	u64	ism2;	\/* scaled inverse-slope of the 2nd segment *\/$/;"	m	struct:internal_sc	file:
ism2	sch_hfsc.c	/^	u64	ism2;	\/* scaled inverse-slope of the 2nd segment *\/$/;"	m	struct:runtime_sc	file:
jitter	sch_netem.c	/^	psched_tdiff_t jitter;$/;"	m	struct:netem_sched_data	file:
key	cls_tcindex.c	/^	u16 key;$/;"	m	struct:tcindex_filter	file:
keymask	cls_flow.c	/^	u32			keymask;$/;"	m	struct:flow_filter	file:
last	sch_cbq.c	/^	psched_time_t		last;		\/* Last end of service *\/$/;"	m	struct:cbq_class	file:
last	sch_netem.c	/^		u32 last;$/;"	m	struct:netem_sched_data::crndstate	file:
last_ptr_id	sch_htb.c	/^			u32 last_ptr_id[TC_HTB_NUMPRIO];$/;"	m	struct:htb_class::__anon2::htb_class_inner	file:
last_ptr_id	sch_htb.c	/^	u32 last_ptr_id[TC_HTB_MAXDEPTH][TC_HTB_NUMPRIO];$/;"	m	struct:htb_sched	file:
latency	sch_netem.c	/^	psched_tdiff_t latency;$/;"	m	struct:netem_sched_data	file:
leaf	sch_htb.c	/^		} leaf;$/;"	m	union:htb_class::__anon2	typeref:struct:htb_class::__anon2::htb_class_leaf	file:
len	em_meta.c	/^	unsigned int		len;$/;"	m	struct:meta_obj	file:
len	em_meta.c	/^	unsigned int		len;$/;"	m	struct:meta_value	file:
level	sch_cbq.c	/^	unsigned char		level;		\/* level of the class in hierarchy:$/;"	m	struct:cbq_class	file:
level	sch_hfsc.c	/^	unsigned int	level;		\/* class level in hierarchy *\/$/;"	m	struct:hfsc_class	file:
level	sch_htb.c	/^	int level;		\/* our level (see above) *\/$/;"	m	struct:htb_class	file:
limit	act_police.c	/^	u32			limit;$/;"	m	struct:tc_police_compat	file:
limit	sch_esfq.c	/^	int		limit;$/;"	m	struct:esfq_sched_data	file:
limit	sch_fifo.c	/^	u32 limit;$/;"	m	struct:fifo_sched_data	file:
limit	sch_gred.c	/^	u32		limit;		\/* HARD maximal queue length	*\/$/;"	m	struct:gred_sched_data	file:
limit	sch_netem.c	/^	u32 limit;$/;"	m	struct:fifo_sched_data	file:
limit	sch_netem.c	/^	u32 limit;$/;"	m	struct:netem_sched_data	file:
limit	sch_red.c	/^	u32			limit;		\/* HARD maximal queue length *\/$/;"	m	struct:red_sched_data	file:
limit	sch_sfq.c	/^	int		limit;$/;"	m	struct:sfq_sched_data	file:
limit	sch_tbf.c	/^	u32		limit;		\/* Maximal length of backlog: bytes *\/$/;"	m	struct:tbf_sched_data	file:
link	cls_basic.c	/^	struct list_head	link;$/;"	m	struct:basic_filter	typeref:struct:basic_filter::list_head	file:
link	sch_atm.c	/^	struct atm_flow_data	link;		\/* unclassified skbs go here *\/$/;"	m	struct:atm_qdisc_data	typeref:struct:atm_qdisc_data::atm_flow_data	file:
link	sch_cbq.c	/^	struct cbq_class	link;$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::cbq_class	file:
list	cls_flow.c	/^	struct list_head	list;$/;"	m	struct:flow_filter	typeref:struct:flow_filter::list_head	file:
list	sch_atm.c	/^	struct list_head	list;$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::list_head	file:
llc_oui_ip	sch_atm.c	/^static const u8 llc_oui_ip[] = {$/;"	v	file:
lookup_flow	sch_atm.c	/^static inline struct atm_flow_data *lookup_flow(struct Qdisc *sch, u32 classid)$/;"	f	file:
loss	sch_netem.c	/^	u32 loss;$/;"	m	struct:netem_sched_data	file:
loss_cor	sch_netem.c	/^	} delay_cor, loss_cor, dup_cor, reorder_cor, corrupt_cor;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::crndstate	file:
lvalue	em_meta.c	/^	struct meta_value	lvalue;$/;"	m	struct:meta_match	typeref:struct:meta_match::meta_value	file:
m	sch_teql.c	/^	struct teql_master *m;$/;"	m	struct:teql_sched_data	typeref:struct:teql_sched_data::teql_master	file:
m2ism	sch_hfsc.c	/^m2ism(u32 m)$/;"	f	file:
m2sm	sch_hfsc.c	/^m2sm(u32 m)$/;"	f	file:
mark	cls_u32.c	/^	struct tc_u32_mark	mark;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tc_u32_mark	file:
mark	sch_esfq.c	/^	u32	mark;		\/* netfilter mark (fwmark) *\/$/;"	m	struct:esfq_packet_info	file:
mask	cls_flow.c	/^	u32			mask;$/;"	m	struct:flow_filter	file:
mask	cls_fw.c	/^	u32 mask;$/;"	m	struct:fw_head	file:
mask	cls_tcindex.c	/^	u16 mask;		\/* AND key with mask *\/$/;"	m	struct:tcindex_data	file:
mask	sch_dsmark.c	/^	u8			*mask;	\/* "owns" the array *\/$/;"	m	struct:dsmark_qdisc_data	file:
master_list	sch_teql.c	/^	struct list_head master_list;$/;"	m	struct:teql_master	typeref:struct:teql_master::list_head	file:
max_bands	sch_multiq.c	/^	u16 max_bands;$/;"	m	struct:multiq_sched_data	file:
max_depth	sch_esfq.c	/^	esfq_index	max_depth;	\/* Maximal depth *\/$/;"	m	struct:esfq_sched_data	file:
max_depth	sch_sfq.c	/^	sfq_index	max_depth;	\/* Maximal depth *\/$/;"	m	struct:sfq_sched_data	file:
max_equalizers	sch_teql.c	/^static int max_equalizers = 1;$/;"	v	file:
max_size	sch_tbf.c	/^	u32		max_size;$/;"	m	struct:tbf_sched_data	file:
maxidle	sch_cbq.c	/^	long			maxidle;	\/* Class parameters: see below. *\/$/;"	m	struct:cbq_class	file:
mbuffer	sch_htb.c	/^	psched_tdiff_t mbuffer;	\/* max wait time *\/$/;"	m	struct:htb_class	file:
meta_change_data	em_meta.c	/^static inline int meta_change_data(struct meta_value *dst, struct nlattr *nla)$/;"	f	file:
meta_delete	em_meta.c	/^static void meta_delete(struct meta_match *meta)$/;"	f	file:
meta_get	em_meta.c	/^static int meta_get(struct sk_buff *skb, struct tcf_pkt_info *info,$/;"	f	file:
meta_id	em_meta.c	/^static inline int meta_id(struct meta_value *v)$/;"	f	file:
meta_int_apply_extras	em_meta.c	/^static void meta_int_apply_extras(struct meta_value *v,$/;"	f	file:
meta_int_change	em_meta.c	/^static int meta_int_change(struct meta_value *dst, struct nlattr *nla)$/;"	f	file:
meta_int_compare	em_meta.c	/^static int meta_int_compare(struct meta_obj *a, struct meta_obj *b)$/;"	f	file:
meta_int_dump	em_meta.c	/^static int meta_int_dump(struct sk_buff *skb, struct meta_value *v, int tlv)$/;"	f	file:
meta_is_supported	em_meta.c	/^static inline int meta_is_supported(struct meta_value *val)$/;"	f	file:
meta_match	em_meta.c	/^struct meta_match$/;"	s	file:
meta_obj	em_meta.c	/^struct meta_obj$/;"	s	file:
meta_ops	em_meta.c	/^static inline struct meta_ops * meta_ops(struct meta_value *val)$/;"	f	file:
meta_ops	em_meta.c	/^struct meta_ops$/;"	s	file:
meta_policy	em_meta.c	/^static const struct nla_policy meta_policy[TCA_EM_META_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
meta_type	em_meta.c	/^static inline int meta_type(struct meta_value *v)$/;"	f	file:
meta_type_ops	em_meta.c	/^static inline struct meta_type_ops * meta_type_ops(struct meta_value *v)$/;"	f	file:
meta_type_ops	em_meta.c	/^struct meta_type_ops$/;"	s	file:
meta_value	em_meta.c	/^struct meta_value$/;"	s	file:
meta_var_apply_extras	em_meta.c	/^static void meta_var_apply_extras(struct meta_value *v,$/;"	f	file:
meta_var_change	em_meta.c	/^static int meta_var_change(struct meta_value *dst, struct nlattr *nla)$/;"	f	file:
meta_var_compare	em_meta.c	/^static int meta_var_compare(struct meta_obj *a, struct meta_obj *b)$/;"	f	file:
meta_var_destroy	em_meta.c	/^static void meta_var_destroy(struct meta_value *v)$/;"	f	file:
meta_var_dump	em_meta.c	/^static int meta_var_dump(struct sk_buff *skb, struct meta_value *v, int tlv)$/;"	f	file:
minidle	sch_cbq.c	/^	long			minidle;$/;"	m	struct:cbq_class	file:
mirred_cleanup_module	act_mirred.c	/^module_exit(mirred_cleanup_module);$/;"	v
mirred_cleanup_module	act_mirred.c	/^static void __exit mirred_cleanup_module(void)$/;"	f	file:
mirred_device_event	act_mirred.c	/^static int mirred_device_event(struct notifier_block *unused,$/;"	f	file:
mirred_device_notifier	act_mirred.c	/^static struct notifier_block mirred_device_notifier = {$/;"	v	typeref:struct:notifier_block	file:
mirred_hash_info	act_mirred.c	/^static struct tcf_hashinfo mirred_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
mirred_idx_gen	act_mirred.c	/^static u32 mirred_idx_gen;$/;"	v	file:
mirred_init_module	act_mirred.c	/^module_init(mirred_init_module);$/;"	v
mirred_init_module	act_mirred.c	/^static int __init mirred_init_module(void)$/;"	f	file:
mirred_policy	act_mirred.c	/^static const struct nla_policy mirred_policy[TCA_MIRRED_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
mode	cls_flow.c	/^	u32			mode;$/;"	m	struct:flow_filter	file:
mq_attach	sch_mq.c	/^static void mq_attach(struct Qdisc *sch)$/;"	f	file:
mq_class_ops	sch_mq.c	/^static const struct Qdisc_class_ops mq_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
mq_destroy	sch_mq.c	/^static void mq_destroy(struct Qdisc *sch)$/;"	f	file:
mq_dump	sch_mq.c	/^static int mq_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
mq_dump_class	sch_mq.c	/^static int mq_dump_class(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
mq_dump_class_stats	sch_mq.c	/^static int mq_dump_class_stats(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
mq_get	sch_mq.c	/^static unsigned long mq_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
mq_graft	sch_mq.c	/^static int mq_graft(struct Qdisc *sch, unsigned long cl, struct Qdisc *new,$/;"	f	file:
mq_init	sch_mq.c	/^static int mq_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
mq_leaf	sch_mq.c	/^static struct Qdisc *mq_leaf(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
mq_put	sch_mq.c	/^static void mq_put(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
mq_queue_get	sch_mq.c	/^static struct netdev_queue *mq_queue_get(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
mq_sched	sch_mq.c	/^struct mq_sched {$/;"	s	file:
mq_select_queue	sch_mq.c	/^static struct netdev_queue *mq_select_queue(struct Qdisc *sch,$/;"	f	file:
mq_walk	sch_mq.c	/^static void mq_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
mtu	act_police.c	/^	u32			mtu;$/;"	m	struct:tc_police_compat	file:
mtu	sch_tbf.c	/^	u32		mtu;$/;"	m	struct:tbf_sched_data	file:
multiq_bind	sch_multiq.c	/^static unsigned long multiq_bind(struct Qdisc *sch, unsigned long parent,$/;"	f	file:
multiq_class_ops	sch_multiq.c	/^static const struct Qdisc_class_ops multiq_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
multiq_classify	sch_multiq.c	/^multiq_classify(struct sk_buff *skb, struct Qdisc *sch, int *qerr)$/;"	f	file:
multiq_dequeue	sch_multiq.c	/^static struct sk_buff *multiq_dequeue(struct Qdisc *sch)$/;"	f	file:
multiq_destroy	sch_multiq.c	/^multiq_destroy(struct Qdisc *sch)$/;"	f	file:
multiq_drop	sch_multiq.c	/^static unsigned int multiq_drop(struct Qdisc *sch)$/;"	f	file:
multiq_dump	sch_multiq.c	/^static int multiq_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
multiq_dump_class	sch_multiq.c	/^static int multiq_dump_class(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
multiq_dump_class_stats	sch_multiq.c	/^static int multiq_dump_class_stats(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
multiq_enqueue	sch_multiq.c	/^multiq_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
multiq_find_tcf	sch_multiq.c	/^static struct tcf_proto **multiq_find_tcf(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
multiq_get	sch_multiq.c	/^static unsigned long multiq_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
multiq_graft	sch_multiq.c	/^static int multiq_graft(struct Qdisc *sch, unsigned long arg, struct Qdisc *new,$/;"	f	file:
multiq_init	sch_multiq.c	/^static int multiq_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
multiq_leaf	sch_multiq.c	/^multiq_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
multiq_module_exit	sch_multiq.c	/^static void __exit multiq_module_exit(void)$/;"	f	file:
multiq_module_init	sch_multiq.c	/^static int __init multiq_module_init(void)$/;"	f	file:
multiq_peek	sch_multiq.c	/^static struct sk_buff *multiq_peek(struct Qdisc *sch)$/;"	f	file:
multiq_put	sch_multiq.c	/^static void multiq_put(struct Qdisc *q, unsigned long cl)$/;"	f	file:
multiq_reset	sch_multiq.c	/^multiq_reset(struct Qdisc *sch)$/;"	f	file:
multiq_sched_data	sch_multiq.c	/^struct multiq_sched_data {$/;"	s	file:
multiq_tune	sch_multiq.c	/^static int multiq_tune(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
multiq_walk	sch_multiq.c	/^static void multiq_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
nat_cleanup_module	act_nat.c	/^module_exit(nat_cleanup_module);$/;"	v
nat_cleanup_module	act_nat.c	/^static void __exit nat_cleanup_module(void)$/;"	f	file:
nat_hash_info	act_nat.c	/^static struct tcf_hashinfo nat_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
nat_idx_gen	act_nat.c	/^static u32 nat_idx_gen;$/;"	v	file:
nat_init_module	act_nat.c	/^module_init(nat_init_module);$/;"	v
nat_init_module	act_nat.c	/^static int __init nat_init_module(void)$/;"	f	file:
nat_policy	act_nat.c	/^static const struct nla_policy nat_policy[TCA_NAT_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
nbyte_data	em_nbyte.c	/^struct nbyte_data$/;"	s	file:
ncache	sch_teql.c	/^	struct neighbour *ncache;$/;"	m	struct:teql_sched_data	typeref:struct:teql_sched_data::neighbour	file:
nclasses	sch_cbq.c	/^	int			nclasses[TC_CBQ_MAXPRIO+1];$/;"	m	struct:cbq_sched_data	file:
near_ev_cache	sch_htb.c	/^	psched_time_t near_ev_cache[TC_HTB_MAXDEPTH];$/;"	m	struct:htb_sched	file:
net_cls_subsys	cls_cgroup.c	/^struct cgroup_subsys net_cls_subsys = {$/;"	v	typeref:struct:cgroup_subsys
netem_change	sch_netem.c	/^static int netem_change(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
netem_dequeue	sch_netem.c	/^static struct sk_buff *netem_dequeue(struct Qdisc *sch)$/;"	f	file:
netem_destroy	sch_netem.c	/^static void netem_destroy(struct Qdisc *sch)$/;"	f	file:
netem_drop	sch_netem.c	/^static unsigned int netem_drop(struct Qdisc* sch)$/;"	f	file:
netem_dump	sch_netem.c	/^static int netem_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
netem_enqueue	sch_netem.c	/^static int netem_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
netem_init	sch_netem.c	/^static int netem_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
netem_module_exit	sch_netem.c	/^static void __exit netem_module_exit(void)$/;"	f	file:
netem_module_init	sch_netem.c	/^static int __init netem_module_init(void)$/;"	f	file:
netem_policy	sch_netem.c	/^static const struct nla_policy netem_policy[TCA_NETEM_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
netem_reset	sch_netem.c	/^static void netem_reset(struct Qdisc *sch)$/;"	f	file:
netem_sched_data	sch_netem.c	/^struct netem_sched_data {$/;"	s	file:
netem_skb_cb	sch_netem.c	/^static inline struct netem_skb_cb *netem_skb_cb(struct sk_buff *skb)$/;"	f	file:
netem_skb_cb	sch_netem.c	/^struct netem_skb_cb {$/;"	s	file:
netif_carrier_off	sch_generic.c	/^EXPORT_SYMBOL(netif_carrier_off);$/;"	v
netif_carrier_off	sch_generic.c	/^void netif_carrier_off(struct net_device *dev)$/;"	f
netif_carrier_on	sch_generic.c	/^EXPORT_SYMBOL(netif_carrier_on);$/;"	v
netif_carrier_on	sch_generic.c	/^void netif_carrier_on(struct net_device *dev)$/;"	f
netif_notify_peers	sch_generic.c	/^EXPORT_SYMBOL(netif_notify_peers);$/;"	v
netif_notify_peers	sch_generic.c	/^void netif_notify_peers(struct net_device *dev)$/;"	f
next	cls_fw.c	/^	struct fw_filter	*next;$/;"	m	struct:fw_filter	typeref:struct:fw_filter::fw_filter	file:
next	cls_route.c	/^	struct route4_filter	*next;$/;"	m	struct:route4_filter	typeref:struct:route4_filter::route4_filter	file:
next	cls_rsvp.h	/^	struct rsvp_filter	*next;$/;"	m	struct:rsvp_filter	typeref:struct:rsvp_filter::rsvp_filter
next	cls_rsvp.h	/^	struct rsvp_session	*next;$/;"	m	struct:rsvp_session	typeref:struct:rsvp_session::rsvp_session
next	cls_tcindex.c	/^	struct tcindex_filter *next;$/;"	m	struct:tcindex_filter	typeref:struct:tcindex_filter::tcindex_filter	file:
next	cls_u32.c	/^	struct tc_u_hnode	*next;$/;"	m	struct:tc_u_hnode	typeref:struct:tc_u_hnode::tc_u_hnode	file:
next	cls_u32.c	/^	struct tc_u_knode	*next;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tc_u_knode	file:
next	sch_esfq.c	/^	esfq_index	*next;			\/* Active slots link *\/$/;"	m	struct:esfq_sched_data	file:
next	sch_esfq.c	/^	esfq_index	next;$/;"	m	struct:esfq_head	file:
next	sch_sfq.c	/^	sfq_index	next;$/;"	m	struct:sfq_head	file:
next	sch_sfq.c	/^	sfq_index	next[SFQ_DEPTH];	\/* Active slots link *\/$/;"	m	struct:sfq_sched_data	file:
next	sch_teql.c	/^	struct Qdisc *next;$/;"	m	struct:teql_sched_data	typeref:struct:teql_sched_data::Qdisc	file:
next_alive	sch_cbq.c	/^	struct cbq_class	*next_alive;	\/* next class with backlog in this priority band *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
nkeys	cls_flow.c	/^	u32			nkeys;$/;"	m	struct:flow_filter	file:
node	sch_htb.c	/^	struct rb_node node[TC_HTB_NUMPRIO];	\/* node for self or feed tree *\/$/;"	m	struct:htb_class	typeref:struct:htb_class::rb_node	file:
node	sch_prio.c	/^    struct netFlowStatus *node;$/;"	m	struct:flowS_priv	typeref:struct:flowS_priv::netFlowStatus	file:
noop_dequeue	sch_generic.c	/^static struct sk_buff *noop_dequeue(struct Qdisc * qdisc)$/;"	f	file:
noop_enqueue	sch_generic.c	/^static int noop_enqueue(struct sk_buff *skb, struct Qdisc * qdisc)$/;"	f	file:
noop_netdev_queue	sch_generic.c	/^static struct netdev_queue noop_netdev_queue = {$/;"	v	typeref:struct:netdev_queue	file:
noop_qdisc	sch_generic.c	/^EXPORT_SYMBOL(noop_qdisc);$/;"	v
noop_qdisc	sch_generic.c	/^struct Qdisc noop_qdisc = {$/;"	v	typeref:struct:Qdisc
noqueue_netdev_queue	sch_generic.c	/^static struct netdev_queue noqueue_netdev_queue = {$/;"	v	typeref:struct:netdev_queue	file:
noqueue_qdisc	sch_generic.c	/^static struct Qdisc noqueue_qdisc = {$/;"	v	typeref:struct:Qdisc	file:
noqueue_qdisc	sch_generic.c	/^static struct Qdisc noqueue_qdisc;$/;"	v	typeref:struct:Qdisc	file:
notify_and_destroy	sch_api.c	/^static void notify_and_destroy(struct net *net, struct sk_buff *skb,$/;"	f	file:
now	sch_cbq.c	/^	psched_time_t		now;		\/* Cached timestamp *\/$/;"	m	struct:cbq_sched_data	file:
now	sch_htb.c	/^	psched_time_t now;	\/* cached dequeue time *\/$/;"	m	struct:htb_sched	file:
now_rt	sch_cbq.c	/^	psched_time_t		now_rt;		\/* Cached real time *\/$/;"	m	struct:cbq_sched_data	file:
obj-y	Makefile	/^obj-y	:= sch_generic.o sch_mq.o utt_qos_misc.o$/;"	m
offtime	sch_cbq.c	/^	long			offtime;$/;"	m	struct:cbq_class	file:
old_pop	sch_atm.c	/^	void			(*old_pop)(struct atm_vcc *vcc,$/;"	m	struct:atm_flow_data	file:
oldest	sch_netem.c	/^	psched_time_t oldest;$/;"	m	struct:fifo_sched_data	file:
onlinecount_read	sch_prio.c	/^int onlinecount_read( char *page, char **start, off_t off,$/;"	f
overlimit	sch_cbq.c	/^	void			(*overlimit)(struct cbq_class *cl);$/;"	m	struct:cbq_class	file:
ovl_strategy	sch_cbq.c	/^	unsigned char		ovl_strategy;$/;"	m	struct:cbq_class	file:
p	sch_api.c	/^	struct Qdisc		*p;$/;"	m	struct:check_loop_arg	typeref:struct:check_loop_arg::Qdisc	file:
packetsin	sch_gred.c	/^	u32		packetsin;	\/* packets seen on virtualQ so far*\/$/;"	m	struct:gred_sched_data	file:
parent	sch_atm.c	/^	struct atm_qdisc_data	*parent;	\/* parent qdisc *\/$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::atm_qdisc_data	file:
parent	sch_htb.c	/^	struct htb_class *parent;	\/* parent class *\/$/;"	m	struct:htb_class	typeref:struct:htb_class::htb_class	file:
parms	sch_gred.c	/^	struct red_parms parms;$/;"	m	struct:gred_sched_data	typeref:struct:gred_sched_data::red_parms	file:
parms	sch_red.c	/^	struct red_parms	parms;$/;"	m	struct:red_sched_data	typeref:struct:red_sched_data::red_parms	file:
parse_attr	sch_netem.c	/^static int parse_attr(struct nlattr *tb[], int maxtype, struct nlattr *nla,$/;"	f	file:
pattern	em_nbyte.c	/^	char			pattern[0];$/;"	m	struct:nbyte_data	file:
peakrate	act_police.c	/^	struct tc_ratespec	peakrate;$/;"	m	struct:tc_police_compat	typeref:struct:tc_police_compat::tc_ratespec	file:
pedit_cleanup_module	act_pedit.c	/^module_exit(pedit_cleanup_module);$/;"	v
pedit_cleanup_module	act_pedit.c	/^static void __exit pedit_cleanup_module(void)$/;"	f	file:
pedit_hash_info	act_pedit.c	/^static struct tcf_hashinfo pedit_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
pedit_idx_gen	act_pedit.c	/^static u32 pedit_idx_gen;$/;"	v	file:
pedit_init_module	act_pedit.c	/^module_init(pedit_init_module);$/;"	v
pedit_init_module	act_pedit.c	/^static int __init pedit_init_module(void)$/;"	f	file:
pedit_policy	act_pedit.c	/^static const struct nla_policy pedit_policy[TCA_PEDIT_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
penalized	sch_cbq.c	/^	psched_time_t		penalized;$/;"	m	struct:cbq_class	file:
penalty	sch_cbq.c	/^	psched_tdiff_t		penalty;$/;"	m	struct:cbq_class	file:
perfect	cls_tcindex.c	/^	struct tcindex_filter_result *perfect; \/* perfect hash; NULL if none *\/$/;"	m	struct:tcindex_data	typeref:struct:tcindex_data::tcindex_filter_result	file:
perturb_period	cls_flow.c	/^	u32			perturb_period;$/;"	m	struct:flow_filter	file:
perturb_period	sch_esfq.c	/^	int		perturb_period;$/;"	m	struct:esfq_sched_data	file:
perturb_period	sch_sfq.c	/^	int		perturb_period;$/;"	m	struct:sfq_sched_data	file:
perturb_timer	cls_flow.c	/^	struct timer_list	perturb_timer;$/;"	m	struct:flow_filter	typeref:struct:flow_filter::timer_list	file:
perturb_timer	sch_esfq.c	/^	struct timer_list perturb_timer;$/;"	m	struct:esfq_sched_data	typeref:struct:esfq_sched_data::timer_list	file:
perturb_timer	sch_sfq.c	/^	struct timer_list perturb_timer;$/;"	m	struct:sfq_sched_data	typeref:struct:sfq_sched_data::timer_list	file:
perturbation	sch_esfq.c	/^	int		perturbation;$/;"	m	struct:esfq_sched_data	file:
perturbation	sch_sfq.c	/^	u32		perturbation;$/;"	m	struct:sfq_sched_data	file:
pf	cls_u32.c	/^	struct tc_u32_pcnt	*pf;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tc_u32_pcnt	file:
pfifo_enqueue	sch_fifo.c	/^static int pfifo_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
pfifo_fast_dequeue	sch_generic.c	/^static struct sk_buff *pfifo_fast_dequeue(struct Qdisc* qdisc)$/;"	f	file:
pfifo_fast_dump	sch_generic.c	/^static int pfifo_fast_dump(struct Qdisc *qdisc, struct sk_buff *skb)$/;"	f	file:
pfifo_fast_enqueue	sch_generic.c	/^static int pfifo_fast_enqueue(struct sk_buff *skb, struct Qdisc* qdisc)$/;"	f	file:
pfifo_fast_init	sch_generic.c	/^static int pfifo_fast_init(struct Qdisc *qdisc, struct nlattr *opt)$/;"	f	file:
pfifo_fast_peek	sch_generic.c	/^static struct sk_buff *pfifo_fast_peek(struct Qdisc* qdisc)$/;"	f	file:
pfifo_fast_priv	sch_generic.c	/^struct pfifo_fast_priv {$/;"	s	file:
pfifo_fast_reset	sch_generic.c	/^static void pfifo_fast_reset(struct Qdisc* qdisc)$/;"	f	file:
pfifo_qdisc_ops	sch_fifo.c	/^EXPORT_SYMBOL(pfifo_qdisc_ops);$/;"	v
pfifo_tail_enqueue	sch_fifo.c	/^static int pfifo_tail_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
pktsched_init	sch_api.c	/^static int __init pktsched_init(void)$/;"	f	file:
pktsched_init	sch_api.c	/^subsys_initcall(pktsched_init);$/;"	v
pmask	sch_cbq.c	/^	unsigned		pmask;$/;"	m	struct:cbq_sched_data	file:
police	sch_cbq.c	/^	unsigned char		police;$/;"	m	struct:cbq_class	file:
police_cleanup_module	act_police.c	/^module_exit(police_cleanup_module);$/;"	v
police_cleanup_module	act_police.c	/^police_cleanup_module(void)$/;"	f	file:
police_hash_info	act_police.c	/^static struct tcf_hashinfo police_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
police_idx_gen	act_police.c	/^static u32 police_idx_gen;$/;"	v	file:
police_init_module	act_police.c	/^module_init(police_init_module);$/;"	v
police_init_module	act_police.c	/^police_init_module(void)$/;"	f	file:
police_policy	act_police.c	/^static const struct nla_policy police_policy[TCA_POLICE_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
pq_key	sch_htb.c	/^	psched_time_t pq_key;$/;"	m	struct:htb_class	file:
pq_node	sch_htb.c	/^	struct rb_node pq_node;	\/* node for event queue *\/$/;"	m	struct:htb_class	typeref:struct:htb_class::rb_node	file:
prev	sch_esfq.c	/^	esfq_index	prev;$/;"	m	struct:esfq_head	file:
prev	sch_sfq.c	/^	sfq_index	prev;$/;"	m	struct:sfq_head	file:
prio	cls_u32.c	/^	u32			prio;$/;"	m	struct:tc_u_hnode	file:
prio	sch_gred.c	/^	u8		prio;		\/* the prio of this vq *\/$/;"	m	struct:gred_sched_data	file:
prio	sch_htb.c	/^	int prio;		\/* these two are used only by leaves... *\/$/;"	m	struct:htb_class	file:
prio2band	sch_generic.c	/^static const u8 prio2band[TC_PRIO_MAX+1] =$/;"	v	file:
prio2band	sch_prio.c	/^	u8  prio2band[TC_PRIO_MAX+1];$/;"	m	struct:prio_sched_data	file:
prio_activity	sch_htb.c	/^	int prio_activity;	\/* for which prios are we active *\/$/;"	m	struct:htb_class	file:
prio_bind	sch_prio.c	/^static unsigned long prio_bind(struct Qdisc *sch, unsigned long parent, u32 classid)$/;"	f	file:
prio_class_ops	sch_prio.c	/^static const struct Qdisc_class_ops prio_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
prio_classify	sch_prio.c	/^prio_classify(struct sk_buff *skb, struct Qdisc *sch, int *qerr)$/;"	f	file:
prio_dequeue	sch_prio.c	/^static struct sk_buff *prio_dequeue(struct Qdisc* sch)$/;"	f	file:
prio_destroy	sch_prio.c	/^prio_destroy(struct Qdisc* sch)$/;"	f	file:
prio_drop	sch_prio.c	/^static unsigned int prio_drop(struct Qdisc* sch)$/;"	f	file:
prio_dump	sch_prio.c	/^static int prio_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
prio_dump_class	sch_prio.c	/^static int prio_dump_class(struct Qdisc *sch, unsigned long cl, struct sk_buff *skb,$/;"	f	file:
prio_dump_class_stats	sch_prio.c	/^static int prio_dump_class_stats(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
prio_enqueue	sch_prio.c	/^prio_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
prio_find_tcf	sch_prio.c	/^static struct tcf_proto ** prio_find_tcf(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
prio_get	sch_prio.c	/^static unsigned long prio_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
prio_graft	sch_prio.c	/^static int prio_graft(struct Qdisc *sch, unsigned long arg, struct Qdisc *new,$/;"	f	file:
prio_init	sch_prio.c	/^static int prio_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
prio_leaf	sch_prio.c	/^prio_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
prio_module_exit	sch_prio.c	/^static void __exit prio_module_exit(void)$/;"	f	file:
prio_module_init	sch_prio.c	/^static int __init prio_module_init(void)$/;"	f	file:
prio_peek	sch_prio.c	/^static struct sk_buff *prio_peek(struct Qdisc *sch)$/;"	f	file:
prio_put	sch_prio.c	/^static void prio_put(struct Qdisc *q, unsigned long cl)$/;"	f	file:
prio_reset	sch_prio.c	/^prio_reset(struct Qdisc* sch)$/;"	f	file:
prio_sched_data	sch_prio.c	/^struct prio_sched_data$/;"	s	file:
prio_tune	sch_prio.c	/^static int prio_tune(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
prio_walk	sch_prio.c	/^static void prio_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
priority	sch_cbq.c	/^	unsigned char		priority;	\/* class priority *\/$/;"	m	struct:cbq_class	file:
priority2	sch_cbq.c	/^	unsigned char		priority2;	\/* priority to be used after overlimit *\/$/;"	m	struct:cbq_class	file:
proto	sch_esfq.c	/^	u32	proto;		\/* protocol or port *\/$/;"	m	struct:esfq_packet_info	file:
proto_hdr_http	sch_prio.c	/^int proto_hdr_http[] = {$/;"	v
protocol	cls_rsvp.h	/^	u8			protocol;$/;"	m	struct:rsvp_session
psched_fops	sch_api.c	/^static const struct file_operations psched_fops = {$/;"	v	typeref:struct:file_operations	file:
psched_net_exit	sch_api.c	/^static void __net_exit psched_net_exit(struct net *net)$/;"	f	file:
psched_net_init	sch_api.c	/^static int __net_init psched_net_init(struct net *net)$/;"	f	file:
psched_net_ops	sch_api.c	/^static struct pernet_operations psched_net_ops = {$/;"	v	typeref:struct:pernet_operations	file:
psched_open	sch_api.c	/^static int psched_open(struct inode *inode, struct file *file)$/;"	f	file:
psched_show	sch_api.c	/^static int psched_show(struct seq_file *seq, void *v)$/;"	f	file:
ptokens	sch_tbf.c	/^	long	ptokens;		\/* Current number of P tokens *\/$/;"	m	struct:tbf_sched_data	file:
ptr	sch_htb.c	/^			struct rb_node *ptr[TC_HTB_NUMPRIO];	\/* current class ptr *\/$/;"	m	struct:htb_class::__anon2::htb_class_inner	typeref:struct:htb_class::__anon2::htb_class_inner::rb_node	file:
ptr	sch_htb.c	/^	struct rb_node *ptr[TC_HTB_MAXDEPTH][TC_HTB_NUMPRIO];$/;"	m	struct:htb_sched	typeref:struct:htb_sched::rb_node	file:
q	cls_u32.c	/^	struct Qdisc		*q;$/;"	m	struct:tc_u_common	typeref:struct:tc_u_common::Qdisc	file:
q	sch_atm.c	/^	struct Qdisc		*q;	\/* FIFO, TBF, etc. *\/$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::Qdisc	file:
q	sch_cbq.c	/^	struct Qdisc		*q;		\/* Elementary queueing discipline *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::Qdisc	file:
q	sch_dsmark.c	/^	struct Qdisc		*q;$/;"	m	struct:dsmark_qdisc_data	typeref:struct:dsmark_qdisc_data::Qdisc	file:
q	sch_generic.c	/^	struct sk_buff_head q[PFIFO_FAST_BANDS];$/;"	m	struct:pfifo_fast_priv	typeref:struct:pfifo_fast_priv::sk_buff_head	file:
q	sch_htb.c	/^			struct Qdisc *q;$/;"	m	struct:htb_class::__anon2::htb_class_leaf	typeref:struct:htb_class::__anon2::htb_class_leaf::Qdisc	file:
q	sch_teql.c	/^	struct sk_buff_head q;$/;"	m	struct:teql_sched_data	typeref:struct:teql_sched_data::sk_buff_head	file:
qdisc	sch_cbq.c	/^	struct Qdisc		*qdisc;		\/* Ptr to CBQ discipline *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::Qdisc	file:
qdisc	sch_drr.c	/^	struct Qdisc			*qdisc;$/;"	m	struct:drr_class	typeref:struct:drr_class::Qdisc	file:
qdisc	sch_hfsc.c	/^	struct Qdisc	*qdisc;		\/* leaf qdisc *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::Qdisc	file:
qdisc	sch_netem.c	/^	struct Qdisc	*qdisc;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::Qdisc	file:
qdisc	sch_red.c	/^	struct Qdisc		*qdisc;$/;"	m	struct:red_sched_data	typeref:struct:red_sched_data::Qdisc	file:
qdisc	sch_tbf.c	/^	struct Qdisc	*qdisc;		\/* Inner qdisc, default - bfifo queue *\/$/;"	m	struct:tbf_sched_data	typeref:struct:tbf_sched_data::Qdisc	file:
qdisc_alloc	sch_generic.c	/^struct Qdisc *qdisc_alloc(struct netdev_queue *dev_queue,$/;"	f
qdisc_alloc_handle	sch_api.c	/^static u32 qdisc_alloc_handle(struct net_device *dev)$/;"	f	file:
qdisc_base	sch_api.c	/^static struct Qdisc_ops *qdisc_base;$/;"	v	typeref:struct:Qdisc_ops	file:
qdisc_calculate_pkt_len	sch_api.c	/^EXPORT_SYMBOL(qdisc_calculate_pkt_len);$/;"	v
qdisc_calculate_pkt_len	sch_api.c	/^void qdisc_calculate_pkt_len(struct sk_buff *skb, struct qdisc_size_table *stab)$/;"	f
qdisc_change	sch_api.c	/^static int qdisc_change(struct Qdisc *sch, struct nlattr **tca)$/;"	f	file:
qdisc_class_dump	sch_api.c	/^static int qdisc_class_dump(struct Qdisc *q, unsigned long cl, struct qdisc_walker *arg)$/;"	f	file:
qdisc_class_hash_alloc	sch_api.c	/^static struct hlist_head *qdisc_class_hash_alloc(unsigned int n)$/;"	f	file:
qdisc_class_hash_destroy	sch_api.c	/^EXPORT_SYMBOL(qdisc_class_hash_destroy);$/;"	v
qdisc_class_hash_destroy	sch_api.c	/^void qdisc_class_hash_destroy(struct Qdisc_class_hash *clhash)$/;"	f
qdisc_class_hash_free	sch_api.c	/^static void qdisc_class_hash_free(struct hlist_head *h, unsigned int n)$/;"	f	file:
qdisc_class_hash_grow	sch_api.c	/^EXPORT_SYMBOL(qdisc_class_hash_grow);$/;"	v
qdisc_class_hash_grow	sch_api.c	/^void qdisc_class_hash_grow(struct Qdisc *sch, struct Qdisc_class_hash *clhash)$/;"	f
qdisc_class_hash_init	sch_api.c	/^EXPORT_SYMBOL(qdisc_class_hash_init);$/;"	v
qdisc_class_hash_init	sch_api.c	/^int qdisc_class_hash_init(struct Qdisc_class_hash *clhash)$/;"	f
qdisc_class_hash_insert	sch_api.c	/^EXPORT_SYMBOL(qdisc_class_hash_insert);$/;"	v
qdisc_class_hash_insert	sch_api.c	/^void qdisc_class_hash_insert(struct Qdisc_class_hash *clhash,$/;"	f
qdisc_class_hash_remove	sch_api.c	/^EXPORT_SYMBOL(qdisc_class_hash_remove);$/;"	v
qdisc_class_hash_remove	sch_api.c	/^void qdisc_class_hash_remove(struct Qdisc_class_hash *clhash,$/;"	f
qdisc_create	sch_api.c	/^qdisc_create(struct net_device *dev, struct netdev_queue *dev_queue,$/;"	f	file:
qdisc_create_dflt	sch_generic.c	/^EXPORT_SYMBOL(qdisc_create_dflt);$/;"	v
qdisc_create_dflt	sch_generic.c	/^struct Qdisc * qdisc_create_dflt(struct net_device *dev,$/;"	f
qdisc_destroy	sch_generic.c	/^EXPORT_SYMBOL(qdisc_destroy);$/;"	v
qdisc_destroy	sch_generic.c	/^void qdisc_destroy(struct Qdisc *qdisc)$/;"	f
qdisc_dump_args	sch_api.c	/^struct qdisc_dump_args$/;"	s	file:
qdisc_dump_stab	sch_api.c	/^static int qdisc_dump_stab(struct sk_buff *skb, struct qdisc_size_table *stab)$/;"	f	file:
qdisc_get_rtab	sch_api.c	/^EXPORT_SYMBOL(qdisc_get_rtab);$/;"	v
qdisc_get_rtab	sch_api.c	/^struct qdisc_rate_table *qdisc_get_rtab(struct tc_ratespec *r, struct nlattr *tab)$/;"	f
qdisc_get_stab	sch_api.c	/^static struct qdisc_size_table *qdisc_get_stab(struct nlattr *opt)$/;"	f	file:
qdisc_graft	sch_api.c	/^static int qdisc_graft(struct net_device *dev, struct Qdisc *parent,$/;"	f	file:
qdisc_leaf	sch_api.c	/^static struct Qdisc *qdisc_leaf(struct Qdisc *p, u32 classid)$/;"	f	file:
qdisc_list_add	sch_api.c	/^static void qdisc_list_add(struct Qdisc *q)$/;"	f	file:
qdisc_list_del	sch_api.c	/^EXPORT_SYMBOL(qdisc_list_del);$/;"	v
qdisc_list_del	sch_api.c	/^void qdisc_list_del(struct Qdisc *q)$/;"	f
qdisc_lookup	sch_api.c	/^struct Qdisc *qdisc_lookup(struct net_device *dev, u32 handle)$/;"	f
qdisc_lookup_ops	sch_api.c	/^static struct Qdisc_ops *qdisc_lookup_ops(struct nlattr *kind)$/;"	f	file:
qdisc_match_from_root	sch_api.c	/^static struct Qdisc *qdisc_match_from_root(struct Qdisc *root, u32 handle)$/;"	f	file:
qdisc_notify	sch_api.c	/^static int qdisc_notify(struct net *net, struct sk_buff *oskb,$/;"	f	file:
qdisc_peek_len	sch_hfsc.c	/^qdisc_peek_len(struct Qdisc *sch)$/;"	f	file:
qdisc_put_rtab	sch_api.c	/^EXPORT_SYMBOL(qdisc_put_rtab);$/;"	v
qdisc_put_rtab	sch_api.c	/^void qdisc_put_rtab(struct qdisc_rate_table *tab)$/;"	f
qdisc_put_stab	sch_api.c	/^EXPORT_SYMBOL(qdisc_put_stab);$/;"	v
qdisc_put_stab	sch_api.c	/^void qdisc_put_stab(struct qdisc_size_table *tab)$/;"	f
qdisc_rcu_free	sch_generic.c	/^static void qdisc_rcu_free(struct rcu_head *head)$/;"	f	file:
qdisc_reset	sch_generic.c	/^EXPORT_SYMBOL(qdisc_reset);$/;"	v
qdisc_reset	sch_generic.c	/^void qdisc_reset(struct Qdisc *qdisc)$/;"	f
qdisc_restart	sch_generic.c	/^static inline int qdisc_restart(struct Qdisc *q)$/;"	f	file:
qdisc_rtab_list	sch_api.c	/^static struct qdisc_rate_table *qdisc_rtab_list;$/;"	v	typeref:struct:qdisc_rate_table	file:
qdisc_rx_lock	sch_api.c	/^static struct lock_class_key qdisc_rx_lock;$/;"	v	typeref:struct:lock_class_key	file:
qdisc_tree_decrease_qlen	sch_api.c	/^EXPORT_SYMBOL(qdisc_tree_decrease_qlen);$/;"	v
qdisc_tree_decrease_qlen	sch_api.c	/^void qdisc_tree_decrease_qlen(struct Qdisc *sch, unsigned int n)$/;"	f
qdisc_tx_lock	sch_api.c	/^static struct lock_class_key qdisc_tx_lock;$/;"	v	typeref:struct:lock_class_key	file:
qdisc_warn_nonwc	sch_api.c	/^EXPORT_SYMBOL(qdisc_warn_nonwc);$/;"	v
qdisc_warn_nonwc	sch_api.c	/^void qdisc_warn_nonwc(char *txt, struct Qdisc *qdisc)$/;"	f
qdisc_watchdog	sch_api.c	/^static enum hrtimer_restart qdisc_watchdog(struct hrtimer *timer)$/;"	f	file:
qdisc_watchdog_cancel	sch_api.c	/^EXPORT_SYMBOL(qdisc_watchdog_cancel);$/;"	v
qdisc_watchdog_cancel	sch_api.c	/^void qdisc_watchdog_cancel(struct qdisc_watchdog *wd)$/;"	f
qdisc_watchdog_init	sch_api.c	/^EXPORT_SYMBOL(qdisc_watchdog_init);$/;"	v
qdisc_watchdog_init	sch_api.c	/^void qdisc_watchdog_init(struct qdisc_watchdog *wd, struct Qdisc *qdisc)$/;"	f
qdisc_watchdog_schedule	sch_api.c	/^EXPORT_SYMBOL(qdisc_watchdog_schedule);$/;"	v
qdisc_watchdog_schedule	sch_api.c	/^void qdisc_watchdog_schedule(struct qdisc_watchdog *wd, psched_time_t expires)$/;"	f
qdiscs	sch_mq.c	/^	struct Qdisc		**qdiscs;$/;"	m	struct:mq_sched	typeref:struct:mq_sched::Qdisc	file:
qops	sch_teql.c	/^	struct Qdisc_ops qops;$/;"	m	struct:teql_master	typeref:struct:teql_master::Qdisc_ops	file:
qs	sch_esfq.c	/^	struct sk_buff_head	*qs;		\/* Slot queue *\/$/;"	m	struct:esfq_sched_data	typeref:struct:esfq_sched_data::sk_buff_head	file:
qs	sch_sfq.c	/^	struct sk_buff_head	qs[SFQ_DEPTH];		\/* Slot queue *\/$/;"	m	struct:sfq_sched_data	typeref:struct:sfq_sched_data::sk_buff_head	file:
qstats	sch_atm.c	/^	struct gnet_stats_queue	qstats;$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::gnet_stats_queue	file:
qstats	sch_cbq.c	/^	struct gnet_stats_queue qstats;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::gnet_stats_queue	file:
qstats	sch_drr.c	/^	struct gnet_stats_queue		qstats;$/;"	m	struct:drr_class	typeref:struct:drr_class::gnet_stats_queue	file:
qstats	sch_hfsc.c	/^	struct gnet_stats_queue qstats;$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::gnet_stats_queue	file:
qstats	sch_htb.c	/^	struct gnet_stats_queue qstats;$/;"	m	struct:htb_class	typeref:struct:htb_class::gnet_stats_queue	file:
quanta	sch_cbq.c	/^	unsigned		quanta[TC_CBQ_MAXPRIO+1];$/;"	m	struct:cbq_sched_data	file:
quantum	sch_cbq.c	/^	long			quantum;	\/* Allotment per WRR round *\/$/;"	m	struct:cbq_class	file:
quantum	sch_drr.c	/^	u32				quantum;$/;"	m	struct:drr_class	file:
quantum	sch_esfq.c	/^	unsigned	quantum;	\/* Allotment per round: MUST BE >= MTU *\/$/;"	m	struct:esfq_sched_data	file:
quantum	sch_htb.c	/^	int quantum;		\/* but stored for parent-to-leaf return *\/$/;"	m	struct:htb_class	file:
quantum	sch_sfq.c	/^	unsigned	quantum;	\/* Allotment per round: MUST BE >= MTU *\/$/;"	m	struct:sfq_sched_data	file:
queues	sch_multiq.c	/^	struct Qdisc **queues;$/;"	m	struct:multiq_sched_data	typeref:struct:multiq_sched_data::Qdisc	file:
queues	sch_prio.c	/^	struct Qdisc *queues[TCQ_PRIO_BANDS];$/;"	m	struct:prio_sched_data	typeref:struct:prio_sched_data::Qdisc	file:
rate	act_police.c	/^	struct tc_ratespec	rate;$/;"	m	struct:tc_police_compat	typeref:struct:tc_police_compat::tc_ratespec	file:
rate	sch_htb.c	/^	struct qdisc_rate_table *rate;	\/* rate table of the class itself *\/$/;"	m	struct:htb_class	typeref:struct:htb_class::qdisc_rate_table	file:
rate2quantum	sch_htb.c	/^	int rate2quantum;	\/* quant = rate \/ rate2quantum *\/$/;"	m	struct:htb_sched	file:
rate_est	sch_cbq.c	/^	struct gnet_stats_rate_est rate_est;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::gnet_stats_rate_est	file:
rate_est	sch_drr.c	/^	struct gnet_stats_rate_est	rate_est;$/;"	m	struct:drr_class	typeref:struct:drr_class::gnet_stats_rate_est	file:
rate_est	sch_hfsc.c	/^	struct gnet_stats_rate_est rate_est;$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::gnet_stats_rate_est	file:
rate_est	sch_htb.c	/^	struct gnet_stats_rate_est rate_est;$/;"	m	struct:htb_class	typeref:struct:htb_class::gnet_stats_rate_est	file:
read_classid	cls_cgroup.c	/^static u64 read_classid(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
red_change	sch_red.c	/^static int red_change(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
red_class_ops	sch_red.c	/^static const struct Qdisc_class_ops red_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
red_dequeue	sch_red.c	/^static struct sk_buff * red_dequeue(struct Qdisc* sch)$/;"	f	file:
red_destroy	sch_red.c	/^static void red_destroy(struct Qdisc *sch)$/;"	f	file:
red_drop	sch_red.c	/^static unsigned int red_drop(struct Qdisc* sch)$/;"	f	file:
red_dump	sch_red.c	/^static int red_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
red_dump_class	sch_red.c	/^static int red_dump_class(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
red_dump_stats	sch_red.c	/^static int red_dump_stats(struct Qdisc *sch, struct gnet_dump *d)$/;"	f	file:
red_enqueue	sch_red.c	/^static int red_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
red_flags	sch_gred.c	/^	u32		red_flags;$/;"	m	struct:gred_sched	file:
red_get	sch_red.c	/^static unsigned long red_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
red_graft	sch_red.c	/^static int red_graft(struct Qdisc *sch, unsigned long arg, struct Qdisc *new,$/;"	f	file:
red_init	sch_red.c	/^static int red_init(struct Qdisc* sch, struct nlattr *opt)$/;"	f	file:
red_leaf	sch_red.c	/^static struct Qdisc *red_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
red_module_exit	sch_red.c	/^static void __exit red_module_exit(void)$/;"	f	file:
red_module_init	sch_red.c	/^static int __init red_module_init(void)$/;"	f	file:
red_peek	sch_red.c	/^static struct sk_buff * red_peek(struct Qdisc* sch)$/;"	f	file:
red_policy	sch_red.c	/^static const struct nla_policy red_policy[TCA_RED_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
red_put	sch_red.c	/^static void red_put(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
red_reset	sch_red.c	/^static void red_reset(struct Qdisc* sch)$/;"	f	file:
red_sched_data	sch_red.c	/^struct red_sched_data$/;"	s	file:
red_use_ecn	sch_red.c	/^static inline int red_use_ecn(struct red_sched_data *q)$/;"	f	file:
red_use_harddrop	sch_red.c	/^static inline int red_use_harddrop(struct red_sched_data *q)$/;"	f	file:
red_walk	sch_red.c	/^static void red_walk(struct Qdisc *sch, struct qdisc_walker *walker)$/;"	f	file:
ref	sch_atm.c	/^	int			ref;		\/* reference count *\/$/;"	m	struct:atm_flow_data	file:
refcnt	cls_u32.c	/^	int			refcnt;$/;"	m	struct:tc_u_common	file:
refcnt	cls_u32.c	/^	int			refcnt;$/;"	m	struct:tc_u_hnode	file:
refcnt	sch_cbq.c	/^	int			refcnt;$/;"	m	struct:cbq_class	file:
refcnt	sch_drr.c	/^	unsigned int			refcnt;$/;"	m	struct:drr_class	file:
refcnt	sch_hfsc.c	/^	unsigned int	refcnt;		\/* usage count *\/$/;"	m	struct:hfsc_class	file:
refcnt	sch_htb.c	/^	int refcnt;		\/* usage count of this class *\/$/;"	m	struct:htb_class	file:
register_qdisc	sch_api.c	/^EXPORT_SYMBOL(register_qdisc);$/;"	v
register_qdisc	sch_api.c	/^int register_qdisc(struct Qdisc_ops *qops)$/;"	f
register_tcf_proto_ops	cls_api.c	/^EXPORT_SYMBOL(register_tcf_proto_ops);$/;"	v
register_tcf_proto_ops	cls_api.c	/^int register_tcf_proto_ops(struct tcf_proto_ops *ops)$/;"	f
reorder	sch_netem.c	/^	u32 reorder;$/;"	m	struct:netem_sched_data	file:
reorder_cor	sch_netem.c	/^	} delay_cor, loss_cor, dup_cor, reorder_cor, corrupt_cor;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::crndstate	file:
res	cls_basic.c	/^	struct tcf_result	res;$/;"	m	struct:basic_filter	typeref:struct:basic_filter::tcf_result	file:
res	cls_fw.c	/^	struct tcf_result	res;$/;"	m	struct:fw_filter	typeref:struct:fw_filter::tcf_result	file:
res	cls_route.c	/^	struct tcf_result	res;$/;"	m	struct:route4_filter	typeref:struct:route4_filter::tcf_result	file:
res	cls_rsvp.h	/^	struct tcf_result	res;$/;"	m	struct:rsvp_filter	typeref:struct:rsvp_filter::tcf_result
res	cls_tcindex.c	/^	struct tcf_result	res;$/;"	m	struct:tcindex_filter_result	typeref:struct:tcindex_filter_result::tcf_result	file:
res	cls_u32.c	/^	struct tcf_result	res;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tcf_result	file:
reset_policy	act_simple.c	/^static void reset_policy(struct tcf_defact *d, char *defdata,$/;"	f	file:
result	cls_tcindex.c	/^	struct tcindex_filter_result result;$/;"	m	struct:tcindex_filter	typeref:struct:tcindex_filter::tcindex_filter_result	file:
rho	sch_netem.c	/^		u32 rho;$/;"	m	struct:netem_sched_data::crndstate	file:
root	sch_hfsc.c	/^	struct hfsc_class root;			\/* root class *\/$/;"	m	struct:hfsc_sched	typeref:struct:hfsc_sched::hfsc_class	file:
route4_bucket	cls_route.c	/^struct route4_bucket$/;"	s	file:
route4_change	cls_route.c	/^static int route4_change(struct tcf_proto *tp, unsigned long base,$/;"	f	file:
route4_classify	cls_route.c	/^static int route4_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f	file:
route4_delete	cls_route.c	/^static int route4_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f	file:
route4_delete_filter	cls_route.c	/^route4_delete_filter(struct tcf_proto *tp, struct route4_filter *f)$/;"	f	file:
route4_destroy	cls_route.c	/^static void route4_destroy(struct tcf_proto *tp)$/;"	f	file:
route4_dump	cls_route.c	/^static int route4_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f	file:
route4_fastmap	cls_route.c	/^struct route4_fastmap$/;"	s	file:
route4_fastmap_hash	cls_route.c	/^static __inline__ int route4_fastmap_hash(u32 id, int iif)$/;"	f	file:
route4_filter	cls_route.c	/^struct route4_filter$/;"	s	file:
route4_get	cls_route.c	/^static unsigned long route4_get(struct tcf_proto *tp, u32 handle)$/;"	f	file:
route4_hash_from	cls_route.c	/^static __inline__ int route4_hash_from(u32 id)$/;"	f	file:
route4_hash_iif	cls_route.c	/^static __inline__ int route4_hash_iif(int iif)$/;"	f	file:
route4_hash_to	cls_route.c	/^static __inline__ int route4_hash_to(u32 id)$/;"	f	file:
route4_hash_wild	cls_route.c	/^static __inline__ int route4_hash_wild(void)$/;"	f	file:
route4_head	cls_route.c	/^struct route4_head$/;"	s	file:
route4_init	cls_route.c	/^static int route4_init(struct tcf_proto *tp)$/;"	f	file:
route4_policy	cls_route.c	/^static const struct nla_policy route4_policy[TCA_ROUTE4_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
route4_put	cls_route.c	/^static void route4_put(struct tcf_proto *tp, unsigned long f)$/;"	f	file:
route4_reset_fastmap	cls_route.c	/^void route4_reset_fastmap(struct Qdisc *q, struct route4_head *head, u32 id)$/;"	f	file:
route4_set_fastmap	cls_route.c	/^route4_set_fastmap(struct route4_head *head, u32 id, int iif,$/;"	f	file:
route4_set_parms	cls_route.c	/^static int route4_set_parms(struct tcf_proto *tp, unsigned long base,$/;"	f	file:
route4_walk	cls_route.c	/^static void route4_walk(struct tcf_proto *tp, struct tcf_walker *arg)$/;"	f	file:
route_ext_map	cls_route.c	/^static const struct tcf_ext_map route_ext_map = {$/;"	v	typeref:struct:tcf_ext_map	file:
row	sch_htb.c	/^	struct rb_root row[TC_HTB_MAXDEPTH][TC_HTB_NUMPRIO];$/;"	m	struct:htb_sched	typeref:struct:htb_sched::rb_root	file:
row_mask	sch_htb.c	/^	int row_mask[TC_HTB_MAXDEPTH];$/;"	m	struct:htb_sched	file:
rshift	cls_flow.c	/^	u32			rshift;$/;"	m	struct:flow_filter	file:
rsvp_change	cls_rsvp.h	/^static int rsvp_change(struct tcf_proto *tp, unsigned long base,$/;"	f
rsvp_classify	cls_rsvp.h	/^static int rsvp_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f
rsvp_delete	cls_rsvp.h	/^static int rsvp_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f
rsvp_delete_filter	cls_rsvp.h	/^rsvp_delete_filter(struct tcf_proto *tp, struct rsvp_filter *f)$/;"	f
rsvp_destroy	cls_rsvp.h	/^static void rsvp_destroy(struct tcf_proto *tp)$/;"	f
rsvp_dump	cls_rsvp.h	/^static int rsvp_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f
rsvp_ext_map	cls_rsvp.h	/^static struct tcf_ext_map rsvp_ext_map = {$/;"	v	typeref:struct:tcf_ext_map
rsvp_filter	cls_rsvp.h	/^struct rsvp_filter$/;"	s
rsvp_get	cls_rsvp.h	/^static unsigned long rsvp_get(struct tcf_proto *tp, u32 handle)$/;"	f
rsvp_head	cls_rsvp.h	/^struct rsvp_head$/;"	s
rsvp_init	cls_rsvp.h	/^static int rsvp_init(struct tcf_proto *tp)$/;"	f
rsvp_policy	cls_rsvp.h	/^static const struct nla_policy rsvp_policy[TCA_RSVP_MAX + 1] = {$/;"	v	typeref:struct:nla_policy
rsvp_put	cls_rsvp.h	/^static void rsvp_put(struct tcf_proto *tp, unsigned long f)$/;"	f
rsvp_session	cls_rsvp.h	/^struct rsvp_session$/;"	s
rsvp_walk	cls_rsvp.h	/^static void rsvp_walk(struct tcf_proto *tp, struct tcf_walker *arg)$/;"	f
rtsc_init	sch_hfsc.c	/^rtsc_init(struct runtime_sc *rtsc, struct internal_sc *isc, u64 x, u64 y)$/;"	f	file:
rtsc_min	sch_hfsc.c	/^rtsc_min(struct runtime_sc *rtsc, struct internal_sc *isc, u64 x, u64 y)$/;"	f	file:
rtsc_x2y	sch_hfsc.c	/^rtsc_x2y(struct runtime_sc *rtsc, u64 x)$/;"	f	file:
rtsc_y2x	sch_hfsc.c	/^rtsc_y2x(struct runtime_sc *rtsc, u64 y)$/;"	f	file:
runtime_sc	sch_hfsc.c	/^struct runtime_sc$/;"	s	file:
rvalue	em_meta.c	/^	struct meta_value	rvalue;$/;"	m	struct:meta_match	typeref:struct:meta_match::meta_value	file:
rx_class	sch_cbq.c	/^	struct cbq_class	*rx_class;$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::cbq_class	file:
sc2isc	sch_hfsc.c	/^sc2isc(struct tc_service_curve *sc, struct internal_sc *isc)$/;"	f	file:
sch_atm_dequeue	sch_atm.c	/^static void sch_atm_dequeue(unsigned long data)$/;"	f	file:
sch_atm_pop	sch_atm.c	/^static void sch_atm_pop(struct atm_vcc *vcc, struct sk_buff *skb)$/;"	f	file:
sch_direct_xmit	sch_generic.c	/^int sch_direct_xmit(struct sk_buff *skb, struct Qdisc *q,$/;"	f
sched	sch_hfsc.c	/^	struct hfsc_sched *sched;	\/* scheduler data *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::hfsc_sched	file:
seg_x2y	sch_hfsc.c	/^seg_x2y(u64 x, u64 sm)$/;"	f	file:
seg_y2x	sch_hfsc.c	/^seg_y2x(u64 y, u64 ism)$/;"	f	file:
sel	cls_u32.c	/^	struct tc_u32_sel	sel;$/;"	m	struct:tc_u_knode	typeref:struct:tc_u_knode::tc_u32_sel	file:
sess	cls_rsvp.h	/^	struct rsvp_session	*sess;$/;"	m	struct:rsvp_filter	typeref:struct:rsvp_filter::rsvp_session
set_active	sch_hfsc.c	/^set_active(struct hfsc_class *cl, unsigned int len)$/;"	f	file:
set_passive	sch_hfsc.c	/^set_passive(struct hfsc_class *cl)$/;"	f	file:
set_tc_index	sch_dsmark.c	/^	int			set_tc_index;$/;"	m	struct:dsmark_qdisc_data	file:
sfq_bind	sch_sfq.c	/^static unsigned long sfq_bind(struct Qdisc *sch, unsigned long parent,$/;"	f	file:
sfq_change	sch_sfq.c	/^static int sfq_change(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
sfq_change	sch_utt.c	/^static int sfq_change(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
sfq_class_ops	sch_sfq.c	/^static const struct Qdisc_class_ops sfq_class_ops = {$/;"	v	typeref:struct:Qdisc_class_ops	file:
sfq_classify	sch_sfq.c	/^static unsigned int sfq_classify(struct sk_buff *skb, struct Qdisc *sch,$/;"	f	file:
sfq_dec	sch_sfq.c	/^static inline void sfq_dec(struct sfq_sched_data *q, sfq_index x)$/;"	f	file:
sfq_dequeue	sch_sfq.c	/^sfq_dequeue(struct Qdisc *sch)$/;"	f	file:
sfq_dequeue	sch_utt.c	/^sfq_dequeue(struct Qdisc *sch)$/;"	f	file:
sfq_destroy	sch_sfq.c	/^static void sfq_destroy(struct Qdisc *sch)$/;"	f	file:
sfq_destroy	sch_utt.c	/^static void sfq_destroy(struct Qdisc *sch)$/;"	f	file:
sfq_drop	sch_sfq.c	/^static unsigned int sfq_drop(struct Qdisc *sch)$/;"	f	file:
sfq_drop	sch_utt.c	/^static unsigned int sfq_drop(struct Qdisc *sch)$/;"	f	file:
sfq_dump	sch_sfq.c	/^static int sfq_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
sfq_dump	sch_utt.c	/^static int sfq_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
sfq_dump_class	sch_sfq.c	/^static int sfq_dump_class(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
sfq_dump_class_stats	sch_sfq.c	/^static int sfq_dump_class_stats(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
sfq_enqueue	sch_sfq.c	/^sfq_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
sfq_enqueue	sch_utt.c	/^static int sfq_enqueue(struct sk_buff *skb, struct Qdisc *sch)$/;"	f	file:
sfq_find_tcf	sch_sfq.c	/^static struct tcf_proto **sfq_find_tcf(struct Qdisc *sch, unsigned long cl)$/;"	f	file:
sfq_fold_hash	sch_sfq.c	/^static __inline__ unsigned sfq_fold_hash(struct sfq_sched_data *q, u32 h, u32 h1)$/;"	f	file:
sfq_get	sch_sfq.c	/^static unsigned long sfq_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
sfq_hash	sch_sfq.c	/^static unsigned sfq_hash(struct sfq_sched_data *q, struct sk_buff *skb)$/;"	f	file:
sfq_head	sch_sfq.c	/^struct sfq_head$/;"	s	file:
sfq_inc	sch_sfq.c	/^static inline void sfq_inc(struct sfq_sched_data *q, sfq_index x)$/;"	f	file:
sfq_index	sch_sfq.c	/^typedef unsigned char sfq_index;$/;"	t	file:
sfq_init	sch_sfq.c	/^static int sfq_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
sfq_init	sch_utt.c	/^static int sfq_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
sfq_leaf	sch_sfq.c	/^static struct Qdisc *sfq_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
sfq_link	sch_sfq.c	/^static inline void sfq_link(struct sfq_sched_data *q, sfq_index x)$/;"	f	file:
sfq_module_exit	sch_sfq.c	/^static void __exit sfq_module_exit(void)$/;"	f	file:
sfq_module_exit	sch_utt.c	/^static void __exit sfq_module_exit(void)$/;"	f	file:
sfq_module_init	sch_sfq.c	/^static int __init sfq_module_init(void)$/;"	f	file:
sfq_module_init	sch_utt.c	/^static int __init sfq_module_init(void)$/;"	f	file:
sfq_peek	sch_sfq.c	/^sfq_peek(struct Qdisc *sch)$/;"	f	file:
sfq_peek	sch_utt.c	/^sfq_peek(struct Qdisc *sch)$/;"	f	file:
sfq_perturbation	sch_sfq.c	/^static void sfq_perturbation(unsigned long arg)$/;"	f	file:
sfq_put	sch_sfq.c	/^static void sfq_put(struct Qdisc *q, unsigned long cl)$/;"	f	file:
sfq_reset	sch_sfq.c	/^sfq_reset(struct Qdisc *sch)$/;"	f	file:
sfq_reset	sch_utt.c	/^sfq_reset(struct Qdisc *sch)$/;"	f	file:
sfq_sched_data	sch_sfq.c	/^struct sfq_sched_data$/;"	s	file:
sfq_walk	sch_sfq.c	/^static void sfq_walk(struct Qdisc *sch, struct qdisc_walker *arg)$/;"	f	file:
share	sch_cbq.c	/^	struct cbq_class	*share;		\/* Ptr to LS parent in the class tree *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
shift	cls_tcindex.c	/^	int shift;		\/* shift ANDed key to the right *\/$/;"	m	struct:tcindex_data	file:
shutdown_scheduler_queue	sch_generic.c	/^static void shutdown_scheduler_queue(struct net_device *dev,$/;"	f	file:
sibling	sch_cbq.c	/^	struct cbq_class	*sibling;	\/* Sibling chain *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
siblings	sch_hfsc.c	/^	struct list_head siblings;	\/* sibling classes *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::list_head	file:
simp_cleanup_module	act_simple.c	/^module_exit(simp_cleanup_module);$/;"	v
simp_cleanup_module	act_simple.c	/^static void __exit simp_cleanup_module(void)$/;"	f	file:
simp_hash_info	act_simple.c	/^static struct tcf_hashinfo simp_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
simp_idx_gen	act_simple.c	/^static u32 simp_idx_gen;$/;"	v	file:
simp_init_module	act_simple.c	/^module_init(simp_init_module);$/;"	v
simp_init_module	act_simple.c	/^static int __init simp_init_module(void)$/;"	f	file:
simple_policy	act_simple.c	/^static const struct nla_policy simple_policy[TCA_DEF_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
size	sch_netem.c	/^		u32  size;$/;"	m	struct:netem_sched_data::disttable	file:
skb	cls_api.c	/^	struct sk_buff *skb;$/;"	m	struct:tcf_dump_args	typeref:struct:tcf_dump_args::sk_buff	file:
skb	sch_api.c	/^	struct sk_buff *skb;$/;"	m	struct:qdisc_dump_args	typeref:struct:qdisc_dump_args::sk_buff	file:
skb_distinguish	sch_prio.c	/^static void skb_distinguish(struct iphdr *iph, struct sk_buff *skb)$/;"	f	file:
skbedit_cleanup_module	act_skbedit.c	/^module_exit(skbedit_cleanup_module);$/;"	v
skbedit_cleanup_module	act_skbedit.c	/^static void __exit skbedit_cleanup_module(void)$/;"	f	file:
skbedit_hash_info	act_skbedit.c	/^static struct tcf_hashinfo skbedit_hash_info = {$/;"	v	typeref:struct:tcf_hashinfo	file:
skbedit_idx_gen	act_skbedit.c	/^static u32 skbedit_idx_gen;$/;"	v	file:
skbedit_init_module	act_skbedit.c	/^module_init(skbedit_init_module);$/;"	v
skbedit_init_module	act_skbedit.c	/^static int __init skbedit_init_module(void)$/;"	f	file:
skbedit_policy	act_skbedit.c	/^static const struct nla_policy skbedit_policy[TCA_SKBEDIT_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
slaves	sch_teql.c	/^	struct Qdisc *slaves;$/;"	m	struct:teql_master	typeref:struct:teql_master::Qdisc	file:
sm1	sch_hfsc.c	/^	u64	sm1;	\/* scaled slope of the 1st segment *\/$/;"	m	struct:internal_sc	file:
sm1	sch_hfsc.c	/^	u64	sm1;	\/* scaled slope of the 1st segment *\/$/;"	m	struct:runtime_sc	file:
sm2	sch_hfsc.c	/^	u64	sm2;	\/* scaled slope of the 2nd segment *\/$/;"	m	struct:internal_sc	file:
sm2	sch_hfsc.c	/^	u64	sm2;	\/* scaled slope of the 2nd segment *\/$/;"	m	struct:runtime_sc	file:
sm2m	sch_hfsc.c	/^sm2m(u64 sm)$/;"	f	file:
sock	sch_atm.c	/^	struct socket		*sock;		\/* for closing *\/$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::socket	file:
some_qdisc_is_busy	sch_generic.c	/^static bool some_qdisc_is_busy(struct net_device *dev)$/;"	f	file:
spi	cls_rsvp.h	/^	struct tc_rsvp_gpi	spi;$/;"	m	struct:rsvp_filter	typeref:struct:rsvp_filter::tc_rsvp_gpi
split	sch_cbq.c	/^	struct cbq_class	*split;		\/* Ptr to split node *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
src	cls_rsvp.h	/^	__be32			src[RSVP_DST_LEN];$/;"	m	struct:rsvp_filter
src	sch_esfq.c	/^	u32	src;		\/* source from packet header *\/$/;"	m	struct:esfq_packet_info	file:
ss_files	cls_cgroup.c	/^static struct cftype ss_files[] = {$/;"	v	typeref:struct:cftype	file:
stab_policy	sch_api.c	/^static const struct nla_policy stab_policy[TCA_STAB_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
statisPerSecPerUserFlowSta	utt_qos_misc.c	/^EXPORT_SYMBOL(statisPerSecPerUserFlowSta);$/;"	v
statisPerSecPerUserFlowSta	utt_qos_misc.c	/^void statisPerSecPerUserFlowSta(struct smart_hash_node *hashNode, $/;"	f
stats	sch_gred.c	/^	struct red_stats stats;$/;"	m	struct:gred_sched_data	typeref:struct:gred_sched_data::red_stats	file:
stats	sch_red.c	/^	struct red_stats	stats;$/;"	m	struct:red_sched_data	typeref:struct:red_sched_data::red_stats	file:
t_c	sch_htb.c	/^	psched_time_t t_c;	\/* checkpoint time *\/$/;"	m	struct:htb_class	file:
t_c	sch_tbf.c	/^	psched_time_t	t_c;		\/* Time check-point *\/$/;"	m	struct:tbf_sched_data	file:
tab	sch_gred.c	/^	struct gred_sched_data *tab[MAX_DPs];$/;"	m	struct:gred_sched	typeref:struct:gred_sched::gred_sched_data	file:
table	cls_route.c	/^	struct route4_bucket	*table[256+1];$/;"	m	struct:route4_head	typeref:struct:route4_head::route4_bucket	file:
table	sch_netem.c	/^		s16 table[0];$/;"	m	struct:netem_sched_data::disttable	file:
tabledist	sch_netem.c	/^static psched_tdiff_t tabledist(psched_tdiff_t mu, psched_tdiff_t sigma,$/;"	f	file:
tail	sch_esfq.c	/^	esfq_index	tail;		\/* Index of current slot in round *\/$/;"	m	struct:esfq_sched_data	file:
tail	sch_sfq.c	/^	sfq_index	tail;		\/* Index of current slot in round *\/$/;"	m	struct:sfq_sched_data	file:
task	sch_atm.c	/^	struct tasklet_struct	task;		\/* dequeue tasklet *\/$/;"	m	struct:atm_qdisc_data	typeref:struct:atm_qdisc_data::tasklet_struct	file:
task_cls_state	cls_cgroup.c	/^static inline struct cgroup_cls_state *task_cls_state(struct task_struct *p)$/;"	f	file:
tbf_change	sch_tbf.c	/^static int tbf_change(struct Qdisc* sch, struct nlattr *opt)$/;"	f	file:
tbf_class_ops	sch_tbf.c	/^static const struct Qdisc_class_ops tbf_class_ops =$/;"	v	typeref:struct:Qdisc_class_ops	file:
tbf_dequeue	sch_tbf.c	/^static struct sk_buff *tbf_dequeue(struct Qdisc* sch)$/;"	f	file:
tbf_destroy	sch_tbf.c	/^static void tbf_destroy(struct Qdisc *sch)$/;"	f	file:
tbf_drop	sch_tbf.c	/^static unsigned int tbf_drop(struct Qdisc* sch)$/;"	f	file:
tbf_dump	sch_tbf.c	/^static int tbf_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
tbf_dump_class	sch_tbf.c	/^static int tbf_dump_class(struct Qdisc *sch, unsigned long cl,$/;"	f	file:
tbf_enqueue	sch_tbf.c	/^static int tbf_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
tbf_get	sch_tbf.c	/^static unsigned long tbf_get(struct Qdisc *sch, u32 classid)$/;"	f	file:
tbf_graft	sch_tbf.c	/^static int tbf_graft(struct Qdisc *sch, unsigned long arg, struct Qdisc *new,$/;"	f	file:
tbf_init	sch_tbf.c	/^static int tbf_init(struct Qdisc* sch, struct nlattr *opt)$/;"	f	file:
tbf_leaf	sch_tbf.c	/^static struct Qdisc *tbf_leaf(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
tbf_module_exit	sch_tbf.c	/^static void __exit tbf_module_exit(void)$/;"	f	file:
tbf_module_init	sch_tbf.c	/^static int __init tbf_module_init(void)$/;"	f	file:
tbf_policy	sch_tbf.c	/^static const struct nla_policy tbf_policy[TCA_TBF_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
tbf_put	sch_tbf.c	/^static void tbf_put(struct Qdisc *sch, unsigned long arg)$/;"	f	file:
tbf_reset	sch_tbf.c	/^static void tbf_reset(struct Qdisc* sch)$/;"	f	file:
tbf_sched_data	sch_tbf.c	/^struct tbf_sched_data$/;"	s	file:
tbf_walk	sch_tbf.c	/^static void tbf_walk(struct Qdisc *sch, struct qdisc_walker *walker)$/;"	f	file:
tc_action_init	act_api.c	/^static int __init tc_action_init(void)$/;"	f	file:
tc_action_init	act_api.c	/^subsys_initcall(tc_action_init);$/;"	v
tc_classify	sch_api.c	/^EXPORT_SYMBOL(tc_classify);$/;"	v
tc_classify	sch_api.c	/^int tc_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f
tc_classify_compat	sch_api.c	/^EXPORT_SYMBOL(tc_classify_compat);$/;"	v
tc_classify_compat	sch_api.c	/^int tc_classify_compat(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f
tc_ctl_action	act_api.c	/^static int tc_ctl_action(struct sk_buff *skb, struct nlmsghdr *n, void *arg)$/;"	f	file:
tc_ctl_tclass	sch_api.c	/^static int tc_ctl_tclass(struct sk_buff *skb, struct nlmsghdr *n, void *arg)$/;"	f	file:
tc_ctl_tfilter	cls_api.c	/^static int tc_ctl_tfilter(struct sk_buff *skb, struct nlmsghdr *n, void *arg)$/;"	f	file:
tc_dump_action	act_api.c	/^tc_dump_action(struct sk_buff *skb, struct netlink_callback *cb)$/;"	f	file:
tc_dump_qdisc	sch_api.c	/^static int tc_dump_qdisc(struct sk_buff *skb, struct netlink_callback *cb)$/;"	f	file:
tc_dump_qdisc_root	sch_api.c	/^static int tc_dump_qdisc_root(struct Qdisc *root, struct sk_buff *skb,$/;"	f	file:
tc_dump_tclass	sch_api.c	/^static int tc_dump_tclass(struct sk_buff *skb, struct netlink_callback *cb)$/;"	f	file:
tc_dump_tclass_qdisc	sch_api.c	/^static int tc_dump_tclass_qdisc(struct Qdisc *q, struct sk_buff *skb,$/;"	f	file:
tc_dump_tclass_root	sch_api.c	/^static int tc_dump_tclass_root(struct Qdisc *root, struct sk_buff *skb,$/;"	f	file:
tc_dump_tfilter	cls_api.c	/^static int tc_dump_tfilter(struct sk_buff *skb, struct netlink_callback *cb)$/;"	f	file:
tc_fill_qdisc	sch_api.c	/^static int tc_fill_qdisc(struct sk_buff *skb, struct Qdisc *q, u32 clid,$/;"	f	file:
tc_fill_tclass	sch_api.c	/^static int tc_fill_tclass(struct sk_buff *skb, struct Qdisc *q,$/;"	f	file:
tc_filter_init	cls_api.c	/^static int __init tc_filter_init(void)$/;"	f	file:
tc_filter_init	cls_api.c	/^subsys_initcall(tc_filter_init);$/;"	v
tc_get_qdisc	sch_api.c	/^static int tc_get_qdisc(struct sk_buff *skb, struct nlmsghdr *n, void *arg)$/;"	f	file:
tc_index_to_dp	sch_gred.c	/^static inline u16 tc_index_to_dp(struct sk_buff *skb)$/;"	f	file:
tc_lookup_action	act_api.c	/^static struct tc_action_ops *tc_lookup_action(struct nlattr *kind)$/;"	f	file:
tc_lookup_action_n	act_api.c	/^static struct tc_action_ops *tc_lookup_action_n(char *kind)$/;"	f	file:
tc_modify_qdisc	sch_api.c	/^static int tc_modify_qdisc(struct sk_buff *skb, struct nlmsghdr *n, void *arg)$/;"	f	file:
tc_police_compat	act_police.c	/^struct tc_police_compat$/;"	s	file:
tc_qdisc_dump_ignore	sch_api.c	/^static bool tc_qdisc_dump_ignore(struct Qdisc *q)$/;"	f	file:
tc_u_common	cls_u32.c	/^struct tc_u_common$/;"	s	file:
tc_u_hnode	cls_u32.c	/^struct tc_u_hnode$/;"	s	file:
tc_u_knode	cls_u32.c	/^struct tc_u_knode$/;"	s	file:
tca_action_flush	act_api.c	/^static int tca_action_flush(struct net *net, struct nlattr *nla,$/;"	f	file:
tca_action_gd	act_api.c	/^tca_action_gd(struct net *net, struct nlattr *nla, struct nlmsghdr *n,$/;"	f	file:
tca_get_fill	act_api.c	/^tca_get_fill(struct sk_buff *skb, struct tc_action *a, u32 pid, u32 seq,$/;"	f	file:
tcf_act_police	act_police.c	/^static int tcf_act_police(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_act_police_cleanup	act_police.c	/^static int tcf_act_police_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_act_police_dump	act_police.c	/^tcf_act_police_dump(struct sk_buff *skb, struct tc_action *a, int bind, int ref)$/;"	f	file:
tcf_act_police_locate	act_police.c	/^static int tcf_act_police_locate(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_act_police_walker	act_police.c	/^static int tcf_act_police_walker(struct sk_buff *skb, struct netlink_callback *cb,$/;"	f	file:
tcf_action_add	act_api.c	/^tcf_action_add(struct net *net, struct nlattr *nla, struct nlmsghdr *n,$/;"	f	file:
tcf_action_copy_stats	act_api.c	/^int tcf_action_copy_stats(struct sk_buff *skb, struct tc_action *a,$/;"	f
tcf_action_destroy	act_api.c	/^void tcf_action_destroy(struct tc_action *act, int bind)$/;"	f
tcf_action_dump	act_api.c	/^tcf_action_dump(struct sk_buff *skb, struct tc_action *act, int bind, int ref)$/;"	f
tcf_action_dump_1	act_api.c	/^EXPORT_SYMBOL(tcf_action_dump_1);$/;"	v
tcf_action_dump_1	act_api.c	/^tcf_action_dump_1(struct sk_buff *skb, struct tc_action *a, int bind, int ref)$/;"	f
tcf_action_dump_old	act_api.c	/^tcf_action_dump_old(struct sk_buff *skb, struct tc_action *a, int bind, int ref)$/;"	f
tcf_action_exec	act_api.c	/^EXPORT_SYMBOL(tcf_action_exec);$/;"	v
tcf_action_exec	act_api.c	/^int tcf_action_exec(struct sk_buff *skb, struct tc_action *act,$/;"	f
tcf_action_get_1	act_api.c	/^tcf_action_get_1(struct nlattr *nla, struct nlmsghdr *n, u32 pid)$/;"	f	file:
tcf_action_init	act_api.c	/^struct tc_action *tcf_action_init(struct nlattr *nla, struct nlattr *est,$/;"	f
tcf_action_init_1	act_api.c	/^struct tc_action *tcf_action_init_1(struct nlattr *nla, struct nlattr *est,$/;"	f
tcf_add_notify	act_api.c	/^static int tcf_add_notify(struct net *net, struct tc_action *a,$/;"	f	file:
tcf_auto_prio	cls_api.c	/^static inline u32 tcf_auto_prio(struct tcf_proto *tp)$/;"	f	file:
tcf_common_free_rcu	act_api.c	/^static void tcf_common_free_rcu(struct rcu_head *head)$/;"	f	file:
tcf_del_walker	act_api.c	/^static int tcf_del_walker(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_destroy	sch_api.c	/^void tcf_destroy(struct tcf_proto *tp)$/;"	f
tcf_destroy_chain	sch_api.c	/^EXPORT_SYMBOL(tcf_destroy_chain);$/;"	v
tcf_destroy_chain	sch_api.c	/^void tcf_destroy_chain(struct tcf_proto **fl)$/;"	f
tcf_dump_args	cls_api.c	/^struct tcf_dump_args {$/;"	s	file:
tcf_dump_walker	act_api.c	/^static int tcf_dump_walker(struct sk_buff *skb, struct netlink_callback *cb,$/;"	f	file:
tcf_em_get_match	ematch.c	/^static inline struct tcf_ematch * tcf_em_get_match(struct tcf_ematch_tree *tree,$/;"	f	file:
tcf_em_lookup	ematch.c	/^static inline struct tcf_ematch_ops * tcf_em_lookup(u16 kind)$/;"	f	file:
tcf_em_match	ematch.c	/^static inline int tcf_em_match(struct sk_buff *skb, struct tcf_ematch *em,$/;"	f	file:
tcf_em_register	ematch.c	/^EXPORT_SYMBOL(tcf_em_register);$/;"	v
tcf_em_register	ematch.c	/^int tcf_em_register(struct tcf_ematch_ops *ops)$/;"	f
tcf_em_tree_destroy	ematch.c	/^EXPORT_SYMBOL(tcf_em_tree_destroy);$/;"	v
tcf_em_tree_destroy	ematch.c	/^void tcf_em_tree_destroy(struct tcf_proto *tp, struct tcf_ematch_tree *tree)$/;"	f
tcf_em_tree_dump	ematch.c	/^EXPORT_SYMBOL(tcf_em_tree_dump);$/;"	v
tcf_em_tree_dump	ematch.c	/^int tcf_em_tree_dump(struct sk_buff *skb, struct tcf_ematch_tree *tree, int tlv)$/;"	f
tcf_em_tree_validate	ematch.c	/^EXPORT_SYMBOL(tcf_em_tree_validate);$/;"	v
tcf_em_tree_validate	ematch.c	/^int tcf_em_tree_validate(struct tcf_proto *tp, struct nlattr *nla,$/;"	f
tcf_em_unregister	ematch.c	/^EXPORT_SYMBOL(tcf_em_unregister);$/;"	v
tcf_em_unregister	ematch.c	/^void tcf_em_unregister(struct tcf_ematch_ops *ops)$/;"	f
tcf_em_validate	ematch.c	/^static int tcf_em_validate(struct tcf_proto *tp,$/;"	f	file:
tcf_exts_change	cls_api.c	/^EXPORT_SYMBOL(tcf_exts_change);$/;"	v
tcf_exts_change	cls_api.c	/^void tcf_exts_change(struct tcf_proto *tp, struct tcf_exts *dst,$/;"	f
tcf_exts_destroy	cls_api.c	/^EXPORT_SYMBOL(tcf_exts_destroy);$/;"	v
tcf_exts_destroy	cls_api.c	/^void tcf_exts_destroy(struct tcf_proto *tp, struct tcf_exts *exts)$/;"	f
tcf_exts_dump	cls_api.c	/^EXPORT_SYMBOL(tcf_exts_dump);$/;"	v
tcf_exts_dump	cls_api.c	/^int tcf_exts_dump(struct sk_buff *skb, struct tcf_exts *exts,$/;"	f
tcf_exts_dump_stats	cls_api.c	/^EXPORT_SYMBOL(tcf_exts_dump_stats);$/;"	v
tcf_exts_dump_stats	cls_api.c	/^int tcf_exts_dump_stats(struct sk_buff *skb, struct tcf_exts *exts,$/;"	f
tcf_exts_validate	cls_api.c	/^EXPORT_SYMBOL(tcf_exts_validate);$/;"	v
tcf_exts_validate	cls_api.c	/^int tcf_exts_validate(struct tcf_proto *tp, struct nlattr **tb,$/;"	f
tcf_fill_node	cls_api.c	/^static int tcf_fill_node(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f	file:
tcf_gact	act_gact.c	/^static int tcf_gact(struct sk_buff *skb, struct tc_action *a, struct tcf_result *res)$/;"	f	file:
tcf_gact_cleanup	act_gact.c	/^static int tcf_gact_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_gact_dump	act_gact.c	/^static int tcf_gact_dump(struct sk_buff *skb, struct tc_action *a, int bind, int ref)$/;"	f	file:
tcf_gact_ht	act_gact.c	/^static struct tcf_common *tcf_gact_ht[GACT_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_gact_init	act_gact.c	/^static int tcf_gact_init(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_generic_walker	act_api.c	/^EXPORT_SYMBOL(tcf_generic_walker);$/;"	v
tcf_generic_walker	act_api.c	/^int tcf_generic_walker(struct sk_buff *skb, struct netlink_callback *cb,$/;"	f
tcf_hash_check	act_api.c	/^EXPORT_SYMBOL(tcf_hash_check);$/;"	v
tcf_hash_check	act_api.c	/^struct tcf_common *tcf_hash_check(u32 index, struct tc_action *a, int bind,$/;"	f
tcf_hash_create	act_api.c	/^EXPORT_SYMBOL(tcf_hash_create);$/;"	v
tcf_hash_create	act_api.c	/^struct tcf_common *tcf_hash_create(u32 index, struct nlattr *est,$/;"	f
tcf_hash_destroy	act_api.c	/^EXPORT_SYMBOL(tcf_hash_destroy);$/;"	v
tcf_hash_destroy	act_api.c	/^void tcf_hash_destroy(struct tcf_common *p, struct tcf_hashinfo *hinfo)$/;"	f
tcf_hash_insert	act_api.c	/^EXPORT_SYMBOL(tcf_hash_insert);$/;"	v
tcf_hash_insert	act_api.c	/^void tcf_hash_insert(struct tcf_common *p, struct tcf_hashinfo *hinfo)$/;"	f
tcf_hash_lookup	act_api.c	/^EXPORT_SYMBOL(tcf_hash_lookup);$/;"	v
tcf_hash_lookup	act_api.c	/^struct tcf_common *tcf_hash_lookup(u32 index, struct tcf_hashinfo *hinfo)$/;"	f
tcf_hash_new_index	act_api.c	/^EXPORT_SYMBOL(tcf_hash_new_index);$/;"	v
tcf_hash_new_index	act_api.c	/^u32 tcf_hash_new_index(u32 *idx_gen, struct tcf_hashinfo *hinfo)$/;"	f
tcf_hash_release	act_api.c	/^EXPORT_SYMBOL(tcf_hash_release);$/;"	v
tcf_hash_release	act_api.c	/^int tcf_hash_release(struct tcf_common *p, int bind,$/;"	f
tcf_hash_search	act_api.c	/^EXPORT_SYMBOL(tcf_hash_search);$/;"	v
tcf_hash_search	act_api.c	/^int tcf_hash_search(struct tc_action *a, u32 index)$/;"	f
tcf_ipt	act_ipt.c	/^static int tcf_ipt(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_ipt_cleanup	act_ipt.c	/^static int tcf_ipt_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_ipt_dump	act_ipt.c	/^static int tcf_ipt_dump(struct sk_buff *skb, struct tc_action *a, int bind, int ref)$/;"	f	file:
tcf_ipt_ht	act_ipt.c	/^static struct tcf_common *tcf_ipt_ht[IPT_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_ipt_init	act_ipt.c	/^static int tcf_ipt_init(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_ipt_release	act_ipt.c	/^static int tcf_ipt_release(struct tcf_ipt *ipt, int bind)$/;"	f	file:
tcf_mirred	act_mirred.c	/^static int tcf_mirred(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_mirred_cleanup	act_mirred.c	/^static int tcf_mirred_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_mirred_dump	act_mirred.c	/^static int tcf_mirred_dump(struct sk_buff *skb, struct tc_action *a, int bind, int ref)$/;"	f	file:
tcf_mirred_ht	act_mirred.c	/^static struct tcf_common *tcf_mirred_ht[MIRRED_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_mirred_init	act_mirred.c	/^static int tcf_mirred_init(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_mirred_release	act_mirred.c	/^static inline int tcf_mirred_release(struct tcf_mirred *m, int bind)$/;"	f	file:
tcf_nat	act_nat.c	/^static int tcf_nat(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_nat_cleanup	act_nat.c	/^static int tcf_nat_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_nat_dump	act_nat.c	/^static int tcf_nat_dump(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_nat_ht	act_nat.c	/^static struct tcf_common *tcf_nat_ht[NAT_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_nat_init	act_nat.c	/^static int tcf_nat_init(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_node_dump	cls_api.c	/^static int tcf_node_dump(struct tcf_proto *tp, unsigned long n,$/;"	f	file:
tcf_pedit	act_pedit.c	/^static int tcf_pedit(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_pedit_cleanup	act_pedit.c	/^static int tcf_pedit_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_pedit_dump	act_pedit.c	/^static int tcf_pedit_dump(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_pedit_ht	act_pedit.c	/^static struct tcf_common *tcf_pedit_ht[PEDIT_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_pedit_init	act_pedit.c	/^static int tcf_pedit_init(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_police_destroy	act_police.c	/^static void tcf_police_destroy(struct tcf_police *p)$/;"	f	file:
tcf_police_free_rcu	act_police.c	/^static void tcf_police_free_rcu(struct rcu_head *head)$/;"	f	file:
tcf_police_ht	act_police.c	/^static struct tcf_common *tcf_police_ht[POL_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_proto_lookup_ops	cls_api.c	/^static struct tcf_proto_ops *tcf_proto_lookup_ops(struct nlattr *kind)$/;"	f	file:
tcf_register_action	act_api.c	/^EXPORT_SYMBOL(tcf_register_action);$/;"	v
tcf_register_action	act_api.c	/^int tcf_register_action(struct tc_action_ops *act)$/;"	f
tcf_simp	act_simple.c	/^static int tcf_simp(struct sk_buff *skb, struct tc_action *a, struct tcf_result *res)$/;"	f	file:
tcf_simp_cleanup	act_simple.c	/^static inline int tcf_simp_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_simp_dump	act_simple.c	/^static inline int tcf_simp_dump(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_simp_ht	act_simple.c	/^static struct tcf_common *tcf_simp_ht[SIMP_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_simp_init	act_simple.c	/^static int tcf_simp_init(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_simp_release	act_simple.c	/^static int tcf_simp_release(struct tcf_defact *d, int bind)$/;"	f	file:
tcf_skbedit	act_skbedit.c	/^static int tcf_skbedit(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_skbedit_cleanup	act_skbedit.c	/^static inline int tcf_skbedit_cleanup(struct tc_action *a, int bind)$/;"	f	file:
tcf_skbedit_dump	act_skbedit.c	/^static inline int tcf_skbedit_dump(struct sk_buff *skb, struct tc_action *a,$/;"	f	file:
tcf_skbedit_ht	act_skbedit.c	/^static struct tcf_common *tcf_skbedit_ht[SKBEDIT_TAB_MASK + 1];$/;"	v	typeref:struct:tcf_common	file:
tcf_skbedit_init	act_skbedit.c	/^static int tcf_skbedit_init(struct nlattr *nla, struct nlattr *est,$/;"	f	file:
tcf_unregister_action	act_api.c	/^EXPORT_SYMBOL(tcf_unregister_action);$/;"	v
tcf_unregister_action	act_api.c	/^int tcf_unregister_action(struct tc_action_ops *act)$/;"	f
tcindex_change	cls_tcindex.c	/^tcindex_change(struct tcf_proto *tp, unsigned long base, u32 handle,$/;"	f	file:
tcindex_classify	cls_tcindex.c	/^static int tcindex_classify(struct sk_buff *skb, struct tcf_proto *tp,$/;"	f	file:
tcindex_data	cls_tcindex.c	/^struct tcindex_data {$/;"	s	file:
tcindex_delete	cls_tcindex.c	/^static int tcindex_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f	file:
tcindex_destroy	cls_tcindex.c	/^static void tcindex_destroy(struct tcf_proto *tp)$/;"	f	file:
tcindex_destroy_element	cls_tcindex.c	/^static int tcindex_destroy_element(struct tcf_proto *tp,$/;"	f	file:
tcindex_dump	cls_tcindex.c	/^static int tcindex_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f	file:
tcindex_ext_map	cls_tcindex.c	/^static const struct tcf_ext_map tcindex_ext_map = {$/;"	v	typeref:struct:tcf_ext_map	file:
tcindex_filter	cls_tcindex.c	/^struct tcindex_filter {$/;"	s	file:
tcindex_filter_is_set	cls_tcindex.c	/^tcindex_filter_is_set(struct tcindex_filter_result *r)$/;"	f	file:
tcindex_filter_result	cls_tcindex.c	/^struct tcindex_filter_result {$/;"	s	file:
tcindex_get	cls_tcindex.c	/^static unsigned long tcindex_get(struct tcf_proto *tp, u32 handle)$/;"	f	file:
tcindex_init	cls_tcindex.c	/^static int tcindex_init(struct tcf_proto *tp)$/;"	f	file:
tcindex_lookup	cls_tcindex.c	/^tcindex_lookup(struct tcindex_data *p, u16 key)$/;"	f	file:
tcindex_policy	cls_tcindex.c	/^static const struct nla_policy tcindex_policy[TCA_TCINDEX_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
tcindex_put	cls_tcindex.c	/^static void tcindex_put(struct tcf_proto *tp, unsigned long f)$/;"	f	file:
tcindex_set_parms	cls_tcindex.c	/^tcindex_set_parms(struct tcf_proto *tp, unsigned long base, u32 handle,$/;"	f	file:
tcindex_walk	cls_tcindex.c	/^static void tcindex_walk(struct tcf_proto *tp, struct tcf_walker *walker)$/;"	f	file:
tclass_notify	sch_api.c	/^static int tclass_notify(struct net *net, struct sk_buff *oskb,$/;"	f	file:
teql_dequeue	sch_teql.c	/^teql_dequeue(struct Qdisc* sch)$/;"	f	file:
teql_destroy	sch_teql.c	/^teql_destroy(struct Qdisc* sch)$/;"	f	file:
teql_enqueue	sch_teql.c	/^teql_enqueue(struct sk_buff *skb, struct Qdisc* sch)$/;"	f	file:
teql_exit	sch_teql.c	/^module_exit(teql_exit);$/;"	v
teql_exit	sch_teql.c	/^static void __exit teql_exit(void)$/;"	f	file:
teql_init	sch_teql.c	/^module_init(teql_init);$/;"	v
teql_init	sch_teql.c	/^static int __init teql_init(void)$/;"	f	file:
teql_master	sch_teql.c	/^struct teql_master$/;"	s	file:
teql_master_close	sch_teql.c	/^static int teql_master_close(struct net_device *dev)$/;"	f	file:
teql_master_mtu	sch_teql.c	/^static int teql_master_mtu(struct net_device *dev, int new_mtu)$/;"	f	file:
teql_master_open	sch_teql.c	/^static int teql_master_open(struct net_device *dev)$/;"	f	file:
teql_master_setup	sch_teql.c	/^static __init void teql_master_setup(struct net_device *dev)$/;"	f	file:
teql_master_xmit	sch_teql.c	/^static netdev_tx_t teql_master_xmit(struct sk_buff *skb, struct net_device *dev)$/;"	f	file:
teql_neigh_release	sch_teql.c	/^teql_neigh_release(struct neighbour *n)$/;"	f	file:
teql_netdev_ops	sch_teql.c	/^static const struct net_device_ops teql_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
teql_peek	sch_teql.c	/^teql_peek(struct Qdisc* sch)$/;"	f	file:
teql_qdisc_init	sch_teql.c	/^static int teql_qdisc_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
teql_reset	sch_teql.c	/^teql_reset(struct Qdisc* sch)$/;"	f	file:
teql_resolve	sch_teql.c	/^static inline int teql_resolve(struct sk_buff *skb,$/;"	f	file:
teql_sched_data	sch_teql.c	/^struct teql_sched_data$/;"	s	file:
text_match	em_text.c	/^struct text_match$/;"	s	file:
tfifo_dump	sch_netem.c	/^static int tfifo_dump(struct Qdisc *sch, struct sk_buff *skb)$/;"	f	file:
tfifo_enqueue	sch_netem.c	/^static int tfifo_enqueue(struct sk_buff *nskb, struct Qdisc *sch)$/;"	f	file:
tfifo_init	sch_netem.c	/^static int tfifo_init(struct Qdisc *sch, struct nlattr *opt)$/;"	f	file:
tfilter_notify	cls_api.c	/^static int tfilter_notify(struct net *net, struct sk_buff *oskb,$/;"	f	file:
tgenerator	cls_rsvp.h	/^	u8			tgenerator;$/;"	m	struct:rsvp_head
time_to_send	sch_netem.c	/^	psched_time_t	time_to_send;$/;"	m	struct:netem_skb_cb	file:
tmap	cls_rsvp.h	/^	u32			tmap[256\/32];$/;"	m	struct:rsvp_head
to_hash	cls_route.c	/^static inline u32 to_hash(u32 id)$/;"	f	file:
to_layer	em_text.c	/^	u8			to_layer;$/;"	m	struct:text_match	file:
to_offset	em_text.c	/^	u16			to_offset;$/;"	m	struct:text_match	file:
tokens	sch_htb.c	/^	long tokens, ctokens;	\/* current number of tokens *\/$/;"	m	struct:htb_class	file:
tokens	sch_tbf.c	/^	long	tokens;			\/* Current number of B tokens *\/$/;"	m	struct:tbf_sched_data	file:
toplevel	sch_cbq.c	/^	int			toplevel;$/;"	m	struct:cbq_sched_data	file:
tp_c	cls_u32.c	/^	struct tc_u_common	*tp_c;$/;"	m	struct:tc_u_hnode	typeref:struct:tc_u_hnode::tc_u_common	file:
tparent	sch_cbq.c	/^	struct cbq_class	*tparent;	\/* Ptr to tree parent in the class tree *\/$/;"	m	struct:cbq_class	typeref:struct:cbq_class::cbq_class	file:
transition_one_qdisc	sch_generic.c	/^static void transition_one_qdisc(struct net_device *dev,$/;"	f	file:
tunnel_bts	cls_rsvp.h	/^static int tunnel_bts(struct rsvp_head *data)$/;"	f
tunnel_recycle	cls_rsvp.h	/^static void tunnel_recycle(struct rsvp_head *data)$/;"	f
tunnelhdr	cls_rsvp.h	/^	u8			tunnelhdr;$/;"	m	struct:rsvp_filter
tunnelid	cls_rsvp.h	/^	u8			tunnelid;$/;"	m	struct:rsvp_session
tx_borrowed	sch_cbq.c	/^	struct cbq_class	*tx_borrowed;$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::cbq_class	file:
tx_class	sch_cbq.c	/^	struct cbq_class	*tx_class;$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::cbq_class	file:
tx_len	sch_cbq.c	/^	int			tx_len;$/;"	m	struct:cbq_sched_data	file:
u32_change	cls_u32.c	/^static int u32_change(struct tcf_proto *tp, unsigned long base, u32 handle,$/;"	f	file:
u32_classify	cls_u32.c	/^static int u32_classify(struct sk_buff *skb, struct tcf_proto *tp, struct tcf_result *res)$/;"	f	file:
u32_clear_hnode	cls_u32.c	/^static void u32_clear_hnode(struct tcf_proto *tp, struct tc_u_hnode *ht)$/;"	f	file:
u32_delete	cls_u32.c	/^static int u32_delete(struct tcf_proto *tp, unsigned long arg)$/;"	f	file:
u32_delete_key	cls_u32.c	/^static int u32_delete_key(struct tcf_proto *tp, struct tc_u_knode* key)$/;"	f	file:
u32_destroy	cls_u32.c	/^static void u32_destroy(struct tcf_proto *tp)$/;"	f	file:
u32_destroy_hnode	cls_u32.c	/^static int u32_destroy_hnode(struct tcf_proto *tp, struct tc_u_hnode *ht)$/;"	f	file:
u32_destroy_key	cls_u32.c	/^static int u32_destroy_key(struct tcf_proto *tp, struct tc_u_knode *n)$/;"	f	file:
u32_dump	cls_u32.c	/^static int u32_dump(struct tcf_proto *tp, unsigned long fh,$/;"	f	file:
u32_ext_map	cls_u32.c	/^static const struct tcf_ext_map u32_ext_map = {$/;"	v	typeref:struct:tcf_ext_map	file:
u32_get	cls_u32.c	/^static unsigned long u32_get(struct tcf_proto *tp, u32 handle)$/;"	f	file:
u32_hash_fold	cls_u32.c	/^static __inline__ unsigned u32_hash_fold(__be32 key, struct tc_u32_sel *sel, u8 fshift)$/;"	f	file:
u32_init	cls_u32.c	/^static int u32_init(struct tcf_proto *tp)$/;"	f	file:
u32_lookup_ht	cls_u32.c	/^u32_lookup_ht(struct tc_u_common *tp_c, u32 handle)$/;"	f	file:
u32_lookup_key	cls_u32.c	/^u32_lookup_key(struct tc_u_hnode *ht, u32 handle)$/;"	f	file:
u32_policy	cls_u32.c	/^static const struct nla_policy u32_policy[TCA_U32_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
u32_put	cls_u32.c	/^static void u32_put(struct tcf_proto *tp, unsigned long f)$/;"	f	file:
u32_set_parms	cls_u32.c	/^static int u32_set_parms(struct tcf_proto *tp, unsigned long base,$/;"	f	file:
u32_walk	cls_u32.c	/^static void u32_walk(struct tcf_proto *tp, struct tcf_walker *arg)$/;"	f	file:
un	sch_htb.c	/^	} un;$/;"	m	struct:htb_class	typeref:union:htb_class::__anon2	file:
undertime	sch_cbq.c	/^	psched_time_t		undertime;$/;"	m	struct:cbq_class	file:
unregister_qdisc	sch_api.c	/^EXPORT_SYMBOL(unregister_qdisc);$/;"	v
unregister_qdisc	sch_api.c	/^int unregister_qdisc(struct Qdisc_ops *qops)$/;"	f
unregister_tcf_proto_ops	cls_api.c	/^EXPORT_SYMBOL(unregister_tcf_proto_ops);$/;"	v
unregister_tcf_proto_ops	cls_api.c	/^int unregister_tcf_proto_ops(struct tcf_proto_ops *ops)$/;"	f
update_cfmin	sch_hfsc.c	/^update_cfmin(struct hfsc_class *cl)$/;"	f	file:
update_d	sch_hfsc.c	/^update_d(struct hfsc_class *cl, unsigned int next_len)$/;"	f	file:
update_ed	sch_hfsc.c	/^update_ed(struct hfsc_class *cl, unsigned int next_len)$/;"	f	file:
update_vf	sch_hfsc.c	/^update_vf(struct hfsc_class *cl, unsigned int len, u64 cur_time)$/;"	f	file:
uttEtherIfInfo	sch_generic.c	/^EXPORT_SYMBOL(uttEtherIfInfo);$/;"	v
uttEtherIfInfo	sch_generic.c	/^struct utt_wan_if_info   uttEtherIfInfo[UTT_MAX_IF_NUM];$/;"	v	typeref:struct:utt_wan_if_info
uttPerIpPerSecFlowSta	utt_qos_misc.c	/^EXPORT_SYMBOL(uttPerIpPerSecFlowSta);$/;"	v
uttPerIpPerSecFlowSta	utt_qos_misc.c	/^struct netFlowStatus* uttPerIpPerSecFlowSta[MAX_HASH_TABLE] = {0};$/;"	v	typeref:struct:netFlowStatus
uttSmartQosStaTask	sch_utt.c	/^static void uttSmartQosStaTask(void)$/;"	f	file:
utt_Qos_IsWeb	sch_generic.c	/^static void utt_Qos_IsWeb(struct sk_buff *skb, char* data, int datalen)$/;"	f	file:
utt_Qos_SetMarkForWeb	sch_generic.c	/^static void utt_Qos_SetMarkForWeb(struct sk_buff *skb)$/;"	f	file:
utt_smartQos_statistics	sch_utt.c	/^static struct timer_list utt_smartQos_statistics;$/;"	v	typeref:struct:timer_list	file:
uttqs	sch_utt.c	/^struct sk_buff_head uttqs;$/;"	v	typeref:struct:sk_buff_head
val	em_meta.c	/^	unsigned long		val;$/;"	m	struct:meta_value	file:
valid_perfect_hash	cls_tcindex.c	/^valid_perfect_hash(struct tcindex_data *p)$/;"	f	file:
value	em_meta.c	/^	unsigned long		value;$/;"	m	struct:meta_obj	file:
value	sch_dsmark.c	/^	u8			*value;$/;"	m	struct:dsmark_qdisc_data	file:
var_dev	em_meta.c	/^static inline int var_dev(struct net_device *dev, struct meta_obj *dst)$/;"	f	file:
vcc	sch_atm.c	/^	struct atm_vcc		*vcc;	\/* VCC; NULL if VCC is closed *\/$/;"	m	struct:atm_flow_data	typeref:struct:atm_flow_data::atm_vcc	file:
vt_node	sch_hfsc.c	/^	struct rb_node vt_node;		\/* parent's vt_tree member *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::rb_node	file:
vt_tree	sch_hfsc.c	/^	struct rb_root vt_tree;		\/* active children sorted by cl_vt *\/$/;"	m	struct:hfsc_class	typeref:struct:hfsc_class::rb_root	file:
vttree_firstfit	sch_hfsc.c	/^vttree_firstfit(struct hfsc_class *cl, u64 cur_time)$/;"	f	file:
vttree_get_minvt	sch_hfsc.c	/^vttree_get_minvt(struct hfsc_class *cl, u64 cur_time)$/;"	f	file:
vttree_insert	sch_hfsc.c	/^vttree_insert(struct hfsc_class *cl)$/;"	f	file:
vttree_remove	sch_hfsc.c	/^vttree_remove(struct hfsc_class *cl)$/;"	f	file:
vttree_update	sch_hfsc.c	/^vttree_update(struct hfsc_class *cl)$/;"	f	file:
w	cls_api.c	/^	struct tcf_walker w;$/;"	m	struct:tcf_dump_args	typeref:struct:tcf_dump_args::tcf_walker	file:
w	sch_api.c	/^	struct qdisc_walker 	w;$/;"	m	struct:check_loop_arg	typeref:struct:check_loop_arg::qdisc_walker	file:
w	sch_api.c	/^	struct qdisc_walker w;$/;"	m	struct:qdisc_dump_args	typeref:struct:qdisc_dump_args::qdisc_walker	file:
wait_pq	sch_htb.c	/^	struct rb_root wait_pq[TC_HTB_MAXDEPTH];$/;"	m	struct:htb_sched	typeref:struct:htb_sched::rb_root	file:
warned	sch_htb.c	/^	unsigned int warned;	\/* only one warning *\/$/;"	m	struct:htb_sched	file:
watchdog	sch_cbq.c	/^	struct qdisc_watchdog	watchdog;	\/* Watchdog timer,$/;"	m	struct:cbq_sched_data	typeref:struct:cbq_sched_data::qdisc_watchdog	file:
watchdog	sch_hfsc.c	/^	struct qdisc_watchdog watchdog;		\/* watchdog timer *\/$/;"	m	struct:hfsc_sched	typeref:struct:hfsc_sched::qdisc_watchdog	file:
watchdog	sch_htb.c	/^	struct qdisc_watchdog watchdog;$/;"	m	struct:htb_sched	typeref:struct:htb_sched::qdisc_watchdog	file:
watchdog	sch_netem.c	/^	struct qdisc_watchdog watchdog;$/;"	m	struct:netem_sched_data	typeref:struct:netem_sched_data::qdisc_watchdog	file:
watchdog	sch_tbf.c	/^	struct qdisc_watchdog watchdog;	\/* Watchdog timer *\/$/;"	m	struct:tbf_sched_data	typeref:struct:tbf_sched_data::qdisc_watchdog	file:
wd_expires	sch_cbq.c	/^	psched_tdiff_t		wd_expires;$/;"	m	struct:cbq_sched_data	file:
weight	sch_cbq.c	/^	long			weight;		\/* Relative allotment: see below *\/$/;"	m	struct:cbq_class	file:
work	sch_htb.c	/^	struct work_struct work;$/;"	m	struct:htb_sched	typeref:struct:htb_sched::work_struct	file:
wred_set	sch_gred.c	/^	struct red_parms wred_set;$/;"	m	struct:gred_sched	typeref:struct:gred_sched::red_parms	file:
write_classid	cls_cgroup.c	/^static int write_classid(struct cgroup *cgrp, struct cftype *cft, u64 value)$/;"	f	file:
x	sch_hfsc.c	/^	u64	x;	\/* current starting position on x-axis *\/$/;"	m	struct:runtime_sc	file:
xor	cls_flow.c	/^	u32			xor;$/;"	m	struct:flow_filter	file:
xstats	sch_cbq.c	/^	struct tc_cbq_xstats	xstats;$/;"	m	struct:cbq_class	typeref:struct:cbq_class::tc_cbq_xstats	file:
xstats	sch_htb.c	/^	struct tc_htb_xstats xstats;	\/* our special stats *\/$/;"	m	struct:htb_class	typeref:struct:htb_class::tc_htb_xstats	file:
y	sch_hfsc.c	/^	u64	y;	\/* current starting position on y-axis *\/$/;"	m	struct:runtime_sc	file:
